{"mappings":"AEYsB,WCmOE,uBCnMD,0BAAA,yFAAA,qBAAA,qBAAA,oBAAA,oBCjCmC,sBAAA,uBAAA,4BCqHxC,+BAAA,qCAAA,+BAAA,8BCxBc,kBAAA,qECsET,0FAkCD,eAsU6C,oFC/e/C,gDCEgB,sDCIpB,gHAAA,kCAqBG,oCAAA,sCAAA,4CAAA,0CAAA,yFAAA,yFAAA,yFAAA,sFAAA,yBA6CO,8FC3Fb,0EAAA,4ECiEqC,4CAAA,uDAAA,sBAAA,qBAAA,2BCgBhC,4CAAA,mCAqBG,0FAAA,0FAAA,0FA2BC,2GA8CC,8EAAA,8EAkBD,uCAAA,qCAAA,oCAAA,kCAAA,kCAsBV,8BAAA,2BAAA,yBAAA,0CAAA,2CAAA,0BAoBO,yCASM,yCAAA,uCAAA,sCAAA,oCAqBb,kCAAA,gCAAA,+BAAA,6BAKG,sCAAA,oCAAA,mCAAA,iCAAA,8BAeE,wCAAA,sCAAA,qCAAA,mCAAA,gCA6FL,4BAAA,4BAAA,qDAAA,wDAgHmB,yBAAA,6CCzelB,0CAAA,2CC2Gc,uCAAA,wCAAA,wCAAA,yCC/Eb,mCAAA,2DAAA,wCAAA,sCAAA,sCAAA,oCAAA,uSAAA,sQAAA,uBAAA,wFAAA,wCAAA,wCAAA,wCAAA,wCAAA,+BAAA,gCAAA,+BAAA,+BAAA,yDAAA,2BA6EF,uCAAA,4CAAA,mBAAA,qBAAA,gCAAA,+BAAA,wBAAA,iFAkHU,6BCxKtB,2GAAA,mCAAA,wEAAA,8CAAA,4DAEqB,mCAAA,2DAAA,4FAAA,uGAAA,mICqCD,8BAAA,oCA2DS,2CAAA,2CAAA,4CAAA,4CAcN,khBAAA,uaAkCE,mBAAA,4BAAA,2EAAA,0EAAA,uEAAA,0EAAA,2EAAA,yDAAA,yBAAA,qBAmEA,wCAAA,sCAAA,wCAAA,sCAAA,sCAAA,oCAAA,sCAAA,oCAwBV,kCAqTG,+CAyDA,0CAAA,sCCxlBD,kCAAA,gCAAA,+BAAA,6BAAA,qBAAA,sBAAA,0CAyBiC,4EAgC9B,eA0BK,4BAAA,8BAAA,8CAAA,4CAAA,qFAAA,qFAAA,mFAAA,0CAAA,kBAAA,kBAqGK,sCAAA,oCAAA,mCAAA,iCAAA,2BAAA,uCAAA,kBA8DV,+FAWF,oCAAA,wCC1TL,8EAAA,gFCuBO,oDAAA,gDAAA,uBAoEqC,wCAAA,2CAAA,iDAAA,+CAAA,gCAAA,0BAAA,gCAAA,8BAAA,mBAQf,0BAQD,sBCtDhB,yCAAA,sBAAA,8BAAA,wBAAA,mCAAA,mCAAA,gCAAA,kCAAA,6BAAA,qEAAA,mEAAA,mEAAA,iEAAA,qBAAA,oBAAA,iBAAA,oEAAA,yCAAA,qEAAA,yCAAA,4CAAA,2CAAA,2CAAA,yCAAA,0CAAA,yCAAA,4CAAA,2CAAA,2CAAA,yCAuRD,+BAAA,mDAAA,4CAAA,qDA8BE,yCAAA,0CC5UZ,2BAAA,oCAAA,wBAAA,uDAAA,qDAAA,gFAAA,+EAAA,2CAAA,4BAAA,0CAAA,yCAAA,6CAAA,6BCPE,uCAAA,wCAAA,qBAYF,+EAAA,+EAsBD,+EAAA,+EAAA,qBAAA,4BAiBK,wBAAA,kCAAA,gCAAA,gCC1BH,qpBAAA,+gBAAA,qFAAA,iBAAA,8EAAA,8EAAA,8EAAA,qDAAA,mDAAA,iEAAA,+DAAA,+DAAA,6DAAA,2CAAA,0FAAA,iDAAA,wBAAA,uCAAA,wCAAA,oCAAA,kCAAA,kCAAA,gCAAA,qFAAA,qFAAA,kFAAA,qFAAA,qFAAA,mPAAA,mPAAA,qFAAA,qCAAA,gCAAA,qBAAA,qBAAA,kBAAA,kBAAA,gFAAA,gFAAA,gFAAA,qFAAA,qFAAA,oFAAA,oFAAA,gFAAA,gFAAA,gFAAA,gFAAA,0BAAA,gFAmME,kBAAA,yFAAA,yFAAA,yFAAA,gGAAA,yFAAA,yFAAA,yFAAA,yFAAA,qFAAA,yFAAA,gGAAA,yFAAA,yFAAA,yFAAA,sCAAA,6BAAA,sMAkIQ,cAAA,gBAAA,sCAAA,0BAeD,2CAAA,4CC9WV,2CAAA,wBAOE,gCAAA,yCAAA,sBA2BD,uBAKK,+BAAA,qBAKO,wCAAA,sCAAA,sCAAA,oCA8CF,8BAAA,uBAiBE,yBAqCU,2BAiBZ,gCAAA,8BAAA,0BAAA,uBAAA,sBC5IL,0BAAA,qBAAA,0BAAA,sBAAA,6BAAA,2BCpBL,oFAAA,0CAAA,0CAAA,uCAAA,yCAAA,yCAAA,uCAAA,0CAAA,0CAAA,yFAAA,yFAAA,+FAAA,+FAAA,4FAAA,+FAAA,+FAAA,+FCnBF,0CAAA,4EAAA,0CAAA,uCAAA,wCAAA,2CAAA,8EAAA,2CAAA,wCAAA,yCCOc,sFAAA,qIAAA,mCAAA,2DAAA,gIAAA,+HAAA,qCAAA,yBAAA,iCAAA,kCAoBN,uBAAA,+CAAA,wBAyCe,qCAAA,kCAAA,mCAAA,gCAAA,mCAAA,gCAAA,iCAAA,8BAAA,wCAAA,6CAAA,4CAAA,6CAAA,mCAAA,oCAAA,qBAAA,qBAAA,yBAAA,sBAAA,+BAAA,6FAAA,mDAAA,2BAAA,gCAAA,yDAAA,iDAAA,+BAAA,6BAAA,2BAAA,yBAAA,0BC+MvB,yBAuBM,sBAAA,sBAAA,iBAAA,oFAAA,0FAuBA,uCAAA,8EAMA,wCAAA,sCAAA,sCAAA,oCAAA,8FAAA,uCAeF,yFAAA,wCAAA,sCAqFU,6BA8CD,sBAAA,uBAaK,oBAAA,uBAAA,uCA6CG,0CAAA,2CA0HjB,mFAAA,yBAAA,qFAAA,4BAAA,8BAAA,oCAAA,kCAAA,0BAAA,sBAAA,yBAAA,+BAAA,6BAiFI,qBAAA,wBAEF,oBAAA,uBAAA,mBAAA,sBAAA,4BAAA,0BAAA,0BAAA,8BAAA,wEAAA,0FAAA,sBAAA,uBAeI,8EAAA,yCAAA,sBA0FE,gLAiBe,2BAOf,6KCjtBT,mBAAA,qBAAA,sBAAA,wBAAA,gCAAA,iCAAA,4BAmGU,oBAAA,sBAAA,sDAAA,8BAAA,yDAAA,cAAA,gCAmDd,8EAAA,wBAAA,4CAAA,4CAAA,qBAAA,4BAAA,4DAiIK,wBAAA,mBAgFA,2BAAA,mCAAA,2BAAA,8BAAA,8BAAA,yBAAA,YAAA,gBAAA,4BAAA,0BAAA,yBAAA,iBCnbG,2BAAA,sFAAA,yBAAA,0BAAA,kCAAA,gCAAA,+BAAA,6BAAA,2CAAA,8CAAA,6CAAA,6CAAA,2CAAA,oBAAA,6DAAA,yDAAA,8DAAA,yDAAA,2HAAA,yBAAA,yCAAA,sBAAA,8EAAA,8EAAA,2EAAA,wBAAA,uCAAA,qCAAA,qCAAA,mCAAA,2LAAA,+BAAA,2BAAA,yCAAA,uCAAA,4BAAA,wCAAA,wCAAA,kBAAA,kBAkCF,sFAAA,8BAAA,uBAAA,sBAAA,sBAAA,yBAAA,+BAAA,6BAAA,yIAYE,mBAAA,yBAOD,oBAAA,+CAQO,kCAAA,gCAAA,+BAAA,6BAAA,8DAqDgC,uBAkBpB,oBAAA,mBA8BhB,4CAAA,iDAKK,iBAAA,kBAwCD,yFAAA,yFAAA,qBAAA,uCAAA,qCAAA,qCAAA,mCAAA,2BAAA,+BAAA,2DC5NL,kBA6Ce,mBAAA,4BAAA,iCAAA,oCAAA,0CAAA,yCAAA,4CAAA,uCAAA,wDAAA,6DAAA,gCAAA,iCAAA,iCAAA,gCAAA,gCAAA,2BAAA,+GAAA,uDAAA,0DAAA,yDAAA,yDAAA,uDAAA,kGAAA,wBAAA,0CAqEnB,6BAAA,2BAAA,+EAAA,kFAAA,+BAAA,6BAAA,6BAAA,yBAAA,+BAAA,2CAAA,yEAAA,2CAAA,+BAAA,kCAAA,gCAAA,mBAAA,kBAAA,0BAAA,yBAAA,mBAAA,yCAAA,4CAAA,2CAAA,2CAAA,yCCxHG,6BAAA,uBACE,mBAAA,sBAeM,mBAAA,sBAAA,yBCPK,0CAAA,6CAAA,eAAA,yBAAA,wBAAA,8BAAA,0BAEyB,eACtC,2BAAA,4BAAA,iDAAA,sBnCvEE,WYkYV,+BKpLa,sEAAA,yDInJA,4EAAA,oDAAA,gEAAA,kFAAA,kGAAA,kGAAA,6EAAA,qGAAA,kGAAA,6IAAA,yEGLV,gFAAA,oFAAA,kFAAA,uFCnBC,iFAAA,8DA2BD,uHAyEY,0BAAA,6BAsDF,2BK4jBF,iFAAA,8DAAA,0EEzoBL,6ECFkB,qDAqEnB,kGjCnLK,WqB2DG,+FAAA,oGAAA,wGAAA,sFIxBT,uEAAA,oDAAA,gEO6EE,6ECFkB,wHjC9Gd,WyBmCN,0GAAA,uFAAA,mGAMD,qMzBzCO,WyBmCN,kJAAA,+HAAA,2IAMD,4GzBzCO,WyBmCN,wIAAA,qHAAA,iIAMD,kHzBzCO,WAAA,gKAAA,WAAA,+JAAA,WAAA,uJEgCC,aAAA,8BIwFH,+BGlED,mCAAA,8BAAA,yBA6CO,gDGoFH,wCGlJT,kCA6EF,2BEfQ,gCAAA,gCAAA,4DAAA,mCA4LC,sCCsBD,8CIjRN,2BAAA,6BAAA,+BAAA,qCAAA,mCCKA,yBAAA,iCAAA,kCAAA,mCAsBD,8BCTE,wBAAA,2BAAA,wBAAA,iCAAA,8BAAA,6BAAA,0BAAA,yBAAA,wBAAA,0BAmME,8BG5NF,+BAAA,yCAAA,uCImRH,uBAAA,sBCnBc,kCAAA,mC3B9NE,SAAA,SAAA,iRAAA,6BCyDR,aAAA,8CWiLL,mCCuBG,qCahBN,yBAAA,8BzBxLQ,aAAA,wCAAA,0F8BpIpB,onBASA,ynBA8BA,smBASA,smBASA,smBASA,smBASA,smBASA,smBASA,smBASA,wmBASA,wmBbA0B,sEAWE,2EC6JJ,mEAAA,mEAAA,mEC9NP,mBAAA,6BAAA,2BAAA,iCA0FU,aAAA,yBAAA,2BAAA,4BMsHD,kBAAA,uCAAA","sources":["index.af44fab6.css","e170c49e5d7bb354","src/components/App.tsx","src/components/WeekComparison.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Divider.tsx","src/components/TeamPicker.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Image.tsx","node_modules/@react-spectrum/s2/icons/packages/@react-spectrum/s2/src/Skeleton.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Picker.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Avatar.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/CenterBaseline.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Checkbox.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/ui-icons/Dash.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Form.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Menu.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/ui-icons/Chevron.tsx","node_modules/@react-spectrum/s2/icons/packages/@react-spectrum/s2/src/Icon.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Popover.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Provider.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ComboBox.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Field.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/ui-icons/Asterisk.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ContextualHelp.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ActionButton.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/NotificationBadge.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ProgressCircle.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Button.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Dialog.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ButtonGroup.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/CloseButton.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/ui-icons/Cross.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Modal.tsx","src/components/Projections.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Tabs.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/TabsPicker.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/TextField.tsx","src/components/PerformanceHistory.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ToggleButton.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/font-faces.css"],"sourcesContent":["@layer _.a {\n  .FOLfCn12 {\n    height: 500px;\n  }\n\n  ._df12 {\n    align-self: stretch;\n  }\n\n  .gi12 {\n    background-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .85);\n  }\n\n  .FceNfn12 {\n    height: 1px;\n  }\n\n  .FT4Nfn12 {\n    height: 4px;\n  }\n\n  .ZceNfn12 {\n    width: 1px;\n  }\n\n  .ZT4Nfn12 {\n    width: 4px;\n  }\n\n  .Zlizurc12 {\n    width: 20px;\n  }\n\n  .Flizurc12 {\n    height: 20px;\n  }\n\n  .__Ab12 {\n    justify-self: center;\n  }\n\n  ._H40ub4c12 {\n    object-fit: inherit;\n  }\n\n  .__D40ub4c12 {\n    object-position: inherit;\n  }\n\n  .Ye12 {\n    transition-property: none;\n  }\n\n  .Xe12 {\n    transition-duration: .5s;\n  }\n\n  .pw12 {\n    color: #0000;\n  }\n\n  ._ma12 {\n    -webkit-box-decoration-break: clone;\n    box-decoration-break: clone;\n  }\n\n  .g_h12 {\n    background-color: var(--lightningcss-light, #4b75ff) var(--lightningcss-dark, #4069fd);\n  }\n\n  ._Rr12 {\n    right: 0;\n  }\n\n  .pqYuhc > :not([slot=\"icon\"], [slot=\"avatar\"], [slot=\"label\"], [data-slot=\"label\"]) {\n    display: none;\n  }\n\n  .OEzkoQe12 {\n    outline-color: var(--s2-container-bg);\n  }\n\n  .FRGfhd:before {\n    content: \"Â \";\n    visibility: hidden;\n    width: 0;\n  }\n\n  .Yc12 {\n    transition-property: color, background-color, var(--gp, color), border-color, text-decoration-color, fill, stroke;\n  }\n\n  .zhJUGr12 {\n    grid-column-start: field;\n  }\n\n  ._k7m7Gv12 {\n    border-top-width: .125rem;\n  }\n\n  .h7m7Gv12 {\n    border-bottom-width: .125rem;\n  }\n\n  .m7m7Gv12 {\n    border-inline-start-width: .125rem;\n  }\n\n  .l7m7Gv12 {\n    border-inline-end-width: .125rem;\n  }\n\n  .gu12 {\n    background-color: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .gY12 {\n    background-color: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #6995fe);\n  }\n\n  .gt12 {\n    background-color: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #ff6756);\n  }\n\n  .gw12 {\n    background-color: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .iA12 {\n    border-color: #0000;\n  }\n\n  .-_8sjo0b-txpP0Sb12 {\n    --iconPrimary: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .Zh12 {\n    width: calc(.5rem * var(--s2-scale));\n    width: calc(.5rem * var(--s2-scale));\n  }\n\n  .Fi12 {\n    height: calc(.5rem * var(--s2-scale));\n    height: calc(.5rem * var(--s2-scale));\n  }\n\n  .DS1aTJb12 {\n    grid-template-columns: [field] 1fr;\n  }\n\n  .Dfzkwne12 {\n    grid-template-columns: [label] auto[field] 1fr;\n  }\n\n  .Ui12 {\n    row-gap: 1.25rem;\n  }\n\n  .Un12 {\n    row-gap: 2.5rem;\n  }\n\n  .qf12 {\n    column-gap: .714286em;\n  }\n\n  .Lh12 {\n    max-width: calc(20rem * var(--s2-scale));\n  }\n\n  .__ya12 {\n    grid-auto-rows: min-content;\n  }\n\n  .DGTLJAe12 {\n    grid-template-columns: .5625rem auto auto minmax(0, 1fr) auto auto auto .5625rem;\n  }\n\n  .DyaX9Fb12 {\n    grid-template-columns: .9375rem auto auto minmax(0, 1fr) auto auto auto .9375rem;\n  }\n\n  .Dk92HIe12 {\n    grid-template-columns: 1.125rem auto auto minmax(0, 1fr) auto auto auto 1.125rem;\n  }\n\n  .CcAc39c12 {\n    grid-template-areas: \". checkmark icon label value keyboard descriptor .\"\n                         \". . . description . . . .\";\n  }\n\n  .pu12 {\n    color: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  .ps12 {\n    color: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #6995fe);\n  }\n\n  .z2CW8rb12 {\n    grid-column-start: checkmark;\n  }\n\n  .y2CW8rb12 {\n    grid-column-end: checkmark;\n  }\n\n  .B2CW8rb12 {\n    grid-row-start: checkmark;\n  }\n\n  .A2CW8rb12 {\n    grid-row-end: checkmark;\n  }\n\n  .Hw12 {\n    margin-inline-end: .714286em;\n  }\n\n  .AvoofG12 {\n    grid-row-end: span 2;\n  }\n\n  .Jt12 {\n    margin-top: .428571em;\n  }\n\n  ._dc12 {\n    align-self: center;\n  }\n\n  .Zx12 {\n    width: calc(2.75rem * var(--s2-scale));\n  }\n\n  .Fw12 {\n    height: calc(2.75rem * var(--s2-scale));\n  }\n\n  ._Ha12 {\n    object-fit: contain;\n  }\n\n  .JAzEcG12 {\n    margin-top: var(--labelPadding);\n  }\n\n  .z9u7zPc12 {\n    grid-column-start: description;\n  }\n\n  .y9u7zPc12 {\n    grid-column-end: description;\n  }\n\n  .B9u7zPc12 {\n    grid-row-start: description;\n  }\n\n  .A9u7zPc12 {\n    grid-row-end: description;\n  }\n\n  .z8bmXs12 {\n    grid-column-start: value;\n  }\n\n  .y8bmXs12 {\n    grid-column-end: value;\n  }\n\n  .B8bmXs12 {\n    grid-row-start: value;\n  }\n\n  .A8bmXs12 {\n    grid-row-end: value;\n  }\n\n  .z45MTAd12 {\n    grid-column-start: keyboard;\n  }\n\n  .y45MTAd12 {\n    grid-column-end: keyboard;\n  }\n\n  .B45MTAd12 {\n    grid-row-start: keyboard;\n  }\n\n  .A45MTAd12 {\n    grid-row-end: keyboard;\n  }\n\n  ._3f12 {\n    unicode-bidi: plaintext;\n  }\n\n  .z0cdLvd12 {\n    grid-column-start: descriptor;\n  }\n\n  .y0cdLvd12 {\n    grid-column-end: descriptor;\n  }\n\n  .B0cdLvd12 {\n    grid-row-start: descriptor;\n  }\n\n  .A0cdLvd12 {\n    grid-row-end: descriptor;\n  }\n\n  .Iv12 {\n    margin-inline-start: .5rem;\n  }\n\n  .z3mU12 {\n    grid-column-start: 2;\n  }\n\n  .yAZKy12 {\n    grid-column-end: -2;\n  }\n\n  .JydxGIe12 {\n    margin-top: calc(.3125rem * var(--s2-scale));\n  }\n\n  .GydxGIe12 {\n    margin-bottom: calc(.3125rem * var(--s2-scale));\n  }\n\n  .-Z4Pn4c-a12 {\n    --scaleX: -1;\n  }\n\n  .__Ha12 {\n    scale: var(--scaleX, 1) var(--scaleY, 1);\n  }\n\n  .Zg12 {\n    width: calc(.375rem * var(--s2-scale));\n  }\n\n  .Fg12 {\n    height: calc(.375rem * var(--s2-scale));\n  }\n\n  .ZH12 {\n    width: calc(6rem * var(--s2-scale));\n  }\n\n  .Zq12 {\n    width: calc(10rem * var(--s2-scale));\n  }\n\n  .FB12 {\n    height: calc(6rem * var(--s2-scale));\n  }\n\n  .Fr12 {\n    height: calc(10rem * var(--s2-scale));\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ._pc12 {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  .oc12 {\n    border-start-start-radius: .625rem;\n  }\n\n  .nc12 {\n    border-start-end-radius: .625rem;\n  }\n\n  .kc12 {\n    border-end-start-radius: .625rem;\n  }\n\n  .jc12 {\n    border-end-end-radius: .625rem;\n  }\n\n  ._rgr5H3d12 {\n    filter: drop-shadow(0 0 2px var(--lightningcss-light, #0000001f) var(--lightningcss-dark, #0000005c)) drop-shadow(0 2px 6px var(--lightningcss-light, #0000000a) var(--lightningcss-dark, #0000001f)) drop-shadow(0 4px 12px var(--lightningcss-light, #00000014) var(--lightningcss-dark, #0000003d));\n  }\n\n  ._nLeasBb12 {\n    box-shadow: 0 4px 12px var(--lightningcss-light, #00000014) var(--lightningcss-dark, #0000003d), 0 2px 6px var(--lightningcss-light, #0000000a) var(--lightningcss-dark, #0000001f), 0 0 2px var(--lightningcss-light, #0000001f) var(--lightningcss-dark, #0000005c);\n  }\n\n  ._nd12 {\n    box-shadow: none;\n  }\n\n  .Oye39g12 {\n    outline-color: var(--lightningcss-light, #fff0) var(--lightningcss-dark, #323232);\n  }\n\n  .Zz12 {\n    width: calc(21rem * var(--s2-scale));\n  }\n\n  .ZB12 {\n    width: calc(26rem * var(--s2-scale));\n  }\n\n  .ZE12 {\n    width: calc(36rem * var(--s2-scale));\n  }\n\n  .LEmL1Zb12 {\n    max-width: calc(100vw - 24px);\n  }\n\n  .-_8PloMd-F12 {\n    --translateY: 4px;\n  }\n\n  .-_8PloMd-l12 {\n    --translateY: -4px;\n  }\n\n  .-_8PloMd-s12 {\n    --translateY: 0px;\n  }\n\n  .-_7PloMd-s12 {\n    --translateX: 0px;\n  }\n\n  ._2c12 {\n    transition-timing-function: cubic-bezier(.5, 0, 1, 1);\n  }\n\n  ._Ob12 {\n    pointer-events: none;\n  }\n\n  .tEzkoQe12 {\n    fill: var(--s2-container-bg);\n  }\n\n  .Fh12 {\n    height: calc(.5625rem * var(--s2-scale));\n  }\n\n  ._Sb12 {\n    rotate: none;\n  }\n\n  ._Sc12 {\n    rotate: 180deg;\n  }\n\n  .-_7PloMd-m12 {\n    --translateX: -4px;\n  }\n\n  .-_7PloMd-G12 {\n    --translateX: 4px;\n  }\n\n  ._Vb12 {\n    stroke-width: 1px;\n  }\n\n  .Vye39g12 {\n    stroke: var(--lightningcss-light, #fff0) var(--lightningcss-dark, #323232);\n  }\n\n  .L40ub4c12 {\n    max-width: inherit;\n  }\n\n  :where(:root, :host) {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n    --s2-scale: 1;\n    --s2-font-size-base: 14;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  @media not ((hover: hover) and (pointer: fine)) {\n    :where(:root, :host) {\n      --s2-scale: 1.25;\n      --s2-font-size-base: 17;\n    }\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ._pc12 {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  .-Ovbhqd-gX12 {\n    --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .-Ovbhqd-gqlRAZb12 {\n    --s2-container-bg: var(--lightningcss-light, #f8f8f8) var(--lightningcss-dark, #1b1b1b);\n  }\n\n  .gEzkoQe12 {\n    background-color: var(--s2-container-bg);\n    background-color: var(--s2-container-bg);\n    background-color: var(--s2-container-bg);\n  }\n\n  .-Bu7z1c-oa12 {\n    --radius: .25rem;\n  }\n\n  .Iw12 {\n    margin-inline-start: .714286em;\n  }\n\n  .Zn12 {\n    width: calc(1.375rem * var(--s2-scale));\n  }\n\n  .Zp12 {\n    width: calc(1.625rem * var(--s2-scale));\n  }\n\n  .Fo12 {\n    height: calc(1.375rem * var(--s2-scale));\n  }\n\n  .Fq12 {\n    height: calc(1.625rem * var(--s2-scale));\n  }\n\n  .uk12 {\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._Fd12 {\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n  }\n\n  .qh12 {\n    column-gap: 0;\n  }\n\n  .yzZKy12 {\n    grid-column-end: -1;\n  }\n\n  .CHV1uCd12 {\n    grid-template-areas: \". checkmark icon label .\"\n                         \". . . description .\";\n  }\n\n  .DfLJE012 {\n    grid-template-columns: .5625rem auto auto minmax(0, 1fr) .5625rem;\n  }\n\n  .Dxy3qDe12 {\n    grid-template-columns: .75rem auto auto minmax(0, 1fr) .75rem;\n  }\n\n  .DdpPw412 {\n    grid-template-columns: .9375rem auto auto minmax(0, 1fr) .9375rem;\n  }\n\n  .DTw5ujc12 {\n    grid-template-columns: 1.125rem auto auto minmax(0, 1fr) 1.125rem;\n  }\n\n  .EpvfBwb12 {\n    grid-template-rows: auto minmax(0, min-content);\n  }\n\n  .FF12 {\n    height: min-content;\n  }\n\n  .ry12 {\n    cursor: pointer;\n  }\n\n  .IH8XZ7c12 {\n    margin-inline-start: .5625rem;\n  }\n\n  .Ip2UVod12 {\n    margin-inline-start: .75rem;\n  }\n\n  .IaxPIqb12 {\n    margin-inline-start: .9375rem;\n  }\n\n  .I2d3n12 {\n    margin-inline-start: 1.125rem;\n  }\n\n  .HH8XZ7c12 {\n    margin-inline-end: .5625rem;\n  }\n\n  .Hp2UVod12 {\n    margin-inline-end: .75rem;\n  }\n\n  .HaxPIqb12 {\n    margin-inline-end: .9375rem;\n  }\n\n  .H2d3n12 {\n    margin-inline-end: 1.125rem;\n  }\n\n  .Ht12 {\n    margin-inline-end: .428571em;\n  }\n\n  .-R_-Rjxyh812 {\n    --R: calc(var(--F, var(--M)) * 3 / 16);\n  }\n\n  .NuHSBze12 {\n    min-width: var(--trigger-width);\n  }\n\n  .ZuHSBze12 {\n    width: var(--trigger-width);\n  }\n\n  .zv6x9r12 {\n    grid-column-start: label;\n  }\n\n  .yv6x9r12 {\n    grid-column-end: label;\n  }\n\n  .Bv6x9r12 {\n    grid-row-start: label;\n  }\n\n  .Av6x9r12 {\n    grid-row-end: label;\n  }\n\n  .sf12 {\n    display: inline;\n  }\n\n  ._Wb12 {\n    text-align: end;\n  }\n\n  .QgOnRt12 {\n    padding-bottom: var(--field-gap);\n  }\n\n  .pl12 {\n    color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / 1);\n  }\n\n  .Fa12 {\n    height: 0;\n  }\n\n  ._kc12 {\n    border-top-width: 2px;\n  }\n\n  .hc12 {\n    border-bottom-width: 2px;\n  }\n\n  .mCPFGYc12 {\n    border-inline-start-width: var(--m);\n  }\n\n  .l5OFGYc12 {\n    border-inline-end-width: var(--l);\n  }\n\n  .ip12 {\n    border-color: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #fc432e);\n  }\n\n  .im12 {\n    border-color: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #ff6756);\n  }\n\n  .gX12 {\n    background-color: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .-R_-Rv12 {\n    --R: calc(var(--F, var(--M)) * 3 / 8);\n  }\n\n  .-m_-mc12 {\n    --m: 2px;\n  }\n\n  .-l_-lc12 {\n    --l: 2px;\n  }\n\n  .zzBWQ8d12 {\n    grid-column-start: helptext;\n  }\n\n  .yzBWQ8d12 {\n    grid-column-end: helptext;\n  }\n\n  .BzBWQ8d12 {\n    grid-row-start: helptext;\n  }\n\n  .AzBWQ8d12 {\n    grid-row-end: helptext;\n  }\n\n  ._qb12 {\n    contain: inline-size;\n  }\n\n  .TgOnRt12 {\n    padding-top: var(--field-gap);\n  }\n\n  .rD12 {\n    cursor: text;\n  }\n\n  .-_8sjo0b-tq12 {\n    --iconPrimary: var(--lightningcss-light, #f03823) var(--lightningcss-dark, #fc432e);\n  }\n\n  .It12 {\n    margin-inline-start: .428571em;\n  }\n\n  .HAxCW0c12 {\n    margin-inline-end: -.142857em;\n  }\n\n  .Zi12 {\n    width: calc(.625rem * var(--s2-scale));\n    width: calc(.625rem * var(--s2-scale));\n  }\n\n  .Fj12 {\n    height: calc(.625rem * var(--s2-scale));\n    height: calc(.625rem * var(--s2-scale));\n  }\n\n  .NOBje7c12 {\n    min-width: calc(16.75rem * var(--s2-scale));\n  }\n\n  .ZOBje7c12 {\n    width: calc(16.75rem * var(--s2-scale));\n  }\n\n  .Th12 {\n    padding-top: 24px;\n  }\n\n  .Jnqb3Ob12 {\n    margin-top: calc(var(--T) * -1);\n  }\n\n  .Gnqb3Ob12 {\n    margin-bottom: calc(var(--T) * -1);\n  }\n\n  .Inqb3Ob12 {\n    margin-inline-start: calc(var(--T) * -1);\n  }\n\n  .Hnqb3Ob12 {\n    margin-inline-end: calc(var(--T) * -1);\n  }\n\n  .TjCFGYc12 {\n    padding-top: var(--T);\n  }\n\n  .Qh12 {\n    padding-bottom: 24px;\n  }\n\n  .Sh12 {\n    padding-inline-start: 24px;\n  }\n\n  .Rh12 {\n    padding-inline-end: 24px;\n  }\n\n  .-T_-Th12 {\n    --T: 24px;\n  }\n\n  .Gv12 {\n    margin-bottom: .5rem;\n  }\n\n  .JC12 {\n    margin-top: 1rem;\n  }\n\n  .wc12 {\n    font-variation-settings: \"wght\" 500;\n  }\n\n  .xc12 {\n    font-weight: 500;\n  }\n\n  .N7yFGYc12 {\n    min-width: var(--N);\n  }\n\n  .-SFnbic-_Jb12 {\n    --size: 1;\n  }\n\n  .-SFnbic-_JICefdd12 {\n    --size: .790123;\n  }\n\n  .-SFnbic-_JJOW22b12 {\n    --size: .888889;\n  }\n\n  .-SFnbic-_J0K2hn12 {\n    --size: 1.125;\n  }\n\n  .-SFnbic-_JaP8ec12 {\n    --size: 1.26563;\n  }\n\n  .-Bu7z1c-ob12 {\n    --radius: .5rem;\n  }\n\n  .oj12 {\n    border-start-start-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .nj12 {\n    border-start-end-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .kj12 {\n    border-end-start-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .jj12 {\n    border-end-end-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  ._vb12 {\n    flex-shrink: 1;\n  }\n\n  ._sb12 {\n    flex-basis: 0;\n  }\n\n  ._9d12 {\n    z-index: 2;\n  }\n\n  .-B5H9Ae-WXN7eQb12 {\n    --badgeTop: calc(var(--F) / 2 - var(--iconWidth) / 2);\n  }\n\n  .-SqFa4c-ZuUmpre12 {\n    --iconWidth: 1.42857em;\n  }\n\n  .-dcAs1c-ZaYffXd12 {\n    --badgePosition: calc(var(--S)  + var(--iconWidth));\n  }\n\n  .-F_-Fx12 {\n    --F: calc(2rem * var(--s2-scale));\n  }\n\n  .-F_-Fn12 {\n    --F: calc(1.25rem * var(--s2-scale));\n  }\n\n  .-F_-Fp12 {\n    --F: calc(1.5rem * var(--s2-scale));\n  }\n\n  .-F_-Fv12 {\n    --F: calc(2.5rem * var(--s2-scale));\n  }\n\n  .-F_-Fz12 {\n    --F: calc(3rem * var(--s2-scale));\n  }\n\n  .-S_-Sv12 {\n    --S: calc(var(--F, var(--M)) * 3 / 8);\n  }\n\n  .-N_-Nk12 {\n    --N: calc(2rem * var(--s2-scale));\n  }\n\n  .-N_-Ne12 {\n    --N: calc(1.25rem * var(--s2-scale));\n  }\n\n  .-N_-Nf12 {\n    --N: calc(1.5rem * var(--s2-scale));\n  }\n\n  .-N_-Nj12 {\n    --N: calc(2.5rem * var(--s2-scale));\n  }\n\n  .-N_-Nl12 {\n    --N: calc(3rem * var(--s2-scale));\n  }\n\n  .WtedXZc12 {\n    top: var(--badgeTop);\n  }\n\n  ._A1IiWH12 {\n    inset-inline-start: var(--badgePosition);\n  }\n\n  .JlZStSb12 {\n    margin-top: calc((var(--F) * -1) / 2);\n  }\n\n  .IlZStSb12 {\n    margin-inline-start: calc((var(--F) * -1) / 2);\n  }\n\n  .Zj12 {\n    width: calc(.75rem * var(--s2-scale));\n  }\n\n  .Fk12 {\n    height: calc(.75rem * var(--s2-scale));\n  }\n\n  .FRuFGYc12 {\n    height: var(--F);\n  }\n\n  .fa12 {\n    aspect-ratio: 1;\n    aspect-ratio: 1;\n  }\n\n  .ZK12 {\n    width: max-content;\n  }\n\n  .Sv12 {\n    padding-inline-start: calc(var(--F, var(--M)) * 3 / 8);\n  }\n\n  .Rv12 {\n    padding-inline-end: calc(var(--F, var(--M)) * 3 / 8);\n  }\n\n  .-g_-g212 {\n    --g: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #4069fd);\n  }\n\n  .-g_-g_c12 {\n    --g: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / 1);\n  }\n\n  .-F_-Fk12 {\n    --F: calc(.75rem * var(--s2-scale));\n  }\n\n  .-F_-FLb8KJ12 {\n    --F: 1.28571em;\n  }\n\n  .-F_-Fi12 {\n    --F: calc(.5rem * var(--s2-scale));\n  }\n\n  .-F_-Ft12 {\n    --F: calc(1rem * var(--s2-scale));\n  }\n\n  .-F_-Fm12 {\n    --F: calc(1.125rem * var(--s2-scale));\n  }\n\n  .-F_-Fspvr8c12 {\n    --F: .857143em;\n  }\n\n  .ZG12 {\n    width: calc(4rem * var(--s2-scale));\n  }\n\n  .FA12 {\n    height: calc(4rem * var(--s2-scale));\n  }\n\n  .fa12 {\n    aspect-ratio: 1;\n  }\n\n  .Vf12 {\n    stroke: var(--lightningcss-light, #dadada) var(--lightningcss-dark, #393939);\n  }\n\n  .Vd12 {\n    stroke: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .17);\n  }\n\n  .Vh12 {\n    stroke: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  .Ve12 {\n    stroke: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n  }\n\n  ._Sa12 {\n    rotate: -90deg;\n  }\n\n  ._0d12 {\n    transform-origin: center;\n  }\n\n  .VRWHrbc12 {\n    stroke: #0000;\n  }\n\n  ._Vwtfhvc12 {\n    stroke-width: .1875rem;\n  }\n\n  ._V7m7Gv12 {\n    stroke-width: .125rem;\n  }\n\n  ._VuNalie12 {\n    stroke-width: .25rem;\n  }\n\n  .uk12 {\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._Fd12 {\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n  }\n\n  .ph12 {\n    color: lch(from var(--g, var(--s2-container-bg)) calc((49.44 - l) * infinity) 0 0 / 1);\n  }\n\n  .px12 {\n    color: #fff;\n  }\n\n  .pj12 {\n    color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .85);\n  }\n\n  .pk12 {\n    color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n  }\n\n  .pi12 {\n    color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .21);\n  }\n\n  .Sw12 {\n    padding-inline-start: calc(var(--F, var(--M)) / 2);\n  }\n\n  .Rw12 {\n    padding-inline-end: calc(var(--F, var(--M)) / 2);\n  }\n\n  .oh12 {\n    border-start-start-radius: calc(var(--F, var(--M, 9999px)) / 2);\n  }\n\n  .nh12 {\n    border-start-end-radius: calc(var(--F, var(--M, 9999px)) / 2);\n  }\n\n  .kh12 {\n    border-end-start-radius: calc(var(--F, var(--M, 9999px)) / 2);\n  }\n\n  .jh12 {\n    border-end-end-radius: calc(var(--F, var(--M, 9999px)) / 2);\n  }\n\n  .-Qg41Lb-IAxCW0c12 {\n    --iconMargin: -.142857em;\n  }\n\n  .-aRvJDd-Tu7Fubd12 {\n    --labelPadding: calc((var(--M)  - var(--_k, 0px)  - var(--h, 0px)  - 1lh) / 2);\n  }\n\n  ._4c12 {\n    -webkit-user-select: none;\n    user-select: none;\n  }\n\n  .ZJ12 {\n    width: fit-content;\n  }\n\n  ._kJ8iPYd12 {\n    border-top-width: var(--_k);\n  }\n\n  .hXMFGYc12 {\n    border-bottom-width: var(--h);\n  }\n\n  .mc12 {\n    border-inline-start-width: 2px;\n  }\n\n  .ma12 {\n    border-inline-start-width: 0;\n  }\n\n  .lc12 {\n    border-inline-end-width: 2px;\n  }\n\n  .la12 {\n    border-inline-end-width: 0;\n  }\n\n  .iv12 {\n    border-color: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .in12 {\n    border-color: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .io12 {\n    border-color: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .iq12 {\n    border-color: var(--lightningcss-light, #dadada) var(--lightningcss-dark, #393939);\n  }\n\n  .ii12 {\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .85);\n  }\n\n  .ij12 {\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n  }\n\n  .ih12 {\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .21);\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .21);\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .21);\n  }\n\n  .ig12 {\n    border-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .17);\n  }\n\n  .gqMFGYc12 {\n    background-color: var(--g);\n  }\n\n  ._yb12 {\n    forced-color-adjust: none;\n  }\n\n  .-_k_-_kc12 {\n    --_k: 2px;\n  }\n\n  .-_k_-_ka12 {\n    --_k: 0px;\n  }\n\n  .-h_-hc12 {\n    --h: 2px;\n  }\n\n  .-h_-ha12 {\n    --h: 0px;\n  }\n\n  .-g_-g012 {\n    --g: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .-g_-gu12 {\n    --g: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .-g_-gF12 {\n    --g: var(--lightningcss-light, #e1e1e1) var(--lightningcss-dark, #323232);\n  }\n\n  .-g_-g5qAiPc12 {\n    --g: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #345bf8);\n  }\n\n  .-g_-gUgARdd12 {\n    --g: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #2549e5);\n  }\n\n  .-g_-g7aei812 {\n    --g: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #cd2e1d);\n  }\n\n  .-g_-gYvV9s12 {\n    --g: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #b12617);\n  }\n\n  .-g_-gH12 {\n    --g: var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c);\n  }\n\n  .-g_-gi12 {\n    --g: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .85);\n  }\n\n  .-g_-gj12 {\n    --g: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n  }\n\n  .-g_-gg12 {\n    --g: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .14);\n  }\n\n  .-g_-g912 {\n    --g: transparent;\n  }\n\n  .-g_-gf12 {\n    --g: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .11);\n  }\n\n  ._9a12 {\n    z-index: -1;\n  }\n\n  .-yBNtrc-X7W3Sb12 {\n    --g0: var(--lightningcss-light, #b539c8) var(--lightningcss-dark, #d549eb);\n  }\n\n  .-zBNtrc-j7ulPc12 {\n    --g1: var(--lightningcss-light, #7155fa) var(--lightningcss-dark, #8077fe);\n  }\n\n  .-ABNtrc-fHZGqb12 {\n    --g2: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  ._ib12 {\n    background-image: linear-gradient(to bottom right, var(--g0) 0%, var(--g1) 66%, var(--g2) 100%);\n  }\n\n  .-yBNtrc-1gYRFc12 {\n    --g0: var(--lightningcss-light, #9c28af) var(--lightningcss-dark, #e85bfd);\n  }\n\n  .-zBNtrc-z2bZib12 {\n    --g1: var(--lightningcss-light, #6338ee) var(--lightningcss-dark, #8b8dfe);\n  }\n\n  .-ABNtrc-BorWLb12 {\n    --g2: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #6995fe);\n  }\n\n  .-yBNtrc-Nitqwc12 {\n    --g0: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #fc432e);\n  }\n\n  .-zBNtrc-ugAmz12 {\n    --g1: var(--lightningcss-light, #d92361) var(--lightningcss-dark, #f37);\n  }\n\n  .-ABNtrc-j7ulPc12 {\n    --g2: var(--lightningcss-light, #7155fa) var(--lightningcss-dark, #8077fe);\n  }\n\n  ._ia12 {\n    background-image: linear-gradient(to bottom right, var(--g0) 0%, var(--g1) 33%, var(--g2) 100%);\n  }\n\n  .-yBNtrc-37ZLpd12 {\n    --g0: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #ff6756);\n  }\n\n  .-zBNtrc-plLfSc12 {\n    --g1: var(--lightningcss-light, #ba1650) var(--lightningcss-dark, #ff6095);\n  }\n\n  .-ABNtrc-z2bZib12 {\n    --g2: var(--lightningcss-light, #6338ee) var(--lightningcss-dark, #8b8dfe);\n  }\n\n  .-ACNtrc-tQ56Od12 {\n    --gp: --g0, --g1, --g2;\n  }\n\n  ._ic12 {\n    background-image: none;\n  }\n\n  ._pb12 {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n    color-scheme: light;\n    color-scheme: light;\n  }\n\n  .WF12 {\n    top: 50%;\n  }\n\n  ._EF12 {\n    left: 50%;\n  }\n\n  ._Zc12 {\n    transform: translate(-50%, -50%);\n  }\n\n  ._6c12 {\n    visibility: visible;\n  }\n\n  .Zl12 {\n    width: calc(1.125rem * var(--s2-scale));\n  }\n\n  .Fm12 {\n    height: calc(1.125rem * var(--s2-scale));\n  }\n\n  .FC12 {\n    height: calc(8.75rem * var(--s2-scale));\n  }\n\n  ._Hb12 {\n    object-fit: cover;\n  }\n\n  .-_6BNtrc-g12 {\n    --fs: pow(1.125, 4);\n  }\n\n  .we12 {\n    font-variation-settings: \"wght\" 800;\n  }\n\n  .xe12 {\n    font-weight: 800;\n  }\n\n  ._Fb12 {\n    line-height: 1.5;\n  }\n\n  .IM12 {\n    margin-inline-start: auto;\n  }\n\n  .La12 {\n    max-width: 100%;\n  }\n\n  .oi12 {\n    border-start-start-radius: inherit;\n  }\n\n  .ni12 {\n    border-start-end-radius: inherit;\n  }\n\n  .ki12 {\n    border-end-start-radius: inherit;\n  }\n\n  .ji12 {\n    border-end-end-radius: inherit;\n  }\n\n  .Re12 {\n    padding-inline-end: 12px;\n  }\n\n  .Te12 {\n    padding-top: 12px;\n  }\n\n  .Jz12 {\n    margin-top: 1.25rem;\n  }\n\n  .Gx12 {\n    margin-bottom: .75rem;\n  }\n\n  .Sk12 {\n    padding-inline-start: 32px;\n  }\n\n  .Rk12 {\n    padding-inline-end: 32px;\n  }\n\n  .Qk12 {\n    padding-bottom: 32px;\n  }\n\n  .Tk12 {\n    padding-top: 32px;\n  }\n\n  ._wb12 {\n    flex-wrap: wrap;\n  }\n\n  .sh12 {\n    display: inline-flex;\n  }\n\n  .Ug12 {\n    row-gap: .75rem;\n  }\n\n  ._tc12 {\n    flex-direction: row;\n  }\n\n  .ec12 {\n    align-items: end;\n  }\n\n  ._Cg12 {\n    justify-content: start;\n  }\n\n  ._Cb12 {\n    justify-content: end;\n  }\n\n  .Oe12 {\n    outline-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / 1);\n  }\n\n  .-Ovbhqd-g4hn3s12 {\n    --s2-container-bg: white;\n  }\n\n  .-Ovbhqd-gcwrnr12 {\n    --s2-container-bg: black;\n  }\n\n  .ZC12 {\n    width: calc(2rem * var(--s2-scale));\n  }\n\n  .Zo12 {\n    width: calc(1.5rem * var(--s2-scale));\n  }\n\n  .Zw12 {\n    width: calc(2.5rem * var(--s2-scale));\n  }\n\n  .ZF12 {\n    width: calc(3rem * var(--s2-scale));\n  }\n\n  .Fp12 {\n    height: calc(1.5rem * var(--s2-scale));\n  }\n\n  .Fv12 {\n    height: calc(2.5rem * var(--s2-scale));\n  }\n\n  .gF12 {\n    background-color: var(--lightningcss-light, #e1e1e1) var(--lightningcss-dark, #323232);\n  }\n\n  .gg12 {\n    background-color: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .14);\n  }\n\n  .-_8sjo0b-pt12 {\n    --iconPrimary: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .-_8sjo0b-po12 {\n    --iconPrimary: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .-_8sjo0b-pp12 {\n    --iconPrimary: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .-_8sjo0b-pj12 {\n    --iconPrimary: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .85);\n  }\n\n  .-_8sjo0b-pk12 {\n    --iconPrimary: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .94);\n  }\n\n  .-_8sjo0b-pi12 {\n    --iconPrimary: lch(from var(--s2-container-bg) calc((49.44 - l) * infinity) 0 0 / .21);\n  }\n\n  .Zi12 {\n    width: calc(.625rem * var(--s2-scale));\n  }\n\n  .Zj12 {\n    width: calc(.75rem * var(--s2-scale));\n    width: calc(.75rem * var(--s2-scale));\n  }\n\n  .Zk12 {\n    width: calc(.875rem * var(--s2-scale));\n  }\n\n  .Zu12 {\n    width: calc(1rem * var(--s2-scale));\n  }\n\n  .Zh12 {\n    width: calc(.5rem * var(--s2-scale));\n  }\n\n  .Fj12 {\n    height: calc(.625rem * var(--s2-scale));\n  }\n\n  .Fk12 {\n    height: calc(.75rem * var(--s2-scale));\n    height: calc(.75rem * var(--s2-scale));\n  }\n\n  .Fl12 {\n    height: calc(.875rem * var(--s2-scale));\n  }\n\n  .Ft12 {\n    height: calc(1rem * var(--s2-scale));\n  }\n\n  .Fi12 {\n    height: calc(.5rem * var(--s2-scale));\n  }\n\n  ._pN79Hzc12 {\n    color-scheme: var(--lightningcss-light, light) var(--lightningcss-dark, dark);\n  }\n\n  ._pc12 {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n    color-scheme: light dark;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ._pc12 {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  ._pb12 {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n    color-scheme: light;\n  }\n\n  ._pa12 {\n    --lightningcss-light: ;\n    --lightningcss-dark: initial;\n    color-scheme: dark;\n  }\n\n  .FKem6Ob12 {\n    height: var(--page-height);\n  }\n\n  ._Bb12 {\n    isolation: isolate;\n  }\n\n  .g812 {\n    background-color: #00000070;\n  }\n\n  .Yf12 {\n    transition-property: opacity;\n  }\n\n  ._Pe12 {\n    position: sticky;\n  }\n\n  .FE9bXU12 {\n    height: var(--visual-viewport-height);\n  }\n\n  .ed12 {\n    align-items: start;\n  }\n\n  .oe12 {\n    border-start-start-radius: 1rem;\n  }\n\n  .od12 {\n    border-start-start-radius: 0;\n  }\n\n  .ne12 {\n    border-start-end-radius: 1rem;\n  }\n\n  .nd12 {\n    border-start-end-radius: 0;\n  }\n\n  .ke12 {\n    border-end-start-radius: 1rem;\n  }\n\n  .kd12 {\n    border-end-start-radius: 0;\n  }\n\n  .je12 {\n    border-end-end-radius: 1rem;\n  }\n\n  .jd12 {\n    border-end-end-radius: 0;\n  }\n\n  .ZA12 {\n    width: calc(25rem * var(--s2-scale));\n  }\n\n  .ZILqIYb12 {\n    width: calc(30rem * var(--s2-scale));\n  }\n\n  .Zb4QY412 {\n    width: calc(40rem * var(--s2-scale));\n  }\n\n  .ZbRWaYd12 {\n    width: calc(60rem * var(--s2-scale));\n  }\n\n  .ZGqsG7b12 {\n    width: calc(100% - 40px);\n  }\n\n  .FGqsG7b12 {\n    height: calc(100% - 40px);\n  }\n\n  .Lc12 {\n    max-width: 90vw;\n  }\n\n  .Lp12 {\n    max-width: none;\n  }\n\n  .KjVOfn12 {\n    max-height: 90%;\n  }\n\n  .Ki12 {\n    max-height: none;\n  }\n\n  .QILlin12 {\n    padding-bottom: 100vh;\n  }\n\n  .-Ovbhqd-g_g12 {\n    --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #222);\n  }\n\n  .gEzkoQe12 {\n    background-color: var(--s2-container-bg);\n  }\n\n  ._Ia12 {\n    opacity: 0;\n    opacity: 0;\n  }\n\n  .-_8PloMd-w12 {\n    --translateY: 20px;\n  }\n\n  .__Ya12 {\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  .YmenWad12 {\n    transition-property: opacity, translate;\n  }\n\n  .Xd12 {\n    transition-duration: .25s;\n  }\n\n  ._1b12 {\n    transition-delay: .16s;\n  }\n\n  ._1a12 {\n    transition-delay: 0s;\n  }\n\n  ._Mb12 {\n    outline-width: 1px;\n  }\n\n  .Oj12 {\n    outline-color: #0000;\n  }\n\n  .GC12 {\n    margin-bottom: 1rem;\n  }\n\n  .Zjslvrc12 {\n    width: 75px;\n  }\n\n  ._IomMfn12 {\n    opacity: .3;\n  }\n\n  ._Ib12 {\n    opacity: 1;\n  }\n\n  .ixpP0Sb12 {\n    border-color: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .ixgjhZb12 {\n    border-color: var(--lightningcss-light, #8f8f8f) var(--lightningcss-dark, #6d6d6d);\n  }\n\n  .-_6BNtrc-uUANL12 {\n    --fs: pow(1.125, 10px);\n  }\n\n  .pn12 {\n    color: var(--lightningcss-light, #717171) var(--lightningcss-dark, #8a8a8a);\n  }\n\n  .oT4Nfn12 {\n    border-start-start-radius: 4px;\n  }\n\n  .nT4Nfn12 {\n    border-start-end-radius: 4px;\n  }\n\n  .kT4Nfn12 {\n    border-end-start-radius: 4px;\n  }\n\n  .jT4Nfn12 {\n    border-end-end-radius: 4px;\n  }\n\n  .g8tmWqb12 {\n    background-color: var(--lightningcss-light, #ffbcb4) var(--lightningcss-dark, #73180b);\n  }\n\n  .-_6BNtrc-nX2NL12 {\n    --fs: pow(1.125, 13px);\n  }\n\n  .g312 {\n    background-color: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  .oLvNfn12 {\n    border-start-start-radius: 2px;\n  }\n\n  .kLvNfn12 {\n    border-end-start-radius: 2px;\n  }\n\n  ._Flizurc12 {\n    line-height: 20px;\n  }\n\n  .Z28zurc12 {\n    width: 23px;\n  }\n\n  .FYDIurc12 {\n    height: 30px;\n  }\n\n  .Ue12 {\n    row-gap: .5rem;\n  }\n\n  .qe12 {\n    column-gap: .5rem;\n  }\n\n  .-_6BNtrc-KBTNL12 {\n    --fs: pow(1.125, 12px);\n  }\n\n  .Zm12 {\n    width: calc(1.25rem * var(--s2-scale));\n  }\n\n  .Fn12 {\n    height: calc(1.25rem * var(--s2-scale));\n  }\n\n  .Z8KB0xb12 {\n    width: calc(1.75rem * var(--s2-scale));\n    width: calc(1.75rem * var(--s2-scale));\n  }\n\n  ._Wa12 {\n    text-align: center;\n  }\n\n  .ir12 {\n    border-color: var(--lightningcss-light, #e1e1e1) var(--lightningcss-dark, #323232);\n  }\n\n  ._kb12 {\n    border-top-width: 1px;\n  }\n\n  .hb12 {\n    border-bottom-width: 1px;\n  }\n\n  .mb12 {\n    border-inline-start-width: 1px;\n  }\n\n  .lb12 {\n    border-inline-end-width: 1px;\n  }\n\n  ._jf12 {\n    border-style: solid;\n  }\n\n  .Tp12 {\n    padding-top: 4px;\n  }\n\n  .Qp12 {\n    padding-bottom: 4px;\n  }\n\n  .Sp12 {\n    padding-inline-start: 4px;\n  }\n\n  .Rp12 {\n    padding-inline-end: 4px;\n  }\n\n  .Ub12 {\n    row-gap: .25rem;\n  }\n\n  .qb12 {\n    column-gap: .25rem;\n  }\n\n  .Td12 {\n    padding-top: 0;\n  }\n\n  .Qd12 {\n    padding-bottom: 0;\n  }\n\n  .Jy12 {\n    margin-top: 0;\n  }\n\n  .Gy12 {\n    margin-bottom: 0;\n  }\n\n  .Iy12 {\n    margin-inline-start: 0;\n  }\n\n  .Hy12 {\n    margin-inline-end: 0;\n  }\n\n  ._FtmMfn12 {\n    line-height: .8;\n  }\n\n  ._Ca12 {\n    justify-content: center;\n  }\n\n  .pr12 {\n    color: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .g_d12 {\n    background-color: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #fc432e);\n  }\n\n  .ZQvqurc12 {\n    width: 12px;\n  }\n\n  .FQvqurc12 {\n    height: 12px;\n  }\n\n  .pq12 {\n    color: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #fc432e);\n  }\n\n  .wd12 {\n    font-variation-settings: \"wght\" 700;\n  }\n\n  .xd12 {\n    font-weight: 700;\n  }\n\n  .gg1bwR12 {\n    background-color: var(--lightningcss-light, #fff8cc) var(--lightningcss-dark, #251700);\n    background-color: var(--lightningcss-light, #fff8cc) var(--lightningcss-dark, #251700);\n  }\n\n  .Gs12 {\n    margin-bottom: .25rem;\n  }\n\n  .g_e12 {\n    background-color: var(--lightningcss-light, #e5f0fe) var(--lightningcss-dark, #0f1c52);\n    background-color: var(--lightningcss-light, #e5f0fe) var(--lightningcss-dark, #0f1c52);\n  }\n\n  .Up12 {\n    row-gap: 2rem;\n  }\n\n  .Uj12 {\n    row-gap: 1.5rem;\n  }\n\n  .qp12 {\n    column-gap: 2rem;\n  }\n\n  .qj12 {\n    column-gap: 1.5rem;\n  }\n\n  .Hz12 {\n    margin-inline-end: 1.25rem;\n  }\n\n  .Ix12 {\n    margin-inline-start: .75rem;\n  }\n\n  .Nq12 {\n    min-width: min-content;\n  }\n\n  .ZLvNfn12 {\n    width: 2px;\n  }\n\n  ._qg12 {\n    contain: strict;\n  }\n\n  .YIRyJjb12 {\n    transition-property: translate, width, height;\n  }\n\n  .Xc12 {\n    transition-duration: .2s;\n  }\n\n  ._2a12 {\n    transition-timing-function: cubic-bezier(0, 0, .4, 1);\n  }\n\n  ._Er12 {\n    left: 0;\n  }\n\n  ._Aa12 {\n    inset-inline-start: -12px;\n  }\n\n  .pv12 {\n    color: var(--lightningcss-light, #505050) var(--lightningcss-dark, #afafaf);\n  }\n\n  .Uc12 {\n    row-gap: .428571em;\n  }\n\n  .Mi12 {\n    min-height: calc(2rem * var(--s2-scale));\n  }\n\n  .Mk12 {\n    min-height: calc(3rem * var(--s2-scale));\n  }\n\n  .ri12 {\n    cursor: default;\n  }\n\n  ._Xa12 {\n    text-decoration: none;\n  }\n\n  .RssxDec12 {\n    padding-inline-end: calc(.375rem * var(--s2-scale));\n  }\n\n  .Js12 {\n    margin-top: .25rem;\n  }\n\n  .Ma12 {\n    min-height: 0;\n  }\n\n  .s40ub4c12 {\n    display: inherit;\n  }\n\n  ._t40ub4c12 {\n    flex-direction: inherit;\n  }\n\n  .U40ub4c12 {\n    row-gap: inherit;\n  }\n\n  .q40ub4c12 {\n    column-gap: inherit;\n  }\n\n  ._w40ub4c12 {\n    flex-wrap: inherit;\n  }\n\n  ._Pa12 {\n    position: absolute;\n  }\n\n  .Wr12 {\n    top: 0;\n  }\n\n  ._lr12 {\n    bottom: 0;\n  }\n\n  ._Ar12 {\n    inset-inline-start: 0;\n  }\n\n  ._zr12 {\n    inset-inline-end: 0;\n  }\n\n  ._6b12 {\n    visibility: hidden;\n  }\n\n  ._Ia12 {\n    opacity: 0;\n  }\n\n  ._Lf12 {\n    outline-style: solid;\n  }\n\n  .Oh12 {\n    outline-color: var(--lightningcss-light, #4b75ff) var(--lightningcss-dark, #4069fd);\n  }\n\n  ._Mc12 {\n    outline-width: 2px;\n  }\n\n  ._Kd12 {\n    outline-offset: 2px;\n  }\n\n  .zXcEWr12 {\n    grid-column-start: input;\n  }\n\n  .yXcEWr12 {\n    grid-column-end: input;\n  }\n\n  .BXcEWr12 {\n    grid-row-start: input;\n  }\n\n  .AXcEWr12 {\n    grid-row-end: input;\n  }\n\n  .Nk12 {\n    min-width: calc(2rem * var(--s2-scale));\n  }\n\n  .Ne12 {\n    min-width: calc(1.25rem * var(--s2-scale));\n  }\n\n  .Nf12 {\n    min-width: calc(1.5rem * var(--s2-scale));\n  }\n\n  .Nj12 {\n    min-width: calc(2.5rem * var(--s2-scale));\n  }\n\n  .Nl12 {\n    min-width: calc(3rem * var(--s2-scale));\n  }\n\n  ._qd12 {\n    contain: none;\n  }\n\n  .-Anxdcc-Z3fn9H12 {\n    --defaultWidth: calc(13rem * var(--s2-scale));\n  }\n\n  .-Anxdcc-Zr12 {\n    --defaultWidth: calc(12rem * var(--s2-scale));\n  }\n\n  .-Anxdcc-ZStdtne12 {\n    --defaultWidth: calc(14rem * var(--s2-scale));\n  }\n\n  .-Anxdcc-Zt12 {\n    --defaultWidth: calc(15rem * var(--s2-scale));\n  }\n\n  .__v6TNLWb12 {\n    contain-intrinsic-width: calc(var(--defaultWidth)  - var(--S, 0px)  - var(--R, 0px)  - var(--m, 0px)  - var(--l, 0px));\n  }\n\n  ._Pc12 {\n    position: relative;\n  }\n\n  .wb12 {\n    font-variation-settings: \"wght\" 400;\n  }\n\n  .xb12 {\n    font-weight: 400;\n  }\n\n  .pt12 {\n    color: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .po12 {\n    color: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .pp12 {\n    color: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  ._Wd12 {\n    text-align: start;\n  }\n\n  .oa12 {\n    border-start-start-radius: .25rem;\n  }\n\n  .na12 {\n    border-start-end-radius: .25rem;\n  }\n\n  .ka12 {\n    border-end-start-radius: .25rem;\n  }\n\n  .ja12 {\n    border-end-end-radius: .25rem;\n  }\n\n  .Yd12 {\n    transition-property: color, background-color, var(--gp, color), border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, translate, scale, rotate, filter, backdrop-filter;\n  }\n\n  .Xb12 {\n    transition-duration: .15s;\n  }\n\n  .qc12 {\n    column-gap: .428571em;\n  }\n\n  .SMBFGYc12 {\n    padding-inline-start: var(--S);\n  }\n\n  .RfBFGYc12 {\n    padding-inline-end: var(--R);\n  }\n\n  .Ln12 {\n    max-width: max-content;\n  }\n\n  .Fz12 {\n    height: calc(3rem * var(--s2-scale));\n  }\n\n  .Fx12 {\n    height: calc(2rem * var(--s2-scale));\n  }\n\n  .-S_-Sd12 {\n    --S: 0px;\n  }\n\n  .-R_-Rd12 {\n    --R: 0px;\n  }\n\n  .Deb5jcb12 {\n    grid-template-columns: .75rem auto auto minmax(0, 1fr) auto auto auto .75rem;\n  }\n\n  .K40ub4c12 {\n    max-height: inherit;\n  }\n\n  ._Na12 {\n    overflow-x: auto;\n  }\n\n  .Pa12 {\n    overflow-y: auto;\n  }\n\n  .Tt12 {\n    padding-top: 8px;\n  }\n\n  .Qt12 {\n    padding-bottom: 8px;\n  }\n\n  .St12 {\n    padding-inline-start: 8px;\n  }\n\n  .Rt12 {\n    padding-inline-end: 8px;\n  }\n\n  .uk12 {\n    font-family: var(--s2-font-family-sans, adobe-clean-spectrum-vf), adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._ua12 {\n    flex-grow: 0;\n  }\n\n  .eb12 {\n    align-items: center;\n  }\n\n  ._Sd12 {\n    rotate: 90deg;\n  }\n\n  .-_8sjo0b-t5ZbAob12 {\n    --iconPrimary: currentColor;\n  }\n\n  .z2U5Crc12 {\n    grid-column-start: icon;\n  }\n\n  .y2U5Crc12 {\n    grid-column-end: icon;\n  }\n\n  .B2U5Crc12 {\n    grid-row-start: icon;\n  }\n\n  .A2U5Crc12 {\n    grid-row-end: icon;\n  }\n\n  .SssxDec12 {\n    padding-inline-start: calc(.375rem * var(--s2-scale));\n  }\n\n  .WzII9b > * {\n    display: none;\n  }\n\n  .sb12 {\n    display: block;\n  }\n\n  .sk12 {\n    display: none;\n  }\n\n  .Nh12 {\n    min-width: calc(12rem * var(--s2-scale));\n  }\n\n  .ZbWuche12 {\n    width: calc(var(--trigger-width)  - 24);\n  }\n\n  .Za12 {\n    width: 100%;\n  }\n\n  .Fb12 {\n    height: 100%;\n  }\n\n  .g012 {\n    background-color: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .gH12 {\n    background-color: var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c);\n  }\n\n  .FLvNfn12 {\n    height: 2px;\n  }\n\n  .og12 {\n    border-start-start-radius: 9999px;\n  }\n\n  .ng12 {\n    border-start-end-radius: 9999px;\n  }\n\n  .kg12 {\n    border-end-start-radius: 9999px;\n  }\n\n  .jg12 {\n    border-end-end-radius: 9999px;\n  }\n\n  .Jk7Otrc12 {\n    margin-top: -2px;\n  }\n\n  .Xa12 {\n    transition-duration: .13s;\n  }\n\n  ._2b12 {\n    transition-timing-function: cubic-bezier(.45, 0, .4, 1);\n  }\n\n  .Fd12 {\n    height: auto;\n  }\n\n  .se12 {\n    display: grid;\n  }\n\n  .z2mU12 {\n    grid-column-start: 1;\n  }\n\n  .yvoofG12 {\n    grid-column-end: span 2;\n  }\n\n  .DM8Mfn12 {\n    grid-template-columns: 1fr;\n  }\n\n  .DPlN5qb12 {\n    grid-template-columns: auto 1fr;\n  }\n\n  .DLwlgod12 {\n    grid-template-columns: subgrid;\n  }\n\n  .E4w1sLc12 {\n    grid-template-rows: auto 1fr auto;\n  }\n\n  .EPlN5qb12 {\n    grid-template-rows: auto 1fr;\n  }\n\n  .Cxaocre12 {\n    grid-template-areas: \"label\"\n                         \"input\"\n                         \"helptext\";\n  }\n\n  .CbRM95c12 {\n    grid-template-areas: \"label input\"\n                         \"label helptext\";\n  }\n\n  .-_6BNtrc-c12 {\n    --fs: pow(1.125, 0);\n  }\n\n  .-_6BNtrc-a12 {\n    --fs: pow(1.125, -2);\n  }\n\n  .-_6BNtrc-b12 {\n    --fs: pow(1.125, -1);\n  }\n\n  .-_6BNtrc-d12 {\n    --fs: pow(1.125, 1);\n  }\n\n  .-_6BNtrc-e12 {\n    --fs: pow(1.125, 2);\n  }\n\n  .ea12 {\n    align-items: baseline;\n  }\n\n  ._Fd12 {\n    line-height: round(1em * (1.15 + (1 - ((min(32, var(--s2-font-size-base, 14) * var(--fs))  - 10)) / 22) * .15), 2px);\n  }\n\n  .-BhX7R-Fx12 {\n    --field-height: calc(2rem * var(--s2-scale));\n  }\n\n  .-BhX7R-Fn12 {\n    --field-height: calc(1.25rem * var(--s2-scale));\n  }\n\n  .-BhX7R-Fp12 {\n    --field-height: calc(1.5rem * var(--s2-scale));\n  }\n\n  .-BhX7R-Fv12 {\n    --field-height: calc(2.5rem * var(--s2-scale));\n  }\n\n  .-BhX7R-Fz12 {\n    --field-height: calc(3rem * var(--s2-scale));\n  }\n\n  .-AJjOLd-UVkF0Db12 {\n    --field-gap: calc((var(--field-height)  - var(--_k, 0px)  - var(--h, 0px)  - 1lh) / 2);\n  }\n\n  .qg12 {\n    column-gap: .75rem;\n  }\n\n  .__ca12 {\n    -webkit-tap-highlight-color: #0000;\n  }\n\n  .Sd12 {\n    padding-inline-start: 0;\n  }\n\n  .Rd12 {\n    padding-inline-end: 0;\n  }\n\n  .Tu7Fubd12 {\n    padding-top: calc((var(--M)  - var(--_k, 0px)  - var(--h, 0px)  - 1lh) / 2);\n  }\n\n  .Qu7Fubd12 {\n    padding-bottom: calc((var(--M)  - var(--_k, 0px)  - var(--h, 0px)  - 1lh) / 2);\n  }\n\n  .MAyFGYc12 {\n    min-height: var(--M);\n  }\n\n  ._oa12 {\n    box-sizing: border-box;\n  }\n\n  .g912 {\n    background-color: #0000;\n  }\n\n  .p40ub4c12 {\n    color: inherit;\n  }\n\n  .u40ub4c12 {\n    font-family: inherit;\n  }\n\n  .-_6BNtrc-cWI5gc12 {\n    --fs: pow(1.125, inherit);\n  }\n\n  .vx12 {\n    font-size: round(var(--s2-font-size-base, 14) * var(--fs) / 16 * 1rem, 1px);\n  }\n\n  .w40ub4c12 {\n    font-variation-settings: inherit;\n  }\n\n  .x40ub4c12 {\n    font-weight: inherit;\n  }\n\n  ._xa12 {\n    font-synthesis-weight: none;\n  }\n\n  ._F40ub4c12 {\n    line-height: inherit;\n  }\n\n  ._ub12 {\n    flex-grow: 1;\n  }\n\n  .Na12 {\n    min-width: 0;\n  }\n\n  ._Le12 {\n    outline-style: none;\n  }\n\n  ._je12 {\n    border-style: none;\n  }\n\n  ._Qc12 {\n    resize: none;\n  }\n\n  .-M_-Mi12 {\n    --M: calc(2rem * var(--s2-scale));\n  }\n\n  .-M_-Mf12 {\n    --M: calc(1.25rem * var(--s2-scale));\n  }\n\n  .-M_-Mg12 {\n    --M: calc(1.5rem * var(--s2-scale));\n  }\n\n  .-M_-Mh12 {\n    --M: calc(2.5rem * var(--s2-scale));\n  }\n\n  .-M_-Mk12 {\n    --M: calc(3rem * var(--s2-scale));\n  }\n\n  ._ta12 {\n    flex-direction: column;\n  }\n\n  .Jv12 {\n    margin-top: .5rem;\n  }\n\n  .Ul12 {\n    row-gap: 1rem;\n  }\n\n  .ql12 {\n    column-gap: 1rem;\n  }\n\n  .sd12 {\n    display: flex;\n  }\n\n  .Ua12 {\n    row-gap: .125rem;\n  }\n\n  .qa12 {\n    column-gap: .125rem;\n  }\n\n  .TAzEcG12 {\n    padding-top: var(--labelPadding);\n  }\n\n  .QAzEcG12 {\n    padding-bottom: var(--labelPadding);\n  }\n\n  ._Jb12 {\n    order: 1;\n  }\n\n  ._Nc12 {\n    overflow-x: hidden;\n  }\n\n  .Pc12 {\n    overflow-y: hidden;\n  }\n\n  ._Yb12 {\n    text-overflow: ellipsis;\n  }\n\n  ._7c12 {\n    white-space: nowrap;\n  }\n\n  ._Ja12 {\n    order: 0;\n  }\n\n  .ZuUmpre12 {\n    width: 1.42857em;\n  }\n\n  .FuUmpre12 {\n    height: 1.42857em;\n  }\n\n  .I67logd12 {\n    margin-inline-start: var(--iconMargin);\n  }\n\n  ._va12 {\n    flex-shrink: 0;\n  }\n}\n\n@layer _.b {\n  .skk12:last-child {\n    display: none;\n  }\n\n  .EDNKd2dZQmDFe12:has([slot=\"description\"]) {\n    grid-template-rows: auto auto;\n  }\n\n  .UDNKd2dai5a012:has([slot=\"description\"]) {\n    row-gap: .0625rem;\n  }\n\n  .wezxGHbtN5kwb12:is(:lang(ar), :lang(he)) {\n    font-variation-settings: \"wght\" 600;\n  }\n\n  .xezxGHbg12:is(:lang(ar), :lang(he)) {\n    font-weight: 600;\n  }\n\n  ._xezxGHba12:is(:lang(ar), :lang(he)) {\n    font-synthesis-weight: none;\n  }\n\n  .obj12:first-child {\n    border-start-start-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .nkj12:last-child, .nbj12:first-child {\n    border-start-end-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .kbj12:first-child, .kkj12:last-child {\n    border-end-start-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .jkj12:last-child {\n    border-end-end-radius: round(var(--radius) * var(--size), 1px);\n  }\n\n  .-Qg41Lb-y5UFLdIy12:has([slot=\"icon\"], [slot=\"avatar\"]):not(:has([data-rsp-slot=\"text\"])) {\n    --iconMargin: 0rem;\n  }\n\n  .-B5H9Ae-wAP22cWr12:has([data-rsp-slot=\"text\"]):not(:has([slot=\"icon\"], [slot=\"avatar\"])) {\n    --badgeTop: 0px;\n  }\n\n  .-dcAs1c-y5UFLdZt9HF512:has([slot=\"icon\"], [slot=\"avatar\"]):not(:has([data-rsp-slot=\"text\"])) {\n    --badgePosition: calc(var(--N) / 2 + var(--iconWidth) / 2);\n  }\n\n  .-S_-gLWx3bSd12:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    --S: 0px;\n  }\n\n  .egLWx3bb12:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    align-items: center;\n  }\n\n  .SgLWx3bd12:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    padding-inline-start: 0;\n  }\n\n  .RgLWx3bd12:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    padding-inline-end: 0;\n  }\n\n  .-Qg41Lb-gLWx3bIy12:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    --iconMargin: 0rem;\n  }\n\n  .wX0cczbd12:is(:lang(ja), :lang(ko), :lang(zh)) {\n    font-variation-settings: \"wght\" 700;\n  }\n\n  .xX0cczbd12:is(:lang(ja), :lang(ko), :lang(zh)) {\n    font-weight: 700;\n  }\n\n  ._FnuYUwec12:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n    line-height: 1.7;\n  }\n\n  .Jay12:empty {\n    margin-top: 0;\n  }\n\n  .Gay12:empty {\n    margin-bottom: 0;\n  }\n\n  .Tad12:empty {\n    padding-top: 0;\n  }\n\n  .wX0cczbc12:is(:lang(ja), :lang(ko), :lang(zh)) {\n    font-variation-settings: \"wght\" 500;\n  }\n\n  .xX0cczbc12:is(:lang(ja), :lang(ko), :lang(zh)) {\n    font-weight: 500;\n  }\n\n  ._xX0cczba12:is(:lang(ja), :lang(ko), :lang(zh)) {\n    font-synthesis-weight: none;\n  }\n\n  .uch12:lang(ar) {\n    font-family: myriad-arabic, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._FezxGHba12:is(:lang(ar), :lang(he)) {\n    line-height: 1.3;\n  }\n\n  .pYFIK2bn12::placeholder {\n    color: var(--lightningcss-light, #717171) var(--lightningcss-dark, #8a8a8a);\n  }\n}\n\n@layer _.c {\n  .RsAUsHd12:has([slot=\"avatar\"]):not(:has([slot=\"icon\"], [data-rsp-slot=\"text\"])) {\n    padding-inline-end: 0;\n  }\n\n  .-Qg41Lb-sAUsHIy12:has([slot=\"avatar\"]):not(:has([slot=\"icon\"], [data-rsp-slot=\"text\"])) {\n    --iconMargin: 0rem;\n  }\n\n  .-dcAs1c-wAP22cZa12:has([data-rsp-slot=\"text\"]):not(:has([slot=\"icon\"], [slot=\"avatar\"])) {\n    --badgePosition: 100%;\n  }\n\n  .-S_-sAUsHSd12:has([slot=\"avatar\"]):not(:has([slot=\"icon\"], [data-rsp-slot=\"text\"])) {\n    --S: 0px;\n  }\n\n  .wezxGHbd12:is(:lang(ar), :lang(he)) {\n    font-variation-settings: \"wght\" 700;\n  }\n\n  .xezxGHbd12:is(:lang(ar), :lang(he)) {\n    font-weight: 700;\n  }\n\n  ._xezxGHba12:is(:lang(ar), :lang(he)) {\n    font-synthesis-weight: none;\n  }\n\n  .udi12:lang(he) {\n    font-family: myriad-hebrew, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._FnuYUweb12:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n    line-height: 1.5;\n  }\n}\n\n@layer _.d {\n  .wfe12:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-variation-settings: \"wght\" 800;\n  }\n\n  .xfe12:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-weight: 800;\n  }\n\n  ._xfa12:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-synthesis-weight: none;\n  }\n\n  .uea12:lang(ja) {\n    font-family: adobe-clean-han-japanese, Hiragino Kaku Gothic ProN, ãã©ã®ãè§ã´ ProN W3, Osaka, YuGothic, Yu Gothic, ã¡ã¤ãªãª, Meiryo, ï¼­ï¼³ ï¼°ã´ã·ãã¯, MS PGothic, sans-serif;\n  }\n}\n\n@layer _.e {\n  .wfX0cczbd12:is(:lang(ja), :lang(ko), :lang(zh)):is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-variation-settings: \"wght\" 700;\n  }\n\n  .xfX0cczbd12:is(:lang(ja), :lang(ko), :lang(zh)):is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-weight: 700;\n  }\n\n  ._xfX0cczba12:is(:lang(ja), :lang(ko), :lang(zh)):is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-synthesis-weight: none;\n  }\n\n  .ugb12:lang(ko) {\n    font-family: adobe-clean-han-korean, source-han-korean, Malgun Gothic, Apple Gothic, sans-serif;\n  }\n}\n\n@layer _.f {\n  .wfezxGHbd12:is(:lang(ar), :lang(he)):is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-variation-settings: \"wght\" 700;\n  }\n\n  .xfezxGHbd12:is(:lang(ar), :lang(he)):is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-weight: 700;\n  }\n\n  ._xfezxGHba12:is(:lang(ar), :lang(he)):is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-synthesis-weight: none;\n  }\n\n  .uhd12:lang(zh) {\n    font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Heiti TC Light, sans-serif;\n  }\n}\n\n@layer _.g {\n  .uje12:lang(zh-hant) {\n    font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n  }\n}\n\n@layer _.h {\n  .u2NhKxcl12:lang(zh-HK) {\n    font-family: adobe-clean-han-hong-kong, source-han-hong-kong, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n  }\n}\n\n@layer _.i {\n  .uic12:is(:lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n    font-family: adobe-clean-han-simplified-c, source-han-simplified-c, SimSun, Heiti SC Light, sans-serif;\n  }\n}\n\n@layer _.b.l {\n  @media (forced-colors: active) {\n    .ilb12 {\n      border-color: buttontext;\n    }\n\n    .gla12 {\n      background-color: background;\n    }\n\n    .gl_b12 {\n      background-color: mark;\n    }\n\n    .ile12 {\n      border-color: mark;\n    }\n\n    .-_8sjo0b-lt8pvGJ12 {\n      --iconPrimary: HighlightText;\n    }\n\n    .-_8sjo0b-lta12 {\n      --iconPrimary: Highlight;\n    }\n\n    .Ola12 {\n      outline-color: buttonborder;\n    }\n\n    .Vlb12 {\n      stroke: buttonborder;\n    }\n\n    .Yle12 {\n      transition-property: none;\n    }\n\n    .Xlb12 {\n      transition-duration: .15s;\n    }\n\n    ._2lb12 {\n      transition-timing-function: cubic-bezier(.45, 0, .4, 1);\n    }\n\n    .glc12 {\n      background-color: buttontext;\n    }\n\n    .gl_a12 {\n      background-color: buttonborder;\n    }\n\n    .-_8sjo0b-ltUG8Hlc12 {\n      --iconPrimary: ButtonText;\n    }\n\n    ._jlf12 {\n      border-style: solid;\n    }\n\n    ._klb12 {\n      border-top-width: 1px;\n    }\n\n    .hlb12 {\n      border-bottom-width: 1px;\n    }\n\n    .mlb12 {\n      border-inline-start-width: 1px;\n    }\n\n    .llb12 {\n      border-inline-end-width: 1px;\n    }\n\n    .Vla12 {\n      stroke: background;\n    }\n\n    ._Vl7m7Gv12 {\n      stroke-width: .125rem;\n    }\n\n    ._Vlai5a012 {\n      stroke-width: .0625rem;\n    }\n\n    ._Vlwtfhvc12 {\n      stroke-width: .1875rem;\n    }\n\n    .VlUG8Hlc12 {\n      stroke: buttontext;\n    }\n\n    .pla12 {\n      color: buttonface;\n    }\n\n    .ple12 {\n      color: highlighttext;\n    }\n\n    .plb12 {\n      color: buttontext;\n    }\n\n    .ila12 {\n      border-color: buttonborder;\n    }\n\n    .ild12 {\n      border-color: highlight;\n    }\n\n    .ilc12 {\n      border-color: graytext;\n    }\n\n    .-g_-lgc12 {\n      --g: ButtonText;\n    }\n\n    .-g_-lge12 {\n      --g: Highlight;\n    }\n\n    .-g_-lgd12 {\n      --g: GrayText;\n    }\n\n    .-g_-lgb12 {\n      --g: ButtonFace;\n    }\n\n    ._ilc12 {\n      background-image: none;\n    }\n\n    .Olc12 {\n      outline-color: highlight;\n    }\n\n    .-_8sjo0b-lpb12 {\n      --iconPrimary: ButtonText;\n    }\n\n    .-_8sjo0b-lpc12 {\n      --iconPrimary: GrayText;\n    }\n\n    .pld12 {\n      color: highlight;\n    }\n\n    .plc12 {\n      color: graytext;\n    }\n\n    .gle12 {\n      background-color: highlight;\n    }\n\n    .gld12 {\n      background-color: graytext;\n    }\n  }\n}\n\n@layer _;\n\n@layer L {\n  .bNU3Fb {\n    background-image: linear-gradient(to right, var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c) 33%, var(--lightningcss-light, #fff) var(--lightningcss-dark, #393939), var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c) 66%);\n    background-size: 300%;\n  }\n\n  .bNU3Fb * {\n    visibility: hidden;\n  }\n}\n\n@layer _.b.s {\n  @media not ((hover: hover) and (pointer: fine)) {\n    .Hsu12 {\n      margin-inline-end: .470588em;\n    }\n\n    .Isu12 {\n      margin-inline-start: .470588em;\n    }\n\n    .Usd12 {\n      row-gap: .470588em;\n    }\n\n    .qsd12 {\n      column-gap: .470588em;\n    }\n  }\n}\n\n@layer _.b.t {\n  @supports (contain-intrinsic-width: 1px) {\n    ._qtb12 {\n      contain: inline-size;\n      contain: inline-size;\n      contain: inline-size;\n      contain: inline-size;\n    }\n  }\n}\n\n@font-face {\n  font-family: adobe-clean-spectrum-vf;\n  src: url(\"https://use.typekit.net/af/ca4cba/0000000000000000775c55a1/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/ca4cba/0000000000000000775c55a1/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/ca4cba/0000000000000000775c55a1/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 100 900;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: adobe-clean-spectrum-srf-vf;\n  src: url(\"https://use.typekit.net/af/4a1d0d/0000000000000000775c55a4/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/4a1d0d/0000000000000000775c55a4/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/4a1d0d/0000000000000000775c55a4/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 100 1000;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-arabic;\n  src: url(\"https://use.typekit.net/af/dfb464/00000000000000007735a2f9/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/dfb464/00000000000000007735a2f9/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/dfb464/00000000000000007735a2f9/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 700;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-arabic;\n  src: url(\"https://use.typekit.net/af/560a53/00000000000000007735a300/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/560a53/00000000000000007735a300/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/560a53/00000000000000007735a300/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-arabic;\n  src: url(\"https://use.typekit.net/af/0f9162/00000000000000007735a307/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/0f9162/00000000000000007735a307/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/0f9162/00000000000000007735a307/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 600;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-arabic;\n  src: url(\"https://use.typekit.net/af/ab2792/00000000000000007735a309/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n9&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/ab2792/00000000000000007735a309/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n9&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/ab2792/00000000000000007735a309/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n9&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 900;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-hebrew;\n  src: url(\"https://use.typekit.net/af/ffca46/00000000000000007735a30a/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/ffca46/00000000000000007735a30a/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/ffca46/00000000000000007735a30a/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 700;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-hebrew;\n  src: url(\"https://use.typekit.net/af/e90860/00000000000000007735a313/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/e90860/00000000000000007735a313/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/e90860/00000000000000007735a313/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: myriad-hebrew;\n  src: url(\"https://use.typekit.net/af/619974/00000000000000007735a31f/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/619974/00000000000000007735a31f/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/619974/00000000000000007735a31f/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 600;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: source-code-pro;\n  src: url(\"https://use.typekit.net/af/88da4d/00000000000000007758ce1a/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/88da4d/00000000000000007758ce1a/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/88da4d/00000000000000007758ce1a/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 700;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: source-code-pro;\n  src: url(\"https://use.typekit.net/af/80f457/00000000000000007758ce1d/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/80f457/00000000000000007758ce1d/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/80f457/00000000000000007758ce1d/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: normal;\n}\n\n@keyframes Z8Un9b {\n  0% {\n    transform: rotate(0);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes uw9JJd {\n  0%, 100% {\n    stroke-dashoffset: 75px;\n  }\n\n  30% {\n    stroke-dashoffset: 20px;\n  }\n}\n\n@property --g0 {\n  syntax: \"<color>\";\n  inherits: false;\n  initial-value: #0000;\n}\n\n@property --g1 {\n  syntax: \"<color>\";\n  inherits: false;\n  initial-value: #0000;\n}\n\n@property --g2 {\n  syntax: \"<color>\";\n  inherits: false;\n  initial-value: #0000;\n}\n\n@layer _.b._7GYNyb {\n  @container (height < 31.25rem) {\n    ._v7GYNyba12 {\n      flex-shrink: 0;\n    }\n\n    .P7GYNybe12 {\n      overflow-y: visible;\n    }\n  }\n}\n\n@layer _.b.n {\n  @media (width >= 40rem) {\n    ._tnc12 {\n      flex-direction: row;\n    }\n\n    .enb12 {\n      align-items: center;\n    }\n  }\n}\n\n@layer _.b.dklsgc {\n  @media (prefers-reduced-motion: reduce) {\n    .Ydklsgce12 {\n      transition-property: none;\n    }\n  }\n}\n/*# sourceMappingURL=index.af44fab6.css.map */\n","@import \"d46046861f235741\";\n@import \"5c0b1c900b47b0fc\";\n@import \"61d4642384866e97\";\n@import \"18d2d2024208064e\";\n@import \"f44af50f707c6400\";\n@import \"ecd7ee5210c204bf\";\n@import \"22790f45ea428ad3\";\n@import \"815bceb14e48535b\";\n@import \"d1f38c1a1dca0d1d\";\n@import \"537fb0ca46d31379\";\n@import \"a8494d20ef79a0e3\";\n@import \"79cce561e45ffc06\";\n@import \"c9c94a087292103a\";\n@import \"513654b09c04df36\";\n@import \"3c7f663c2050a6d7\";\n@import \"e0a80f2281c5a98c\";\n@import \"674839a0005ab99a\";\n@import \"5ef902271f4e0e39\";\n@import \"d2555b3b7dbfa017\";\n@import \"b94c7fdbdd52256b\";\n@import \"6de63fd26079ae0f\";\n@import \"5a89ff2dfcf18c0a\";\n@import \"a07dfd279735347b\";\n@import \"b5e446bb6dcc4e1c\";\n@import \"54845f5fd3baa319\";\n@import \"2de7a7e3963fbf24\";\n@import \"fa4678584d30070f\";\n@import \"1ce04b5c6b4f3eb8\";\n@import \"bd6c81fc190528c7\";\n@import \"04ef9354c93bba8c\";\n@import \"f74a56e9c2639077\";\n@import \"53c6c8640286f222\";\n@import \"6a68f1680a5c39a7\";\n@import \"e0e89dab97a1a597\";\n@import \"02adcce5f799cf5a\";\n@import \"dea127430e473cd4\";\n@import \"29be0b21c5e9c2dd\";\n@import \"e881cb1a0c169646\";\n@import \"2921cb30e5b1e98c\";\n@import \"749ac8657b6d2abe\";\n@import \"308da54cb6a5bb1e\";\n@import \"1d50015ed9ab4a0b\";\n@import \"e1c8862b22b9e85e\";\n@import \"0137bfd0def4f5c5\";\n@import \"d9289643df2cce78\";\n@import \"bde04507c0374740\";\n@import \"f26c5a62f862373e\";\n@import \"a0aa25234410fcc0\";\n@import \"bfc3f6e7dc8bc555\";\n@import \"35a7c33676ba62aa\";\n@import \"ab00961d30f25a5c\";\n@import \"49dc68618e3a15ba\";\n@import \"ba153a3a44f76ac3\";\n@import \"0a4bebb360aff744\";\n@import \"3190e413a3dc82a6\";\n@import \"da42a8ed4e71c885\";\n@import \"7586849e79408126\";\n@import \"136755f178169164\";\n@import \"70b693150e2d2ce1\";\n@import \"855d7957f63b3c85\";\n@import \"33ba604c93ee16bf\";\n@import \"5f8704452974fccc\";\n@import \"f4380a593bafb4d9\";\n@import \"d132b9d920cf8dbc\";\n@import \"5db94dc0a1bd1eb5\";\n@import \"f10b9228fd9261cc\";\n@import \"cf0ddef6af4d5c44\";\n@import \"7d793f2d9d8dc6a3\";\n@import \"7c5c73a98de7c023\";\n@import \"e99fa94aacf2d09f\";\n@import \"3011883f998617c4\";\n","import data from '../data/data.json';\r\nimport React from 'react';\r\nimport { ComparisonTable } from './ComparisonTable';\r\nimport { WeekComparison } from './WeekComparison';\r\nimport { Projections } from './Projections';\r\nimport { Heading, Provider, Tabs, Tab, TabList, TabPanel } from '@react-spectrum/s2';\r\nimport { PerformanceHistory } from './PerformanceHistory';\r\nimport { style } from '@react-spectrum/s2/style' with { type: 'macro' };\r\n\r\nexport function App() {\r\n  return (\r\n    <Provider>\r\n      <div className={style({ fontFamily: 'sans' })}>\r\n        <Heading>GCNS Analytics</Heading>\r\n        <Tabs aria-label=\"tabs\" defaultSelectedKey=\"proj\">\r\n          <TabList>\r\n            <Tab id=\"week\">Week comparison</Tab>\r\n            <Tab id=\"perf\">Performance history</Tab>\r\n            <Tab id=\"proj\">Projections</Tab>\r\n          </TabList>\r\n          <TabPanel id=\"week\">\r\n            <WeekComparison teams={data.teams} stats={data.stats} />\r\n          </TabPanel>\r\n          <TabPanel id=\"perf\">\r\n            <PerformanceHistory teams={data.teams} stats={data.stats} />\r\n          </TabPanel>\r\n          <TabPanel id=\"proj\">\r\n            <Projections teams={data.teams} stats={data.stats} />\r\n          </TabPanel>\r\n        </Tabs>\r\n        {/* <ComparisonTable teams={data.teams} stats={data.stats}/> */}\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n","import React, { useMemo, useRef, useState } from \"react\";\r\nimport { CompareCategory, Stats, Teams } from \"../types\";\r\nimport {style} from '@react-spectrum/s2/style' with {type: 'macro'};\r\nimport {ToggleButton, ActionButton, Divider} from '@react-spectrum/s2';\r\nimport { TeamPicker } from \"./TeamPicker\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport { statMap } from \"../util\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport { BoxPlotChart, BoxPlotController, BoxAndWiskers } from '@sgratzl/chartjs-chart-boxplot';\r\n\r\n\r\ninterface WeekComparisonProps {\r\n  stats: Stats;\r\n  teams: Teams;\r\n}\r\n\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BoxPlotController,\r\n  BoxAndWiskers\r\n);\r\n\r\nexport function WeekComparison(props: WeekComparisonProps) {\r\n  const {stats, teams} = props;\r\n  const [team1, setTeam1] = useState<string>('5'); // default to our team\r\n  const [team2, setTeam2] = useState<string>();\r\n  const [dataDiff, setDataDiff] = useState<'pct' | 'total'>('pct');\r\n  const lineChart = useRef();\r\n\r\n  const hasData = !!(team1 && team2);\r\n  let labels = Object.keys(stats).map(week => `Week ${week}`);\r\n\r\n  let [datasets, records, diff] = useMemo(() => {\r\n    let data = [];\r\n    let record: Record<string, [number, number, number]> = [];\r\n    let differential = [];\r\n    if (!hasData) {\r\n      return [];\r\n    }\r\n    Object.entries(statMap).forEach(([statKey, statObj], i) => {\r\n      differential[i] = [];\r\n      const statData = Object.entries(stats).map(([_, teamStats], weekIndex) => {\r\n        const t1Stat = teamStats.stats[team1][statKey];\r\n        const t2Stat = teamStats.stats[team2][statKey];\r\n        let diff = t1Stat - t2Stat;\r\n        if (Number.isNaN(diff)) {\r\n          diff = 0;\r\n        }\r\n\r\n        differential[i][weekIndex] = t2Stat === 0 || Number.isNaN(t2Stat) || Number.isNaN(t1Stat) \r\n          ? 0 \r\n          : +(((t1Stat - t2Stat) / t2Stat) * 100).toFixed(2);\r\n\r\n        if (!record[weekIndex]) {\r\n          record[weekIndex] = [0, 0, 0];\r\n        }\r\n\r\n        if (diff === 0 || Number.isNaN(diff)) {\r\n          record[weekIndex][2]++; // tie\r\n        } else {\r\n          diff * (statObj.reverse ? -1 : 1) > 0 ? record[weekIndex][0]++ : record[weekIndex][1]++;\r\n        }\r\n\r\n        return diff;\r\n      });\r\n\r\n      data[i] = {\r\n        label: statKey,\r\n        data: dataDiff === 'pct' ? differential[i] : statData,\r\n        borderColor: statObj.color,\r\n        pointBorderColor: 'black',\r\n        backgroundColor: statObj.color,\r\n        yAxisID: dataDiff === 'total' && statKey.includes('%') ? 'y1' : 'y',\r\n        // https://www.chartjs.org/docs/latest/configuration/elements.html#point-styles\r\n        pointStyle: point => {\r\n          if (point.raw === 0) {\r\n            return 'rectRounded';\r\n          }\r\n          return point.raw * (statObj.reverse ? -1 : 1) > 0 ? 'circle' : 'triangle';\r\n        },\r\n        radius: 6\r\n      }\r\n    });\r\n    \r\n    return [data, record, differential];\r\n  }, [stats, team1, team2, dataDiff]);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    // animation: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'right'\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Head to head comparison'\r\n      },\r\n      // https://www.chartjs.org/docs/latest/configuration/tooltip.html\r\n      tooltip: {\r\n        callbacks: {\r\n          label: context => {\r\n            if (dataDiff === 'pct') {\r\n              return `${context.dataset.label}: ${context.formattedValue}%`;\r\n            }\r\n            return `${context.dataset.label}: ${context.formattedValue} (${\r\n              diff[context.datasetIndex][context.dataIndex]\r\n            }%)`;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          callback: (value, index, ticks) => {\r\n            return [\r\n              labels[index],\r\n              `(${records[index][0]}-${records[index][1]}` +\r\n                (records[index][2] > 0 ? `-${records[index][2]}` : '') +\r\n                ')'\r\n            ];\r\n          }\r\n        }\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        title: { display: true, text: 'Counting' },\r\n        ticks: {\r\n          font: {\r\n            // https://www.chartjs.org/docs/latest/general/fonts.html\r\n            size: tick => (tick.tick?.value === 0 ? '20px' : '12px'),\r\n            weight: tick => (tick.tick?.value === 0 ? 'bold' : 'normal')\r\n          }\r\n        },\r\n        grid: {\r\n          lineWidth: tick => {\r\n            return tick.tick.value === 0 ? 2 : 1;\r\n          },\r\n          color: tick => {\r\n            return tick.tick.value === 0 ? 'black' : '#c0c0c0';\r\n          },\r\n          drawOnChartArea: ctx => {\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n      y1: {\r\n        type: 'linear',\r\n        display: dataDiff === 'total',\r\n        position: 'right',\r\n        title: { display: true, text: 'Percentage' },\r\n        ticks: {\r\n          font: {\r\n            size: tick => (tick.tick?.value === 0 ? '20px' : '12px'),\r\n            weight: tick => (tick.tick?.value === 0 ? 'bold' : 'normal')\r\n          }\r\n        },\r\n        grid: {\r\n          drawOnChartArea: ctx => {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    stacked: false\r\n  };\r\n  \r\n  // const onDataAction = key => {\r\n  //   if (!lineChart.current) {\r\n  //     return;\r\n  //   }\r\n  //   if (key === 'hide' || key === 'show') {\r\n  //     for (let i = 0; i < datasets.length; i++) {\r\n  //       lineChart.current.setDatasetVisibility(i, key === 'show');\r\n  //     }\r\n  //   } else if (key === 'pct' || key === 'cnt') {\r\n  //     for (let i = 0; i < datasets.length; i++) {\r\n  //       const stat = Object.values(STAT_MAP)[i];\r\n  //       lineChart.current.setDatasetVisibility(\r\n  //         i,\r\n  //         (stat.short.includes('%') && key === 'pct') || (key === 'cnt' && !stat.short.includes('%'))\r\n  //       );\r\n  //     }\r\n  //   }\r\n  //   lineChart.current.update();\r\n  // };\r\n  console.log('labels', labels)\r\n  console.log('datasets', datasets)\r\n  return (\r\n    <div className={style({display: 'flex', flexDirection: 'column', gap: 16, fontFamily: 'sans'})}>\r\n      <div className={style({display: 'flex', gap: 16, alignItems: 'center', justifyContent: 'center'})}>\r\n    \r\n        <TeamPicker label=\"Team 1\" items={Object.values(teams)} selectedKey={team1} onSelectionChange={setTeam1} />\r\n        <span>vs.</span>\r\n        <TeamPicker label=\"Team 2\" items={Object.values(teams)} selectedKey={team2} onSelectionChange={setTeam2} />\r\n      </div>\r\n      <Divider size=\"S\" />\r\n      {hasData ? (\r\n        <>\r\n          {/* <div className={style({display: 'flex', gap: 16})}>\r\n            <ActionGroup\r\n              selectionMode=\"single\"\r\n              density=\"compact\"\r\n              selectedKeys={[dataDiff]}\r\n              onSelectionChange={sel => setDataDiff(Array.from(sel)[0])}\r\n            >\r\n              <Item key=\"pct\">Percentage difference</Item>\r\n              <Item key=\"total\">Total difference</Item>\r\n            </ActionGroup>\r\n            <Divider orientation=\"vertical\" size=\"M\" />\r\n            <ActionGroup onAction={onDataAction}>\r\n              <Item key=\"show\">Show all</Item>\r\n              <Item key=\"hide\">Hide all</Item>\r\n              <Item key=\"pct\">Percentages only</Item>\r\n              <Item key=\"cnt\">Counting stats only</Item>\r\n            </ActionGroup>\r\n          </div> */}\r\n          <Line ref={lineChart} options={options} data={{ labels, datasets }} />\r\n        </>\r\n      ) : (\r\n        <div className={style({height: '[500px]', display: 'flex', alignItems: 'center', justifyContent: 'center'})}>\r\n          Select 2 teams\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ContextValue, Separator as RACSeparator, SeparatorProps as RACSeparatorProps} from 'react-aria-components';\nimport {createContext, forwardRef} from 'react';\nimport {DOMRef, DOMRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {getAllowedOverrides, staticColor, StyleProps} from './style-utils' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\n/*\n * Adding as it's own type to deal with size being a part of the theme so we\n * can type style() and it's parameters.\n */\ninterface DividerSpectrumProps {\n  /**\n   * How thick the Divider should be.\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L',\n  /**\n   * How thick the Divider should be.\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical',\n  /** The static color style to apply. Useful when the Divider appears over a color background. */\n  staticColor?: 'white' | 'black' | 'auto'\n}\n\n// TODO: allow overriding height (only when orientation is vertical)??\nexport interface DividerProps extends DividerSpectrumProps, Omit<RACSeparatorProps, 'className' | 'style' | 'elementType' | keyof GlobalDOMAttributes>, StyleProps {}\n\nexport const DividerContext = createContext<ContextValue<Partial<DividerProps>, DOMRefValue>>(null);\n\nexport const divider = style<DividerSpectrumProps & {isStaticColor: boolean}>({\n  ...staticColor(),\n  alignSelf: 'stretch',\n  backgroundColor: {\n    default: 'gray-200',\n    size: {\n      L: 'gray-800'\n    },\n    isStaticColor: {\n      default: 'transparent-overlay-200',\n      size: {\n        L: 'transparent-overlay-800'\n      }\n    },\n    forcedColors: 'ButtonBorder'\n  },\n  borderStyle: 'none',\n  borderRadius: 'full',\n  margin: 0,\n  flexGrow: 0,\n  flexShrink: 0,\n  height: {\n    orientation: {\n      horizontal: {\n        // These should be px not rems, because we're emulating a border.\n        default: '[2px]',\n        size: {\n          S: '[1px]',\n          L: '[4px]'\n        }\n      }\n    }\n  },\n  width: {\n    orientation: {\n      vertical: {\n        default: '[2px]',\n        size: {\n          S: '[1px]',\n          L: '[4px]'\n        }\n      }\n    }\n  }\n}, getAllowedOverrides());\n\n/**\n * Dividers bring clarity to a layout by grouping and dividing content in close proximity.\n * They can also be used to establish rhythm and hierarchy.\n */\nexport const Divider = /*#__PURE__*/ forwardRef(function Divider(props: DividerProps, ref: DOMRef) {\n  [props, ref] = useSpectrumContextProps(props, ref, DividerContext);\n  let domRef = useDOMRef(ref);\n\n  return (\n    <RACSeparator\n      {...props}\n      ref={domRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + divider({\n        size: props.size || 'M',\n        orientation: props.orientation || 'horizontal',\n        staticColor: props.staticColor,\n        isStaticColor: !!props.staticColor\n      }, props.styles)} />\n  );\n});\n","import { Picker, PickerItem, PickerProps, Text, Image } from \"@react-spectrum/s2\";\r\nimport {style} from '@react-spectrum/s2/style' with {type: 'macro'};\r\nimport React from 'react';\r\nimport {Team, Teams} from '../types';\r\n\r\nexport function TeamPicker(props: PickerProps<Team>) {\r\n  return (\r\n    <Picker {...props}>\r\n      {\r\n        item => (\r\n          <PickerItem id={item.id}>\r\n            <Image src={item.logo[0]} slot=\"icon\" styles={style({size: '[20px]', alignSelf: 'center', justifySelf: 'center'})} />\r\n            <Text slot=\"label\">{item.name}</Text>\r\n          </PickerItem>\r\n        )\r\n      }\r\n    </Picker>\r\n  )\r\n}","import {ContextValue, SlotProps} from 'react-aria-components';\nimport {createContext, ForwardedRef, forwardRef, HTMLAttributeReferrerPolicy, JSX, ReactNode, useCallback, useContext, useMemo, useReducer, useRef, version} from 'react';\nimport {DefaultImageGroup, ImageGroup} from './ImageCoordinator';\nimport {loadingStyle, useIsSkeleton, useLoadingAnimation} from './Skeleton';\nimport {mergeStyles} from '../style/runtime';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\nimport {UnsafeStyles} from './style-utils';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ImageProps extends UnsafeStyles, SlotProps {\n  /** The URL of the image. */\n  src?: string,\n  // TODO\n  // srcSet?: string,\n  // sizes?: string,\n  /** Accessible alt text for the image. */\n  alt?: string,\n  /**\n   * Indicates if the fetching of the image must be done using a CORS request.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin).\n   */\n  crossOrigin?: 'anonymous' | 'use-credentials',\n  /**\n   * Whether the browser should decode images synchronously or asynchronously.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#decoding).\n   */\n  decoding?: 'async' | 'auto' | 'sync',\n  /**\n   * Provides a hint of the relative priority to use when fetching the image.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#fetchpriority).\n   */\n  fetchPriority?: 'high' | 'low' | 'auto',\n  /**\n   * Whether the image should be loaded immediately or lazily when scrolled into view.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#loading).\n   */\n  loading?: 'eager' | 'lazy',\n  /**\n   * A string indicating which referrer to use when fetching the resource.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#referrerpolicy).\n   */\n  referrerPolicy?: HTMLAttributeReferrerPolicy,\n  /**\n   * The intrinsic width of the image.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/img#width).\n   */\n  width?: number,\n  /**\n   * The intrinsic height of the image.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/img#height).\n   */\n  height?: number,\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StyleString,\n  /** A function that is called to render a fallback when the image fails to load. */\n  renderError?: () => ReactNode,\n  /**\n   * A group of images to coordinate between, matching the group passed to the `<ImageCoordinator>` component.\n   * If not provided, the default image group is used.\n   */\n  group?: ImageGroup\n}\n\ninterface ImageContextValue extends ImageProps {\n  hidden?: boolean\n}\n\nexport const ImageContext = createContext<ContextValue<Partial<ImageContextValue>, HTMLDivElement>>(null);\n\ntype ImageState = 'loading' | 'loaded' | 'revealed' | 'error';\ninterface State {\n  state: ImageState,\n  src: string,\n  startTime: number,\n  loadTime: number\n}\n\ntype Action = \n  | {type: 'update', src: string}\n  | {type: 'loaded'}\n  | {type: 'revealed'}\n  | {type: 'error'};\n\nfunction createState(src: string): State {\n  return {\n    state: 'loading',\n    src,\n    startTime: Date.now(),\n    loadTime: 0\n  };\n}\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update': {\n      return {\n        state: 'loading',\n        src: action.src,\n        startTime: Date.now(),\n        loadTime: 0\n      };\n    }\n    case 'loaded':\n    case 'error': {\n      return {\n        ...state,\n        state: action.type\n      };\n    }\n    case 'revealed': {\n      return {\n        ...state,\n        state: 'revealed',\n        loadTime: Date.now() - state.startTime\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst wrapperStyles = style({\n  backgroundColor: 'gray-100',\n  overflow: 'hidden'\n});\n\nconst imgStyles = style({\n  display: 'block',\n  width: 'full',\n  height: 'full',\n  objectFit: 'inherit',\n  objectPosition: 'inherit',\n  opacity: {\n    default: 0,\n    isRevealed: 1\n  },\n  transition: {\n    default: 'none',\n    isTransitioning: 'opacity'\n  },\n  transitionDuration: 500\n});\n\n/**\n * An image with support for skeleton loading and custom error states.\n */\nexport const Image = forwardRef(function Image(props: ImageProps, domRef: ForwardedRef<HTMLDivElement>): JSX.Element | null {\n  [props, domRef] = useSpectrumContextProps(props, domRef, ImageContext);\n\n  let {\n    src = '',\n    styles,\n    UNSAFE_className = '',\n    UNSAFE_style,\n    renderError,\n    group = DefaultImageGroup,\n    // TODO\n    // srcSet,\n    // sizes,\n    alt,\n    crossOrigin,\n    decoding,\n    fetchPriority,\n    loading,\n    referrerPolicy,\n    slot,\n    width,\n    height\n  } = props;\n  let hidden = (props as ImageContextValue).hidden;\n  \n  let {revealAll, register, unregister, load} = useContext(group);\n  let [{state, src: lastSrc, loadTime}, dispatch] = useReducer(reducer, src, createState);\n\n  if (src !== lastSrc && !hidden) {\n    dispatch({type: 'update', src});\n  }\n\n  if (state === 'loaded' && revealAll && !hidden) {\n    dispatch({type: 'revealed'});\n  }\n\n  let imgRef = useRef<HTMLImageElement | null>(null);\n  useLayoutEffect(() => {\n    if (hidden) {\n      return;\n    }\n\n    register(src);\n    return () => {\n      unregister(src);\n    };\n  }, [hidden, register, unregister, src]);\n\n  let onLoad = useCallback(() => {\n    load(src);\n    dispatch({type: 'loaded'});\n  }, [load, src]);\n\n  let onError = useCallback(() => {\n    dispatch({type: 'error'});\n    unregister(src);\n  }, [unregister, src]);\n\n  let isSkeleton = useIsSkeleton();\n  let isAnimating = isSkeleton || state === 'loading' || state === 'loaded';\n  let animation = useLoadingAnimation(isAnimating);\n  useLayoutEffect(() => {\n    if (hidden) {\n      return;\n    }\n\n    // If the image is already loaded, update state immediately instead of waiting for onLoad.\n    let img = imgRef.current;\n    if (state === 'loading' && img?.complete) {\n      if (img.naturalWidth === 0 && img.naturalHeight === 0) {\n        // Queue a microtask so we don't hit React's update limit.\n        // TODO: is this necessary?\n        queueMicrotask(onError);\n      } else {\n        queueMicrotask(onLoad);\n      }\n    }\n\n    animation(domRef.current);\n  });\n\n  if (props.alt == null && process.env.NODE_ENV !== 'production') {\n    console.warn(\n      'The `alt` prop was not provided to an image. ' +\n      'Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image ' +\n      'is decorative or redundant with displayed text and should not be announced by screen readers.'\n    );\n  }\n\n  let errorState = !isSkeleton && state === 'error' && renderError?.();\n  let isRevealed = state === 'revealed' && !isSkeleton;\n  let isTransitioning = isRevealed && loadTime > 200;\n  return useMemo(() => hidden ? null : (\n    <div\n      ref={domRef}\n      slot={slot || undefined}\n      style={UNSAFE_style}\n      className={UNSAFE_className + mergeStyles(wrapperStyles, styles) + ' '  + (isAnimating ? loadingStyle : '')}>\n      {errorState}\n      {!errorState && (\n        <img\n          {...getFetchPriorityProp(fetchPriority)}\n          src={src || undefined}\n          alt={alt}\n          crossOrigin={crossOrigin}\n          decoding={decoding}\n          loading={loading}\n          referrerPolicy={referrerPolicy}\n          width={width}\n          height={height}\n          ref={imgRef}\n          onLoad={onLoad}\n          onError={onError}\n          className={imgStyles({isRevealed, isTransitioning})} />\n        )}\n    </div>\n  ), [slot, hidden, domRef, UNSAFE_style, UNSAFE_className, styles, isAnimating, errorState, src, alt, crossOrigin, decoding, fetchPriority, loading, referrerPolicy, width, height, onLoad, onError, isRevealed, isTransitioning]);\n});\n\nfunction getFetchPriorityProp(fetchPriority?: 'high' | 'low' | 'auto'): Record<string, string | undefined> {\n  const pieces = version.split('.');\n  const major = parseInt(pieces[0], 10);\n  if (major >= 19) {\n    return {fetchPriority};\n  }\n  return {fetchpriority: fetchPriority};\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {cloneElement, createContext, CSSProperties, ReactElement, ReactNode, Ref, useCallback, useContext, useRef} from 'react';\nimport {color, style} from '../style' with {type: 'macro'};\nimport {inertValue, mergeRefs} from '@react-aria/utils';\nimport {mergeStyles} from '../style/runtime';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport {StyleString} from '../style/types';\nimport {useMediaQuery} from '@react-spectrum/utils';\n\nexport function useLoadingAnimation(isAnimating: boolean): (element: HTMLElement | null) => void {\n  let animationRef = useRef<Animation | null>(null);\n  let reduceMotion = useMediaQuery('(prefers-reduced-motion: reduce)');\n  return useCallback((element: HTMLElement | null) => {\n    if (isAnimating && !animationRef.current && element && !reduceMotion) {\n      // Use web animation API instead of CSS animations so that we can\n      // synchronize it between all loading elements on the page (via startTime).\n      animationRef.current = element.animate(\n        [\n          {backgroundPosition: '100%'},\n          {backgroundPosition: '0%'}\n        ],\n        {\n          duration: 2000,\n          iterations: Infinity,\n          easing: 'ease-in-out'\n        }\n      );\n      animationRef.current.startTime = 0;\n    } else if (!isAnimating && animationRef.current) {\n      animationRef.current.cancel();\n      animationRef.current = null;\n    }\n  }, [isAnimating]);\n}\n\nexport type SkeletonElement = ReactElement<{\n  children: ReactNode,\n  className?: string,\n  ref?: Ref<HTMLElement>,\n  inert?: boolean | 'true'\n}>;\n\nexport const SkeletonContext = createContext<boolean | null>(null);\nexport function useIsSkeleton(): boolean {\n  return useContext(SkeletonContext) || false;\n}\n\nexport interface SkeletonProps {\n  children: ReactNode,\n  isLoading: boolean\n}\n\n/**\n * A Skeleton wraps around content to render it as a placeholder.\n */\nexport function Skeleton({children, isLoading}: SkeletonProps): ReactNode {\n  // Disable all form components inside a skeleton.\n  return (\n    <SkeletonContext.Provider value={isLoading}>\n      {children}\n    </SkeletonContext.Provider>\n  );\n}\n\nexport const loadingStyle = raw(`\n  background-image: linear-gradient(to right, ${color('gray-100')} 33%, light-dark(${color('gray-25')}, ${color('gray-300')}), ${color('gray-100')} 66%);\n  background-size: 300%;\n  * {\n    visibility: hidden;\n  }\n`, 'L'); // add to a separate layer so it overrides default style macro styles\n\nexport function useSkeletonText(children: ReactNode, style: CSSProperties | undefined): [ReactNode, CSSProperties | undefined] {\n  let isSkeleton = useContext(SkeletonContext);\n  if (isSkeleton) {\n    children = <SkeletonText>{children}</SkeletonText>;\n    style = {\n      ...style,\n      // This ensures the ellipsis on truncated text is also hidden.\n      // -webkit-text-fill-color overrides any `color` property that is also set.\n      WebkitTextFillColor: 'transparent'\n    };\n  }\n  return [children, style];\n}\n\n// Rendered inside <Text> to create skeleton line boxes via box-decoration-break.\nexport function SkeletonText({children}: {children: ReactNode}): ReactNode {\n  return (\n    <span\n      // @ts-ignore - compatibility with React < 19\n      inert={inertValue(true)}\n      ref={useLoadingAnimation(true)}\n      className={loadingStyle + style({\n        color: 'transparent',\n        boxDecorationBreak: 'clone',\n        borderRadius: 'sm'\n      })}>\n      {children}\n    </span>\n  );\n}\n\n// Clones the child element and displays it with skeleton styling.\nexport function SkeletonWrapper({children}: {children: SkeletonElement}): ReactNode {\n  let isLoading = useContext(SkeletonContext);\n  let animation = useLoadingAnimation(isLoading || false);\n  if (isLoading == null) {\n    return children;\n  }\n\n  let childRef = 'ref' in children && !Object.getOwnPropertyDescriptor(children, 'ref')?.get ? children.ref as any : children.props.ref;\n  return (\n    <SkeletonContext.Provider value={null}>\n      {isLoading ? cloneElement(children, {\n        ref: mergeRefs(childRef, animation),\n        className: (children.props.className || '') + ' ' + loadingStyle,\n        // @ts-ignore - compatibility with React < 19\n        inert: inertValue(true)\n      }) : children}\n    </SkeletonContext.Provider>\n  );\n}\n\n// Adds default border radius around icons when displayed in a skeleton.\nexport function useSkeletonIcon(styles: StyleString): StyleString {\n  let isSkeleton = useContext(SkeletonContext);\n  if (isSkeleton) {\n    return mergeStyles(style({borderRadius: 'sm'}), styles);\n  }\n  return styles || '' as StyleString;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  ListBoxSection as AriaListBoxSection,\n  PopoverProps as AriaPopoverProps,\n  Select as AriaSelect,\n  SelectProps as AriaSelectProps,\n  SelectRenderProps as AriaSelectRenderProps,\n  Button,\n  ButtonRenderProps,\n  Collection,\n  ContextValue,\n  DEFAULT_SLOT,\n  ListBox,\n  ListBoxItem,\n  ListBoxItemProps,\n  ListBoxLoadMoreItem,\n  ListBoxProps,\n  ListLayout,\n  Provider,\n  SectionProps,\n  SelectValue,\n  Virtualizer\n} from 'react-aria-components';\nimport {AsyncLoadable, FocusableRef, FocusableRefValue, GlobalDOMAttributes, HelpTextProps, LoadingState, PressEvent, RefObject, SpectrumLabelableProps} from '@react-types/shared';\nimport {AvatarContext} from './Avatar';\nimport {baseColor, edgeToText, focusRing, style} from '../style' with {type: 'macro'};\nimport {box, iconStyles as checkboxIconStyles} from './Checkbox';\nimport {centerBaseline} from './CenterBaseline';\nimport {\n  checkbox,\n  checkmark,\n  description,\n  icon,\n  iconCenterWrapper,\n  label,\n  sectionHeading\n} from './Menu';\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport ChevronIcon from '../ui-icons/Chevron';\nimport {control, controlBorderRadius, controlFont, field, fieldInput, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {createHideableComponent} from '@react-aria/collections';\nimport {\n  Divider,\n  listbox,\n  listboxHeader,\n  listboxItem,\n  LOADER_ROW_HEIGHTS\n} from './ComboBox';\nimport {\n  FieldErrorIcon,\n  FieldLabel,\n  HelpText\n} from './Field';\nimport {FormContext, useFormProps} from './Form';\nimport {forwardRefType} from './types';\nimport {HeaderContext, HeadingContext, Text, TextContext} from './Content';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeStyles} from '../style/runtime';\nimport {Placement} from 'react-aria';\nimport {Popover} from './Popover';\nimport {PressResponder} from '@react-aria/interactions';\nimport {pressScale} from './pressScale';\nimport {ProgressCircle} from './ProgressCircle';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport React, {createContext, forwardRef, ReactNode, useContext, useMemo, useRef, useState} from 'react';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useGlobalListeners, useSlotId} from '@react-aria/utils';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useScale} from './utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface PickerStyleProps {\n  /**\n   * The size of the Picker.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /**\n   * Whether the picker should be displayed with a quiet style.\n   * @private\n   */\n  isQuiet?: boolean\n}\n\ntype SelectionMode = 'single' | 'multiple';\nexport interface PickerProps<T extends object, M extends SelectionMode = 'single'> extends\n  Omit<AriaSelectProps<T, M>, 'children' | 'style' | 'className' | keyof GlobalDOMAttributes>,\n  PickerStyleProps,\n  StyleProps,\n  SpectrumLabelableProps,\n  HelpTextProps,\n  Pick<ListBoxProps<T>, 'items' | 'dependencies'>,\n  Pick<AriaPopoverProps, 'shouldFlip'>,\n  Pick<AsyncLoadable, 'onLoadMore'> {\n    /** The contents of the collection. */\n    children: ReactNode | ((item: T) => ReactNode),\n    /**\n     * Direction the menu will render relative to the Picker.\n     *\n     * @default 'bottom'\n     */\n    direction?: 'bottom' | 'top',\n    /**\n     * Alignment of the menu relative to the input target.\n     *\n     * @default 'start'\n     */\n    align?: 'start' | 'end',\n    /** Width of the menu. By default, matches width of the trigger. Note that the minimum width of the dropdown is always equal to the trigger's width. */\n    menuWidth?: number,\n    /** The current loading state of the Picker. */\n    loadingState?: LoadingState\n}\n\ninterface PickerButtonProps extends PickerStyleProps, ButtonRenderProps {}\n\nexport const PickerContext = createContext<ContextValue<Partial<PickerProps<any>>, FocusableRefValue<HTMLButtonElement>>>(null);\n\nconst inputButton = style<PickerButtonProps | AriaSelectRenderProps>({\n  ...focusRing(),\n  ...control({shape: 'default', icon: true}),\n  ...fieldInput(),\n  outlineStyle: {\n    default: 'none',\n    isFocusVisible: 'solid',\n    isQuiet: 'none'\n  },\n  position: 'relative',\n  textAlign: 'start',\n  borderStyle: {\n    default: 'none',\n    forcedColors: 'solid'\n  },\n  borderColor: {\n    forcedColors: {\n      default: 'ButtonText',\n      isDisabled: 'GrayText'\n    }\n  },\n  transition: 'default',\n  paddingX: {\n    default: 'edge-to-text',\n    isQuiet: 0\n  },\n  backgroundColor: {\n    default: baseColor('gray-100'),\n    isOpen: 'gray-200',\n    isDisabled: 'disabled',\n    isQuiet: 'transparent'\n  },\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: 'disabled'\n  },\n  maxWidth: {\n    isQuiet: 'max'\n  },\n  disableTapHighlight: true\n});\n\nconst quietFocusLine = style({\n  width: 'full',\n  // Use pixels since we are emulating a border.\n  height: '[2px]',\n  position: 'absolute',\n  bottom: 0,\n  borderRadius: 'full',\n  backgroundColor: {\n    default: 'blue-800',\n    forcedColors: 'Highlight'\n  }\n});\n\nexport let menu = style({\n  outlineStyle: 'none',\n  display: 'grid',\n  width: 'full',\n  gridTemplateColumns: {\n    size: {\n      S: [edgeToText(24), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(24)],\n      M: [edgeToText(32), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(32)],\n      L: [edgeToText(40), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(40)],\n      XL: [edgeToText(48), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(48)]\n    }\n  },\n  boxSizing: 'border-box',\n  maxHeight: 'inherit',\n  overflow: 'auto',\n  padding: 8,\n  fontFamily: 'sans',\n  fontSize: controlFont(),\n  gridAutoRows: 'min-content'\n});\n\nconst invalidBorder = style({\n  ...controlBorderRadius(),\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  pointerEvents: 'none',\n  borderStyle: 'solid',\n  borderWidth: 2,\n  borderColor: baseColor('negative'),\n  transition: 'default'\n});\n\nconst valueStyles = style({\n  flexGrow: {\n    default: 1,\n    isQuiet: 0\n  },\n  truncate: true,\n  display: 'flex',\n  alignItems: 'center'\n});\n\nconst iconStyles = style({\n  flexShrink: 0,\n  rotate: 90,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  color: {\n    isLoading: 'disabled'\n  }\n});\n\nconst avatar = style({\n  gridArea: 'icon',\n  marginEnd: 'text-to-visual'\n});\n\nconst loadingWrapperStyles = style({\n  gridColumnStart: '1',\n  gridColumnEnd: '-1',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  marginY: 8\n});\n\nconst progressCircleStyles = style({\n  size: {\n    size: {\n      S: 16,\n      M: 20,\n      L: 22,\n      XL: 26\n    }\n  }\n});\n\nlet InternalPickerContext = createContext<{size: 'S' | 'M' | 'L' | 'XL'}>({size: 'M'});\nlet InsideSelectValueContext = createContext(false);\n\n/**\n * Pickers allow users to choose a single option from a collapsible list of options when space is limited.\n */\nexport const Picker = /*#__PURE__*/ (forwardRef as forwardRefType)(function Picker<T extends object, M extends SelectionMode = 'single'>(props: PickerProps<T, M>, ref: FocusableRef<HTMLButtonElement>) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  [props, ref] = useSpectrumContextProps(props, ref, PickerContext);\n  let domRef = useFocusableRef(ref);\n  let formContext = useContext(FormContext);\n  props = useFormProps(props);\n  let {\n    direction = 'bottom',\n    align = 'start',\n    shouldFlip = true,\n    menuWidth,\n    label,\n    description: descriptionMessage,\n    errorMessage,\n    children,\n    items,\n    size = 'M',\n    labelPosition = 'top',\n    labelAlign = 'start',\n    necessityIndicator,\n    UNSAFE_className = '',\n    UNSAFE_style,\n    placeholder = stringFormatter.format('picker.placeholder'),\n    isQuiet,\n    loadingState,\n    onLoadMore,\n    ...pickerProps\n  } = props;\n\n  // Better way to encode this into a style? need to account for flipping\n  let menuOffset: number;\n  if (size === 'S') {\n    menuOffset = 6;\n  } else if (size === 'M') {\n    menuOffset = 6;\n  } else if (size === 'L') {\n    menuOffset = 7;\n  } else {\n    menuOffset = 8;\n  }\n\n  let renderer;\n  let showButtonSpinner = useMemo(() => loadingState === 'loading', [loadingState]);\n  let spinnerId = useSlotId([showButtonSpinner]);\n\n  let listBoxLoadingCircle = (\n    <ListBoxLoadMoreItem\n      className={loadingWrapperStyles}\n      isLoading={loadingState === 'loadingMore'}\n      onLoadMore={onLoadMore}>\n      <PickerProgressCircle size={size} aria-label={stringFormatter.format('table.loadingMore')} />\n    </ListBoxLoadMoreItem>\n  );\n\n  if (typeof children === 'function' && items) {\n    renderer = (\n      <>\n        <Collection items={items} dependencies={props.dependencies}>\n          {children}\n        </Collection>\n        {listBoxLoadingCircle}\n      </>\n    );\n  } else {\n    renderer = (\n      <>\n        {children}\n        {listBoxLoadingCircle}\n      </>\n    );\n  }\n  let scale = useScale();\n  let {direction: dir} = useLocale();\n  let RTLFlipOffset = dir === 'rtl' ? -1 : 1;\n\n  return (\n    <AriaSelect\n      {...pickerProps}\n      aria-describedby={spinnerId}\n      placeholder={placeholder}\n      style={UNSAFE_style}\n      className={UNSAFE_className + style(field(), getAllowedOverrides())({\n        isInForm: !!formContext,\n        labelPosition,\n        size\n      }, props.styles)}>\n      {({isDisabled, isOpen, isFocusVisible, isInvalid, isRequired}) => (\n        <>\n          <InternalPickerContext.Provider value={{size}}>\n            <FieldLabel\n              isDisabled={isDisabled}\n              isRequired={isRequired}\n              size={size}\n              labelPosition={labelPosition}\n              labelAlign={labelAlign}\n              isQuiet={isQuiet}\n              necessityIndicator={necessityIndicator}\n              contextualHelp={props.contextualHelp}>\n              {label}\n            </FieldLabel>\n            <PickerButton\n              loadingState={loadingState}\n              isOpen={isOpen}\n              isQuiet={isQuiet}\n              isFocusVisible={isFocusVisible}\n              size={size}\n              isInvalid={isInvalid}\n              isDisabled={isDisabled}\n              buttonRef={domRef}\n              loadingCircle={\n                <PickerProgressCircle\n                  id={spinnerId}\n                  size={size}\n                  aria-label={stringFormatter.format('table.loading')} />\n              } />\n            <HelpText\n              size={size}\n              isDisabled={isDisabled}\n              isInvalid={isInvalid}\n              description={descriptionMessage}>\n              {errorMessage}\n            </HelpText>\n            <Virtualizer\n              layout={ListLayout}\n              layoutOptions={{\n                estimatedRowHeight: 32,\n                estimatedHeadingHeight: 50,\n                padding: 8,\n                loaderHeight: LOADER_ROW_HEIGHTS[size][scale]}}>\n              <Popover\n                hideArrow\n                padding=\"none\"\n                offset={menuOffset}\n                crossOffset={isQuiet ? RTLFlipOffset * -12 : undefined}\n                placement={`${direction} ${align}` as Placement}\n                shouldFlip={shouldFlip}\n                UNSAFE_style={{\n                  width: menuWidth && !isQuiet ? `${menuWidth}px` : undefined\n                }}\n                styles={style({\n                  minWidth: {\n                    default: '--trigger-width',\n                    isQuiet: 192\n                  },\n                  width: {\n                    default: '--trigger-width',\n                    isQuiet: '[calc(var(--trigger-width) - 24)]'\n                  }\n                })(props)}>\n                <div\n                  className={style({\n                    display: 'flex',\n                    size: 'full'\n                  })}>\n                  <Provider\n                    values={[\n                      [HeaderContext, {styles: listboxHeader({size})}],\n                      [HeadingContext, {\n                        // @ts-ignore\n                        role: 'presentation',\n                        styles: sectionHeading\n                      }],\n                      [TextContext, {\n                        slots: {\n                          description: {styles: description({size})}\n                        }\n                      }]\n                    ]}>\n                    <ListBox\n                      dependencies={props.dependencies}\n                      items={items}\n                      className={listbox({size})}>\n                      {renderer}\n                    </ListBox>\n                  </Provider>\n                </div>\n              </Popover>\n            </Virtualizer>\n          </InternalPickerContext.Provider>\n        </>\n      )}\n    </AriaSelect>\n  );\n});\n\nfunction PickerProgressCircle(props) {\n  let {\n    id,\n    size,\n    'aria-label': ariaLabel\n  } = props;\n  return (\n    <ProgressCircle\n      id={id}\n      isIndeterminate\n      size=\"S\"\n      aria-label={ariaLabel}\n      styles={progressCircleStyles({size})} />\n  );\n}\n\nconst avatarSize = {\n  S: 16,\n  M: 20,\n  L: 22,\n  XL: 26\n} as const;\n\ninterface PickerButtonInnerProps<T extends object> extends PickerStyleProps, Omit<AriaSelectRenderProps, 'isRequired' | 'isFocused'>, Pick<PickerProps<T>, 'loadingState'> {\n  loadingCircle: ReactNode,\n  buttonRef: RefObject<HTMLButtonElement | null>\n}\n\n// Needs to be hidable component or otherwise the PressResponder throws a warning when rendered in the fake DOM and tries to register\nconst PickerButton = createHideableComponent(function PickerButton<T extends object>(props: PickerButtonInnerProps<T>) {\n  let {\n    isOpen,\n    isQuiet,\n    isFocusVisible,\n    size,\n    isInvalid,\n    isDisabled,\n    loadingState,\n    loadingCircle,\n    buttonRef\n  } = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n\n  // For mouse interactions, pickers open on press start. When the popover underlay appears\n  // it covers the trigger button, causing onPressEnd to fire immediately and no press scaling\n  // to occur. We override this by listening for pointerup on the document ourselves.\n  let [isPressed, setPressed] = useState(false);\n  let {addGlobalListener} = useGlobalListeners();\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType !== 'mouse') {\n      return;\n    }\n    setPressed(true);\n    addGlobalListener(document, 'pointerup', () => {\n      setPressed(false);\n    }, {once: true, capture: true});\n  };\n\n  return (\n    <PressResponder onPressStart={onPressStart} isPressed={isPressed}>\n      <Button\n        ref={buttonRef}\n        style={renderProps => pressScale(buttonRef)(renderProps)}\n        // Prevent press scale from sticking while Picker is open.\n        // @ts-ignore\n        isPressed={false}\n        className={renderProps => inputButton({\n          ...renderProps,\n          size: size,\n          isOpen,\n          isQuiet\n        })}>\n        {(renderProps) => (\n          <>\n            <SelectValue className={valueStyles({isQuiet}) + ' ' + raw('&> :not([slot=icon], [slot=avatar], [slot=label], [data-slot=label]) {display: none;}')}>\n              {({selectedItems, defaultChildren}) => {\n                return (\n                  <Provider\n                    values={[\n                      [IconContext, {\n                        slots: {\n                          icon: {\n                            render: centerBaseline({slot: 'icon', styles: iconCenterWrapper}),\n                            styles: icon\n                          }\n                        }\n                      }],\n                      [AvatarContext, {\n                        slots: {\n                          avatar: {\n                            size: avatarSize[size ?? 'M'],\n                            styles: avatar\n                          }\n                        }\n                      }],\n                      [TextContext, {\n                        slots: {\n                          description: {},\n                          [DEFAULT_SLOT]: {\n                            styles: style({\n                              display: 'block',\n                              flexGrow: 1,\n                              truncate: true\n                            }),\n                            // @ts-ignore\n                            'data-slot': 'label'\n                          },\n                          label: {\n                            styles: style({\n                              display: 'block',\n                              flexGrow: 1,\n                              truncate: true\n                            }),\n                            // @ts-ignore not technically necessary, but good for consistency\n                            'data-slot': 'label'\n                          }\n                        }\n                      }],\n                      [InsideSelectValueContext, true]\n                    ]}>\n                    {selectedItems.length <= 1\n                      ? defaultChildren\n                      : <Text slot=\"label\">{stringFormatter.format('picker.selectedCount', {count: selectedItems.length})}</Text>\n                    }\n                  </Provider>\n                );\n              }}\n            </SelectValue>\n            {isInvalid && <FieldErrorIcon isDisabled={isDisabled} />}\n            {loadingState === 'loading' && !isOpen && loadingCircle}\n            <ChevronIcon\n              size={size}\n              className={iconStyles({isLoading: loadingState === 'loading'})} />\n            {isFocusVisible && isQuiet && <span className={quietFocusLine} /> }\n            {isInvalid && !isDisabled && !isQuiet &&\n              // @ts-ignore known limitation detecting functions from the theme\n              <div className={invalidBorder({...renderProps, size})} />\n            }\n          </>\n        )}\n      </Button>\n    </PressResponder>\n  );\n});\n\nexport interface PickerItemProps extends Omit<ListBoxItemProps, 'children' | 'style' | 'className' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps {\n  children: ReactNode\n}\n\nconst checkmarkIconSize = {\n  S: 'XS',\n  M: 'M',\n  L: 'L',\n  XL: 'XL'\n} as const;\n\nexport function PickerItem(props: PickerItemProps): ReactNode {\n  let ref = useRef(null);\n  let isLink = props.href != null;\n  let {size} = useContext(InternalPickerContext);\n  return (\n    <ListBoxItem\n      {...props}\n      ref={ref}\n      textValue={props.textValue || (typeof props.children === 'string' ? props.children as string : undefined)}\n      style={pressScale(ref, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + listboxItem({...renderProps, size, isLink}, props.styles)}>\n      {(renderProps) => {\n        let {children} = props;\n        let checkboxRenderProps = {...renderProps, size, isFocused: false, isFocusVisible: false, isIndeterminate: false, isReadOnly: false, isInvalid: false, isRequired: false};\n        return (\n          <DefaultProvider\n            context={IconContext}\n            value={{slots: {\n              icon: {render: centerBaseline({slot: 'icon', styles: iconCenterWrapper}), styles: icon}\n            }}}>\n            <DefaultProvider\n              context={AvatarContext}\n              value={{slots: {\n                avatar: {size: avatarSize[size], styles: avatar}\n              }}}>\n              <DefaultProvider\n                context={TextContext}\n                value={{\n                  slots: {\n                    [DEFAULT_SLOT]: {styles: label({size})},\n                    label: {styles: label({size})},\n                    description: {styles: description({...renderProps, size})}\n                  }\n                }}>\n                {renderProps.selectionMode === 'single' && !isLink && <CheckmarkIcon size={checkmarkIconSize[size]} className={checkmark({...renderProps, size})} />}\n                {renderProps.selectionMode === 'multiple' && !isLink && (\n                  <div className={mergeStyles(checkbox, box(checkboxRenderProps))}>\n                    <CheckmarkIcon size={size} className={checkboxIconStyles} />\n                  </div>\n              )}\n                {typeof children === 'string' ? <Text slot=\"label\">{children}</Text> : children}\n              </DefaultProvider>\n            </DefaultProvider>\n          </DefaultProvider>\n        );\n      }}\n    </ListBoxItem>\n  );\n}\n\n// A Context.Provider that only sets a value if not inside SelectValue.\nfunction DefaultProvider({context, value, children}: {context: React.Context<any>, value: any, children: any}) {\n  let inSelectValue = useContext(InsideSelectValueContext);\n  if (inSelectValue) {\n    return children;\n  }\n\n  return <context.Provider value={value}>{children}</context.Provider>;\n}\n\nexport interface PickerSectionProps<T extends object> extends Omit<SectionProps<T>, keyof GlobalDOMAttributes> {}\nexport function PickerSection<T extends object>(props: PickerSectionProps<T>): ReactNode {\n  let {size} = useContext(InternalPickerContext);\n  return (\n    <>\n      <AriaListBoxSection\n        {...props}>\n        {props.children}\n      </AriaListBoxSection>\n      <Divider size={size} />\n    </>\n  );\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {centerBaselineBefore} from './CenterBaseline';\nimport {ContextValue, SlotProps} from 'react-aria-components';\nimport {createContext, forwardRef} from 'react';\nimport {DOMProps, DOMRef, DOMRefValue} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {getAllowedOverrides, StylesPropWithoutWidth, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {Image} from './Image';\nimport {style} from '../style' with { type: 'macro' };\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface AvatarProps extends UnsafeStyles, DOMProps, SlotProps {\n  /** Text description of the avatar. */\n  alt?: string,\n  /** The image URL for the avatar. */\n  src?: string,\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StylesPropWithoutWidth,\n  /**\n   * The size of the avatar.\n   * @default 24\n   */\n  size?: 16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 56 | 64 | 80 | 96 | 112 | (number & {}),\n  /** Whether the avatar is over a color background. */\n  isOverBackground?: boolean\n}\n\nconst imageStyles = style({\n  display: 'flex',\n  alignItems: 'center',\n  borderRadius: 'full',\n  size: 20,\n  flexShrink: 0,\n  flexGrow: 0,\n  disableTapHighlight: true,\n  outlineStyle: {\n    default: 'none',\n    isOverBackground: 'solid'\n  },\n  outlineColor: '--s2-container-bg',\n  outlineWidth: {\n    default: 1,\n    isLarge: 2\n  }\n}, getAllowedOverrides({width: false}));\n\nexport const AvatarContext = createContext<ContextValue<Partial<AvatarProps>, DOMRefValue<HTMLImageElement>>>(null);\n\n/**\n * An avatar is a thumbnail representation of an entity, such as a user or an organization.\n */\nexport const Avatar = forwardRef(function Avatar(props: AvatarProps, ref: DOMRef<HTMLImageElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, AvatarContext);\n  let domRef = useDOMRef(ref);\n  let {\n    alt = '',\n    src,\n    UNSAFE_style,\n    UNSAFE_className = '',\n    size = 24,\n    isOverBackground,\n    slot = 'avatar',\n    ...otherProps\n  } = props;\n  const domProps = filterDOMProps(otherProps);\n\n  let remSize = size / 16 + 'rem';\n  let isLarge = size >= 64;\n  return (\n    <Image\n      {...domProps}\n      ref={domRef}\n      slot={slot}\n      alt={alt}\n      UNSAFE_style={{\n        ...UNSAFE_style,\n        width: remSize,\n        height: remSize\n      }}\n      UNSAFE_className={UNSAFE_className + ' ' +  centerBaselineBefore}\n      styles={imageStyles({isOverBackground, isLarge}, props.styles)}\n      src={src} />\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CSSProperties, ReactNode} from 'react';\nimport {mergeStyles} from '../style/runtime';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\n\ninterface CenterBaselineProps {\n  style?: CSSProperties,\n  styles?: StyleString,\n  children: ReactNode,\n  slot?: string\n}\n\nconst styles = style({\n  display: 'flex',\n  alignItems: 'center'\n});\n\nexport function CenterBaseline(props: CenterBaselineProps): ReactNode {\n  return (\n    <div\n      slot={props.slot}\n      style={props.style}\n      className={mergeStyles(styles, props.styles) + ' ' + centerBaselineBefore}>\n      {props.children}\n    </div>\n  );\n}\n\nexport const centerBaselineBefore = raw('&::before { content: \"\\u00a0\"; width: 0; visibility: hidden }');\n\nexport function centerBaseline(props: Omit<CenterBaselineProps, 'children'> = {}): (icon: ReactNode) => ReactNode {\n  return (icon: ReactNode) => <CenterBaseline {...props}>{icon}</CenterBaseline>;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Checkbox as AriaCheckbox, CheckboxProps as AriaCheckboxProps, CheckboxGroupStateContext, CheckboxRenderProps, ContextValue, useSlottedContext} from 'react-aria-components';\nimport {baseColor, focusRing, space, style} from '../style' with {type: 'macro'};\nimport {CenterBaseline} from './CenterBaseline';\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport {controlBorderRadius, controlFont, controlSize, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {createContext, forwardRef, ReactNode, useContext, useRef} from 'react';\nimport DashIcon from '../ui-icons/Dash';\nimport {FocusableRef, FocusableRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {FormContext, useFormProps} from './Form';\nimport {pressScale} from './pressScale';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\ninterface CheckboxStyleProps {\n  /**\n   * The size of the Checkbox.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** Whether the Checkbox should be displayed with an emphasized style. */\n  isEmphasized?: boolean\n}\n\ninterface RenderProps extends CheckboxRenderProps, CheckboxStyleProps {}\n\nexport interface CheckboxProps extends Omit<AriaCheckboxProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps, CheckboxStyleProps {\n  /** The label for the element. */\n  children?: ReactNode\n}\n\nexport const CheckboxContext = createContext<ContextValue<Partial<CheckboxProps>, FocusableRefValue<HTMLLabelElement>>>(null);\n\nconst wrapper = style({\n  display: 'flex',\n  position: 'relative',\n  columnGap: 'text-to-control',\n  alignItems: 'baseline',\n  width: 'fit',\n  font: controlFont(),\n  transition: 'colors',\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: {\n      default: 'disabled',\n      forcedColors: 'GrayText'\n    }\n  },\n  gridColumnStart: {\n    isInForm: 'field'\n  },\n  disableTapHighlight: true\n}, getAllowedOverrides());\n\nexport const box = style<RenderProps>({\n  ...focusRing(),\n  ...controlBorderRadius('sm'),\n  size: controlSize('sm'),\n  flexShrink: 0,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  borderWidth: space(2),\n  boxSizing: 'border-box',\n  borderStyle: 'solid',\n  transition: 'default',\n  forcedColorAdjust: 'none',\n  backgroundColor: {\n    default: 'gray-25',\n    forcedColors: 'Background',\n    isSelected: {\n      default: baseColor('neutral'),\n      isEmphasized: baseColor('accent-900'),\n      forcedColors: 'Highlight',\n      isInvalid: {\n        default: baseColor('negative-900'),\n        forcedColors: 'Mark'\n      },\n      isDisabled: {\n        default: 'gray-400',\n        forcedColors: 'GrayText'\n      }\n    }\n  },\n  borderColor: {\n    default: baseColor('gray-800'),\n    forcedColors: 'ButtonBorder',\n    isInvalid: {\n      default: baseColor('negative'),\n      forcedColors: 'Mark'\n    },\n    isDisabled: {\n      default: 'gray-400',\n      forcedColors: 'GrayText'\n    },\n    isSelected: 'transparent'\n  }\n});\n\nexport const iconStyles = style({\n  '--iconPrimary': {\n    type: 'fill',\n    value: {\n      default: 'gray-25',\n      forcedColors: 'HighlightText'\n    }\n  }\n});\n\nconst iconSize = {\n  S: 'XS',\n  M: 'S',\n  L: 'M',\n  XL: 'L'\n} as const;\n\n/**\n * Checkboxes allow users to select multiple items from a list of individual items,\n * or to mark one individual item as selected.\n */\nexport const Checkbox = forwardRef(function Checkbox({children, ...props}: CheckboxProps, ref: FocusableRef<HTMLLabelElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, CheckboxContext);\n  let boxRef = useRef(null);\n  let inputRef = useRef<HTMLInputElement | null>(null);\n  let domRef = useFocusableRef(ref, inputRef);\n  let isInForm = !!useContext(FormContext);\n  props = useFormProps(props);\n  let isInCheckboxGroup = !!useContext(CheckboxGroupStateContext);\n  let ctx = useSlottedContext(CheckboxContext, props.slot);\n\n  return (\n    <AriaCheckbox\n      {...props}\n      ref={domRef}\n      inputRef={inputRef}\n      style={props.UNSAFE_style}\n      className={renderProps => (props.UNSAFE_className || '') + wrapper({...renderProps, isInForm, size: props.size || 'M'}, props.styles)}>\n      {renderProps => {\n        let checkbox = (\n          <div\n            ref={boxRef}\n            style={pressScale(boxRef)(renderProps)}\n            className={box({\n              ...renderProps,\n              isSelected: renderProps.isSelected || renderProps.isIndeterminate,\n              size: props.size || 'M',\n              isEmphasized: isInCheckboxGroup ? ctx?.isEmphasized : props.isEmphasized\n            })}>\n            {renderProps.isIndeterminate &&\n              <DashIcon size={iconSize[props.size || 'M']} className={iconStyles} />\n            }\n            {renderProps.isSelected && !renderProps.isIndeterminate &&\n              <CheckmarkIcon size={iconSize[props.size || 'M']} className={iconStyles} />\n            }\n          </div>\n        );\n\n        // Only render checkbox without center baseline if no label.\n        // This avoids expanding the checkbox height to the font's line height.\n        if (!children) {\n          return checkbox;\n        }\n\n        return (\n          <>\n            <CenterBaseline>\n              {checkbox}\n            </CenterBaseline>\n            {children}\n          </>\n        );\n      }}\n    </AriaCheckbox>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport Dash_L from './S2_DashSize200.svg';\nimport Dash_M from './S2_DashSize100.svg';\nimport Dash_S from './S2_DashSize75.svg';\nimport Dash_XL from './S2_DashSize300.svg';\nimport Dash_XS from './S2_DashSize50.svg';\nimport {ReactNode, SVGProps} from 'react';\nimport {style} from '../style' with {type: 'macro'};\n\nlet styles = style({\n  width: {\n    size: {\n      M: 10,\n      L: 12,\n      XL: 12,\n      XS: 8,\n      S: 8\n    }\n  },\n  height: {\n    size: {\n      M: 10,\n      L: 12,\n      XL: 12,\n      XS: 8,\n      S: 8\n    }\n  }\n});\n\nexport default function Dash(props: SVGProps<SVGSVGElement> & {size?: 'M' | 'L' | 'XL' | 'XS' | 'S'}): ReactNode {\n  let {size = 'M', ...otherProps} = props;\n  switch (size) {\n    case 'M':\n      return <Dash_M {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'L':\n      return <Dash_L {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XL':\n      return <Dash_XL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XS':\n      return <Dash_XS {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'S':\n      return <Dash_S {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n  }\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createContext, forwardRef, ReactNode, useContext, useMemo} from 'react';\nimport {DOMRef, GlobalDOMAttributes, SpectrumLabelableProps} from '@react-types/shared';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {Form as RACForm, FormProps as RACFormProps} from 'react-aria-components';\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useIsSkeleton} from './Skeleton';\n\ninterface FormStyleProps extends Omit<SpectrumLabelableProps, 'label' | 'contextualHelp'> {\n  /**\n   * Size of the Form elements.\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** Whether the Form elements are disabled. */\n  isDisabled?: boolean,\n  /** Whether the Form elements are rendered with their emphasized style. */\n  isEmphasized?: boolean\n}\n\nexport interface FormProps extends FormStyleProps, Omit<RACFormProps, 'className' | 'style' | 'children' | keyof GlobalDOMAttributes>, StyleProps {\n  children: ReactNode\n}\n\nexport const FormContext = createContext<Partial<FormStyleProps | null>>(null);\nexport function useFormProps<T extends FormStyleProps>(props: T): T {\n  let ctx = useContext(FormContext);\n  let isSkeleton = useIsSkeleton();\n  return useMemo(() => {\n    let result: T = props;\n    if (ctx || isSkeleton) {\n      result = {...props};\n    }\n\n    if (ctx) {\n      // This is a subset of mergeProps. We just need to merge non-undefined values.\n      for (let key in ctx) {\n        if (result[key] === undefined) {\n          result[key] = ctx[key];\n        }\n      }\n    }\n\n    // Skeleton always wins over local props.\n    if (isSkeleton) {\n      result.isDisabled = true;\n    }\n\n    return result;\n  }, [ctx, props, isSkeleton]);\n}\n\n/**\n * Forms allow users to enter data that can be submitted while providing alignment and styling for form fields.\n */\nexport const Form = /*#__PURE__*/ forwardRef(function Form(props: FormProps, ref: DOMRef<HTMLFormElement>) {\n  let {\n    labelPosition = 'top',\n    labelAlign,\n    necessityIndicator,\n    isRequired,\n    isDisabled,\n    isEmphasized,\n    size = 'M',\n    ...formProps\n  } = props;\n  let domRef = useDOMRef(ref);\n\n  return (\n    <RACForm\n      {...formProps}\n      ref={domRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + style({\n        display: 'grid',\n        gridTemplateColumns: {\n          labelPosition: {\n            top: ['[field] 1fr'],\n            side: ['[label] auto', '[field] 1fr']\n          }\n        },\n        // TODO: confirm when we have tokens\n        rowGap: {\n          size: {\n            XS: 16,\n            S: 20,\n            M: 24,\n            L: 32,\n            XL: 40\n          }\n        },\n        columnGap: 'text-to-control'\n      }, getAllowedOverrides())({labelPosition, size}, props.styles)}>\n      <FormContext.Provider\n        value={{\n          labelPosition,\n          labelAlign,\n          necessityIndicator,\n          isRequired,\n          isDisabled,\n          isEmphasized,\n          size\n        }}>\n        {props.children}\n      </FormContext.Provider>\n    </RACForm>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Menu as AriaMenu,\n  MenuItem as AriaMenuItem,\n  MenuItemProps as AriaMenuItemProps,\n  MenuProps as AriaMenuProps,\n  MenuSection as AriaMenuSection,\n  MenuSectionProps as AriaMenuSectionProps,\n  MenuTrigger as AriaMenuTrigger,\n  MenuTriggerProps as AriaMenuTriggerProps,\n  SubmenuTrigger as AriaSubmenuTrigger,\n  SubmenuTriggerProps as AriaSubmenuTriggerProps,\n  ContextValue,\n  DEFAULT_SLOT,\n  MenuItemRenderProps,\n  Provider,\n  Separator,\n  SeparatorProps\n} from 'react-aria-components';\nimport {baseColor, edgeToText, focusRing, fontRelative, size, space, style} from '../style' with {type: 'macro'};\nimport {box, iconStyles} from './Checkbox';\nimport {centerBaseline} from './CenterBaseline';\nimport {centerPadding, control, controlFont, controlSize, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport ChevronRightIcon from '../ui-icons/Chevron';\nimport {createContext, forwardRef, JSX, ReactNode, useContext, useRef, useState} from 'react';\nimport {divider} from './Divider';\nimport {DOMRef, DOMRefValue, GlobalDOMAttributes, PressEvent} from '@react-types/shared';\nimport {forwardRefType} from './types';\nimport {HeaderContext, HeadingContext, KeyboardContext, Text, TextContext} from './Content';\nimport {IconContext} from './Icon'; // chevron right removed??\nimport {ImageContext} from './Image';\nimport {InPopoverContext, Popover, PopoverContext} from './Popover';\nimport LinkOutIcon from '../ui-icons/LinkOut';\nimport {mergeStyles} from '../style/runtime';\nimport {Placement, useLocale} from 'react-aria';\nimport {PressResponder} from '@react-aria/interactions';\nimport {pressScale} from './pressScale';\nimport {useGlobalListeners} from '@react-aria/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n// viewbox on LinkOut is super weird just because i copied the icon from designs...\n// need to strip id's from icons\n\nexport interface MenuTriggerProps extends AriaMenuTriggerProps {\n  /**\n   * Alignment of the menu relative to the trigger.\n   *\n   * @default 'start'\n   */\n  align?: 'start' | 'end',\n  /**\n   * Where the Menu opens relative to its trigger.\n   *\n   * @default 'bottom'\n   */\n  direction?: 'bottom' | 'top' | 'left' | 'right' | 'start' | 'end',\n  /**\n   * Whether the menu should automatically flip direction when space is limited.\n   *\n   * @default true\n   */\n  shouldFlip?: boolean\n}\n\nexport interface MenuProps<T> extends Omit<AriaMenuProps<T>, 'children' | 'style' | 'className' | 'dependencies' | 'renderEmptyState' | keyof GlobalDOMAttributes>, StyleProps {\n  /**\n   * The size of the Menu.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /**\n   * The contents of the collection.\n   */\n  children: ReactNode | ((item: T) => ReactNode),\n  /** Hides the default link out icons on menu items that open links in a new tab. */\n  hideLinkOutIcon?: boolean\n}\n\nexport const MenuContext = createContext<ContextValue<Partial<MenuProps<any>>, DOMRefValue<HTMLDivElement>>>(null);\n\nconst menuItemGrid = {\n  size: {\n    S: [edgeToText(24), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(24)],\n    M: [edgeToText(32), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(32)],\n    L: [edgeToText(40), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(40)],\n    XL: [edgeToText(48), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(48)]\n  }\n} as const;\n\nexport let menu = style({\n  outlineStyle: 'none',\n  display: 'grid',\n  gridTemplateColumns: menuItemGrid,\n  boxSizing: 'border-box',\n  maxHeight: 'inherit',\n  width: 'full',\n  overflow: {\n    isPopover: 'auto'\n  },\n  maxWidth: {\n    isPopover: 320\n  },\n  padding: {\n    isPopover: 8\n  },\n  fontFamily: 'sans',\n  fontSize: controlFont(),\n  gridAutoRows: 'min-content'\n}, getAllowedOverrides());\n\nexport let section = style({\n  gridColumnStart: 1,\n  gridColumnEnd: -1,\n  alignItems: 'center',\n  display: 'grid',\n  gridTemplateAreas: [\n    '. checkmark icon label       value keyboard descriptor .',\n    '. .         .    description .     .        .          .'\n  ],\n  gridTemplateColumns: menuItemGrid\n});\n\nexport let sectionHeader = style<{size?: 'S' | 'M' | 'L' | 'XL'}>({\n  color: 'neutral',\n  gridColumnStart: 2,\n  gridColumnEnd: -2,\n  boxSizing: 'border-box',\n  minHeight: controlSize(),\n  paddingY: centerPadding()\n});\n\nexport let sectionHeading = style({\n  font: 'ui',\n  fontWeight: 'bold',\n  margin: 0\n});\n\nexport let menuitem = style<Omit<MenuItemRenderProps, 'hasSubmenu' | 'isOpen'> & {isFocused: boolean, size: 'S' | 'M' | 'L' | 'XL', isLink?: boolean, hasSubmenu?: boolean, isOpen?: boolean}>({\n  ...focusRing(),\n  ...control({shape: 'default', wrap: true, icon: true}),\n  columnGap: 0,\n  paddingX: 0,\n  paddingBottom: '--labelPadding',\n  backgroundColor: { // TODO: revisit color when I have access to dev mode again\n    default: {\n      default: 'transparent',\n      isFocused: baseColor('gray-100').isFocusVisible\n    }\n  },\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: {\n      default: 'disabled',\n      forcedColors: 'GrayText'\n    }\n  },\n  position: 'relative',\n  // each menu item should take up the entire width, the subgrid will handle within the item\n  gridColumnStart: 1,\n  gridColumnEnd: -1,\n  display: 'grid',\n  gridTemplateAreas: [\n    '. checkmark icon label       value keyboard descriptor .',\n    '. .         .    description .     .        .          .'\n  ],\n  gridTemplateColumns: 'subgrid',\n  gridTemplateRows: {\n    // min-content prevents second row from 'auto'ing to a size larger then 0 when empty\n    default: 'auto minmax(0, min-content)',\n    ':has([slot=description])': 'auto auto'\n  },\n  rowGap: {\n    ':has([slot=description])': space(1)\n  },\n  height: 'min',\n  textDecoration: 'none',\n  cursor: {\n    default: 'default',\n    isLink: 'pointer'\n  },\n  transition: 'default'\n}, getAllowedOverrides());\n\nexport let checkmark = style({\n  visibility: {\n    default: 'hidden',\n    isSelected: 'visible'\n  },\n  gridArea: 'checkmark',\n  color: baseColor('accent'),\n  '--iconPrimary': {\n    type: 'fill',\n    value: {\n      default: 'currentColor',\n      forcedColors: 'Highlight'\n    }\n  },\n  marginEnd: 'text-to-control',\n  aspectRatio: 'square'\n});\n\nexport let checkbox = style({\n  gridArea: 'checkmark',\n  marginEnd: 'text-to-control'\n});\n\nexport let icon = style({\n  display: 'block',\n  size: fontRelative(20),\n  // too small default icon size is wrong, it's like the icons are 1 tshirt size bigger than the rest of the component? check again after typography changes\n  // reminder, size of WF is applied via font size\n  marginEnd: 'text-to-visual',\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nexport let iconCenterWrapper = style({\n  display: 'flex',\n  gridArea: 'icon'\n});\n\nlet image = style({\n  gridArea: 'icon',\n  gridRowEnd: 'span 2',\n  marginEnd: 'text-to-visual',\n  marginTop: fontRelative(6), // made up, need feedback\n  alignSelf: 'center',\n  borderRadius: 'sm',\n  size: {\n    default: 40,\n    size: {\n      S: 32,\n      M: 40,\n      L: 44,\n      XL: 48 // TODO: feedback, Why is it 50x50, that's on 12.25 so doesn't fit the grid at all\n    }\n  },\n  aspectRatio: 'square',\n  objectFit: 'contain'\n});\n\nexport let label = style<{size: string}>({\n  gridArea: 'label',\n  font: controlFont(),\n  color: 'inherit',\n  fontWeight: 'medium',\n  // TODO: token values for padding not defined yet, revisit\n  marginTop: '--labelPadding'\n});\n\nexport let description = style({\n  gridArea: 'description',\n  font: {\n    default: 'ui-sm',\n    size: {\n      S: 'ui-xs',\n      M: 'ui-sm',\n      L: 'ui',\n      XL: 'ui-lg'\n    }\n  },\n  color: {\n    default: baseColor('neutral-subdued'),\n    // Ideally this would use the same token as hover, but we don't have access to that here.\n    // TODO: should we always consider isHovered and isFocused to be the same thing?\n    isFocused: 'gray-800',\n    isDisabled: 'disabled'\n  },\n  transition: 'default'\n});\n\nlet value = style({\n  gridArea: 'value',\n  marginStart: 8\n});\n\nlet keyboard = style<{size: 'S' | 'M' | 'L' | 'XL', isDisabled: boolean}>({\n  gridArea: 'keyboard',\n  marginStart: 8,\n  font: 'ui',\n  textAlign: 'end',\n  color: {\n    default: 'gray-600',\n    isDisabled: 'disabled',\n    forcedColors: {\n      isDisabled: 'GrayText'\n    }\n  },\n  unicodeBidi: 'plaintext'\n});\n\nlet descriptor = style({\n  gridArea: 'descriptor',\n  marginStart: 8,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nlet InternalMenuContext = createContext<{size: 'S' | 'M' | 'L' | 'XL', isSubmenu: boolean, hideLinkOutIcon: boolean}>({\n  size: 'M',\n  isSubmenu: false,\n  hideLinkOutIcon: false\n});\n\nlet InternalMenuTriggerContext = createContext<Omit<MenuTriggerProps, 'children'> | null>(null);\n\nlet wrappingDiv = style({\n  display: 'flex',\n  size: 'full'\n});\n\n/**\n * Menus display a list of actions or options that a user can choose.\n */\nexport const Menu = /*#__PURE__*/ (forwardRef as forwardRefType)(function Menu<T extends object>(props: MenuProps<T>, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, MenuContext);\n  let {isSubmenu, size: ctxSize} = useContext(InternalMenuContext);\n  let {\n    children,\n    size = ctxSize,\n    UNSAFE_style,\n    UNSAFE_className,\n    styles,\n    hideLinkOutIcon = false\n  } = props;\n  let ctx = useContext(InternalMenuTriggerContext);\n  let inPopover = useContext(InPopoverContext);\n\n  let isPopover = (ctx || isSubmenu) && !inPopover;\n  let content = (\n    <InternalMenuContext.Provider value={{size, isSubmenu: true, hideLinkOutIcon}}>\n      <Provider\n        values={[\n          [HeaderContext, {styles: sectionHeader({size})}],\n          [HeadingContext, {\n            // @ts-ignore\n            role: 'presentation',\n            styles: sectionHeading\n          }],\n          [TextContext, {\n            slots: {\n              'description': {styles: description({size})}\n            }\n          }],\n          [InPopoverContext, false]\n        ]}>\n        <AriaMenu\n          {...props}\n          className={menu({size, isPopover}, isPopover ? null : styles)}>\n          {children}\n        </AriaMenu>\n      </Provider>\n    </InternalMenuContext.Provider>\n  );\n\n  if (isPopover) {\n    return (\n      <Popover\n        ref={ref}\n        padding=\"none\"\n        hideArrow>\n        <div\n          style={UNSAFE_style}\n          className={(UNSAFE_className || '') + wrappingDiv}>\n          {content}\n        </div>\n      </Popover>\n    );\n  }\n\n  return content;\n});\n\nexport function Divider(props: SeparatorProps): ReactNode {\n  return (\n    <Separator\n      {...props}\n      className={mergeStyles(\n        divider({\n          size: 'M',\n          orientation: 'horizontal',\n          isStaticColor: false\n        }), style({\n          display: {\n            default: 'grid',\n            ':last-child': 'none'\n          },\n          gridColumnStart: 2,\n          gridColumnEnd: -2,\n          marginY: size(5) // height of the menu separator is 12px, and the divider is 2px\n        })\n      )} />\n  );\n}\n\nexport interface MenuSectionProps<T extends object> extends Omit<AriaMenuSectionProps<T>, keyof GlobalDOMAttributes> {}\nexport function MenuSection<T extends object>(props: MenuSectionProps<T>): ReactNode {\n  // remember, context doesn't work if it's around Section nor inside\n  let {size} = useContext(InternalMenuContext);\n  return (\n    <>\n      <AriaMenuSection\n        {...props}\n        className={section({size})}>\n        {props.children}\n      </AriaMenuSection>\n      <Divider />\n    </>\n  );\n}\n\nexport interface MenuItemProps extends Omit<AriaMenuItemProps, 'children' | 'style' | 'className' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps {\n  /**\n   * The contents of the item.\n   */\n  children: ReactNode\n}\n\nconst checkmarkIconSize = {\n  S: 'XS',\n  M: 'M',\n  L: 'L',\n  XL: 'XL'\n} as const;\n\nconst linkIconSize = {\n  S: 'M',\n  M: 'L',\n  L: 'XL',\n  XL: 'XL'\n} as const;\n\nexport function MenuItem(props: MenuItemProps): ReactNode {\n  let ref = useRef(null);\n  let isLink = props.href != null;\n  let isLinkOut = isLink && props.target === '_blank';\n  let {size, hideLinkOutIcon} = useContext(InternalMenuContext);\n  let textValue = props.textValue || (typeof props.children === 'string' ? props.children : undefined);\n  let {direction} = useLocale();\n  return (\n    <AriaMenuItem\n      {...props}\n      textValue={textValue}\n      ref={ref}\n      style={pressScale(ref, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + menuitem({...renderProps, isFocused: (renderProps.hasSubmenu && renderProps.isOpen) || renderProps.isFocused, size, isLink}, props.styles)}>\n      {(renderProps) => {\n        let {children} = props;\n        let checkboxRenderProps = {...renderProps, size, isFocused: false, isFocusVisible: false, isIndeterminate: false, isReadOnly: false, isInvalid: false, isRequired: false};\n        return (\n          <>\n            <Provider\n              values={[\n                [IconContext, {\n                  slots: {\n                    icon: {render: centerBaseline({slot: 'icon', styles: iconCenterWrapper}), styles: icon},\n                    descriptor: {render: centerBaseline({slot: 'descriptor', styles: descriptor})} // TODO: remove once we have default?\n                  }\n                }],\n                [TextContext, {\n                  slots: {\n                    [DEFAULT_SLOT]: {styles: label({size})},\n                    label: {styles: label({size})},\n                    description: {styles: description({...renderProps, size})},\n                    value: {styles: value}\n                  }\n                }],\n                [KeyboardContext, {styles: keyboard({size, isDisabled: renderProps.isDisabled})}],\n                [ImageContext, {styles: image({size})}]\n              ]}>\n              {renderProps.selectionMode === 'single' && !renderProps.hasSubmenu && <CheckmarkIcon size={checkmarkIconSize[size]} className={checkmark({...renderProps, size})} />}\n              {renderProps.selectionMode === 'multiple' && !renderProps.hasSubmenu && (\n                <div className={mergeStyles(checkbox, box(checkboxRenderProps))}>\n                  <CheckmarkIcon size={size} className={iconStyles} />\n                </div>\n              )}\n              {typeof children === 'string' ? <Text slot=\"label\">{children}</Text> : children}\n              {isLinkOut && !hideLinkOutIcon && (\n                <div slot=\"descriptor\" className={descriptor}>\n                  <LinkOutIcon\n                    size={linkIconSize[size]}\n                    className={style({\n                      scaleX: {\n                        direction: {\n                          rtl: -1\n                        }\n                      }\n                    })({direction})} />\n                </div>\n              )}\n              {renderProps.hasSubmenu && (\n                <div slot=\"descriptor\" className={descriptor}>\n                  <ChevronRightIcon\n                    size={size}\n                    className={style({\n                      scaleX: {\n                        direction: {\n                          rtl: -1\n                        }\n                      }\n                    })({direction})} />\n                </div>\n              )}\n            </Provider>\n          </>\n        );\n      }}\n    </AriaMenuItem>\n  );\n}\n\n/**\n * The MenuTrigger serves as a wrapper around a Menu and its associated trigger,\n * linking the Menu's open state with the trigger's press state.\n */\nfunction MenuTrigger(props: MenuTriggerProps): ReactNode {\n  // RAC sets isPressed via PressResponder when the menu is open.\n  // We don't want press scaling to appear to get \"stuck\", so override this.\n  // For mouse interactions, menus open on press start. When the popover underlay appears\n  // it covers the trigger button, causing onPressEnd to fire immediately and no press scaling\n  // to occur. We override this by listening for pointerup on the document ourselves.\n  let [isPressed, setPressed] = useState(false);\n  let {addGlobalListener} = useGlobalListeners();\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType !== 'mouse') {\n      return;\n    }\n    setPressed(true);\n    addGlobalListener(document, 'pointerup', () => {\n      setPressed(false);\n    }, {once: true, capture: true});\n  };\n\n  let {align = 'start', direction = 'bottom', shouldFlip} = props;\n  let placement: Placement;\n  switch (direction) {\n    case 'left':\n    case 'right':\n    case 'start':\n    case 'end':\n      placement = `${direction} ${align === 'end' ? 'bottom' : 'top'}` as Placement;\n      break;\n    case 'bottom':\n    case 'top':\n    default:\n      placement = `${direction} ${align}` as Placement;\n  }\n\n  return (\n    <InternalMenuTriggerContext.Provider\n      value={{\n        align: props.align,\n        direction: props.direction,\n        shouldFlip: props.shouldFlip\n      }}>\n      <PopoverContext.Provider value={{hideArrow: true, offset: 8, crossOffset: 0, placement, shouldFlip}}>\n        <AriaMenuTrigger {...props}>\n          <PressResponder onPressStart={onPressStart} isPressed={isPressed}>\n            {props.children}\n          </PressResponder>\n        </AriaMenuTrigger>\n      </PopoverContext.Provider>\n    </InternalMenuTriggerContext.Provider>\n  );\n}\n\nexport interface SubmenuTriggerProps extends Omit<AriaSubmenuTriggerProps, 'delay'> {}\n\nfunction SubmenuTrigger(props: SubmenuTriggerProps): JSX.Element {\n  // For submenus, the offset from the edge of the popover should be 10px.\n  // Subtract 8px for the padding around the parent menu.\n  // Offset by padding + border so that the first item in a submenu lines up with the parent menu item.\n  return (\n    <AriaSubmenuTrigger {...props}>\n      {props.children[0]}\n      <PopoverContext.Provider value={{hideArrow: true, offset: -2, crossOffset: -8, placement: 'end top'}}>\n        {props.children[1]}\n      </PopoverContext.Provider>\n    </AriaSubmenuTrigger>\n  );\n}\n\nexport {MenuTrigger, SubmenuTrigger};\n\n// This is purely so that storybook generates the types for both Menu and MenuTrigger\ninterface ICombined<T extends object> extends MenuProps<T>, Omit<MenuTriggerProps, 'children'> {}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CombinedMenu<T extends object>(props: ICombined<T>): ReactNode {\n  return <div />;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport Chevron_L from './S2_ChevronSize200.svg';\nimport Chevron_M from './S2_ChevronSize100.svg';\nimport Chevron_S from './S2_ChevronSize75.svg';\nimport Chevron_XL from './S2_ChevronSize300.svg';\nimport Chevron_XS from './S2_ChevronSize50.svg';\nimport Chevron_XXL from './S2_ChevronSize400.svg';\nimport {ReactNode, SVGProps} from 'react';\nimport {style} from '../style' with {type: 'macro'};\n\nlet styles = style({\n  width: {\n    size: {\n      M: 10,\n      L: 12,\n      XL: 14,\n      XXL: 16,\n      XS: 6,\n      S: 10\n    }\n  },\n  height: {\n    size: {\n      M: 10,\n      L: 12,\n      XL: 14,\n      XXL: 16,\n      XS: 6,\n      S: 10\n    }\n  }\n});\n\nexport default function Chevron(props: SVGProps<SVGSVGElement> & {size?: 'M' | 'L' | 'XL' | 'XXL' | 'XS' | 'S'}): ReactNode {\n  let {size = 'M', ...otherProps} = props;\n  switch (size) {\n    case 'M':\n      return <Chevron_M {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'L':\n      return <Chevron_L {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XL':\n      return <Chevron_XL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XXL':\n      return <Chevron_XXL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XS':\n      return <Chevron_XS {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'S':\n      return <Chevron_S {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n  }\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps} from '@react-types/shared';\nimport {ComponentType, Context, createContext, FunctionComponent, ReactNode, SVGProps, useRef} from 'react';\nimport {ContextValue, SlotProps} from 'react-aria-components';\nimport {mergeStyles} from '../style/runtime';\nimport {SkeletonWrapper, useSkeletonIcon} from './Skeleton';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\nimport {UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\n// Custom list of overrides, excluding width/height/flexGrow/flexShrink/flexBasis\nconst allowedOverrides = [\n  'margin',\n  'marginStart',\n  'marginEnd',\n  'marginTop',\n  'marginBottom',\n  'marginX',\n  'marginY',\n  'justifySelf',\n  'alignSelf',\n  'order',\n  'gridArea',\n  'gridRowStart',\n  'gridRowEnd',\n  'gridColumnStart',\n  'gridColumnEnd',\n  'position',\n  'zIndex',\n  'top',\n  'bottom',\n  'inset',\n  'insetX',\n  'insetY',\n  'insetStart',\n  'insetEnd',\n  'rotate',\n  '--iconPrimary',\n  'size'\n] as const;\n\n// Omit --iconPrimary and size from type (they are private).\n// Use the iconStyle() macro to apply them.\ntype AllowedOverrides = Exclude<(typeof allowedOverrides)[number], '--iconPrimary' | 'size'>;\n\nexport interface IconProps extends UnsafeStyles, SlotProps, AriaLabelingProps, DOMProps {\n  'aria-hidden'?: boolean | 'false' | 'true',\n  styles?: StyleString<AllowedOverrides>\n}\n\nexport interface IconContextValue extends UnsafeStyles, SlotProps {\n  styles?: StyleString,\n  render?: (icon: ReactNode) => ReactNode\n}\n\nexport interface IllustrationProps extends UnsafeStyles, SlotProps, AriaLabelingProps, DOMProps {\n  'aria-hidden'?: boolean | 'false' | 'true',\n  size?: 'S' | 'M' | 'L',\n  styles?: StyleString<AllowedOverrides>\n}\n\nexport interface IllustrationContextValue extends IconContextValue {\n  size?: 'S' | 'M' | 'L'\n}\n\nexport const IconContext = createContext<ContextValue<Partial<IconContextValue>, SVGElement>>({});\nexport const IllustrationContext = createContext<ContextValue<Partial<IllustrationContextValue>, SVGElement>>({});\n\nconst iconStyles = style({\n  size: 20,\n  flexShrink: 0\n}, allowedOverrides);\n\nexport function createIcon(Component: ComponentType<SVGProps<SVGSVGElement>>, context: Context<ContextValue<IconContextValue, SVGElement>> = IconContext): FunctionComponent<IconProps> {\n  return (props: IconProps) => {\n    let ref = useRef<SVGElement>(null);\n    let ctx;\n    // TODO: remove this default once we release RAC and use DEFAULT_SLOT.\n    [ctx, ref] = useSpectrumContextProps({slot: props.slot || 'icon'} as IconContextValue, ref, context);\n    let {render, styles: ctxStyles} = ctx;\n    let {\n      UNSAFE_className,\n      UNSAFE_style,\n      slot,\n      'aria-label': ariaLabel,\n      'aria-hidden': ariaHidden,\n      styles,\n      ...otherProps\n    } = props;\n\n    if (!ariaHidden) {\n      ariaHidden = undefined;\n    }\n\n    let svg = (\n      <SkeletonWrapper>\n        <Component\n          {...otherProps}\n          focusable={false}\n          aria-label={ariaLabel}\n          aria-hidden={ariaLabel ? (ariaHidden || undefined) : true}\n          role=\"img\"\n          data-slot={slot}\n          className={(UNSAFE_className ?? '') + ' ' + useSkeletonIcon(mergeStyles(iconStyles(null, styles), ctxStyles))}\n          style={UNSAFE_style} />\n      </SkeletonWrapper>\n    );\n\n    if (render) {\n      return render(svg);\n    }\n\n    return svg;\n  };\n}\n\nconst illustrationStyles = style({\n  size: {\n    size: {\n      S: 48,\n      M: 96,\n      L: 160\n    }\n  },\n  flexShrink: 0\n}, allowedOverrides);\n\nexport function createIllustration(Component: ComponentType<SVGProps<SVGSVGElement>>): FunctionComponent<IllustrationProps> {\n  return (props: IllustrationProps) => {\n    let ref = useRef<SVGElement>(null);\n    let ctx;\n    [ctx, ref] = useSpectrumContextProps({slot: props.slot || 'icon'} as IconContextValue, ref, IllustrationContext);\n    let {styles: ctxStyles} = ctx;\n    let {\n      UNSAFE_className,\n      UNSAFE_style,\n      slot,\n      'aria-label': ariaLabel,\n      'aria-hidden': ariaHidden,\n      size = ctx.size || 'M',\n      styles,\n      // @ts-ignore\n      render,\n      ...otherProps\n    } = props;\n\n    if (!ariaHidden) {\n      ariaHidden = undefined;\n    }\n\n    let svg = (\n      <Component\n        {...otherProps}\n        // @ts-ignore\n        size={size}\n        focusable={false}\n        aria-label={ariaLabel}\n        aria-hidden={ariaLabel ? (ariaHidden || undefined) : true}\n        role=\"img\"\n        data-slot={slot}\n        className={(UNSAFE_className ?? '') + ' ' + illustrationStyles({size}, styles) + (ctxStyles || '')}\n        style={UNSAFE_style} />\n    );\n\n    if (render) {\n      return render(svg);\n    }\n\n    return svg;\n  };\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Popover as AriaPopover,\n  PopoverProps as AriaPopoverProps,\n  composeRenderProps,\n  ContextValue,\n  DialogProps,\n  OverlayArrow,\n  OverlayTriggerStateContext,\n  useLocale\n} from 'react-aria-components';\nimport {colorScheme, getAllowedOverrides, heightProperties, UnsafeStyles, widthProperties} from './style-utils' with {type: 'macro'};\nimport {ColorSchemeContext} from './Provider';\nimport {createContext, ForwardedRef, forwardRef, useCallback, useContext, useMemo} from 'react';\nimport {DOMRef, DOMRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {lightDark, style} from '../style' with {type: 'macro'};\nimport {mergeRefs} from '@react-aria/utils';\nimport {mergeStyles} from '../style/runtime';\nimport {StyleString} from '../style/types' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface PopoverProps extends UnsafeStyles, Omit<AriaPopoverProps, 'arrowSize' | 'isNonModal' | 'arrowBoundaryOffset' | 'isKeyboardDismissDisabled' | 'shouldCloseOnInteractOutside' | 'shouldUpdatePosition' | keyof GlobalDOMAttributes> {\n  styles?: StyleString,\n  /**\n   * Whether a popover's arrow should be hidden.\n   *\n   * @default false\n   */\n  hideArrow?: boolean,\n  /**\n   * The size of the Popover. If not specified, the popover fits its contents.\n   */\n  size?: 'S' | 'M' | 'L'\n  /** The type of overlay that should be rendered when on a mobile device. */\n  // mobileType?: 'modal' | 'fullscreen' | 'fullscreenTakeover' // TODO: add tray back in\n}\n\nlet popover = style({\n  ...colorScheme(),\n  '--s2-container-bg': {\n    type: 'backgroundColor',\n    value: 'layer-2'\n  },\n  backgroundColor: '--s2-container-bg',\n  borderRadius: 'lg',\n  filter: {\n    isArrowShown: 'elevated'\n  },\n  // Use box-shadow instead of filter when an arrow is not shown.\n  // This fixes the shadow stacking problem with submenus.\n  boxShadow: {\n    default: 'elevated',\n    isArrowShown: 'none'\n  },\n  outlineStyle: 'solid',\n  outlineWidth: 1,\n  outlineColor: {\n    default: lightDark('transparent-white-25', 'gray-200'),\n    forcedColors: 'ButtonBorder'\n  },\n  width: {\n    size: {\n      // Copied from designs, not sure if correct.\n      S: 336,\n      M: 416,\n      L: 576\n    }\n  },\n  // Don't be larger than full screen minus 2 * containerPadding\n  maxWidth: 'calc(100vw - 24px)',\n  boxSizing: 'border-box',\n  display: 'flex',\n  opacity: {\n    isEntering: 0,\n    isExiting: 0\n  },\n  translateY: {\n    placement: {\n      top: {\n        isEntering: 4,\n        isExiting: 4\n      },\n      bottom: {\n        isEntering: -4,\n        isExiting: -4\n      }\n    },\n    isSubmenu: 0\n  },\n  translateX: {\n    placement: {\n      left: {\n        isEntering: 4,\n        isExiting: 4\n      },\n      right: {\n        isEntering: -4,\n        isExiting: -4\n      }\n    },\n    isSubmenu: 0\n  },\n  transition: '[opacity, translate]',\n  transitionDuration: 200,\n  transitionTimingFunction: {\n    isExiting: 'in'\n  },\n  isolation: 'isolate',\n  pointerEvents: {\n    isExiting: 'none'\n  }\n}, getAllowedOverrides());\n// TODO: animations and real Popover Arrow\n\nlet arrow = style({\n  display: 'block',\n  fill: '--s2-container-bg',\n  width: 18,\n  height: 9,\n  rotate: {\n    default: 180,\n    placement: {\n      top: 0,\n      bottom: 180,\n      left: -90,\n      right: 90\n    }\n  },\n  translateX: {\n    placement: {\n      left: -4,\n      right: 4\n    }\n  },\n  strokeWidth: 1,\n  stroke: {\n    default: lightDark('transparent-white-25', 'gray-200'),\n    forcedColors: 'ButtonBorder'\n  }\n});\n\nexport const PopoverContext = createContext<ContextValue<PopoverProps, DOMRefValue<HTMLDivElement>>>(null);\nexport const InPopoverContext = createContext(false);\n\nexport const PopoverBase = forwardRef(function PopoverBase(props: PopoverProps, ref: ForwardedRef<HTMLDivElement | null>) {\n  let {\n    hideArrow = false,\n    UNSAFE_className = '',\n    UNSAFE_style,\n    styles,\n    size\n  } = props;\n  let colorScheme = useContext(ColorSchemeContext);\n  let {locale, direction} = useLocale();\n\n  // TODO: should we pass through lang and dir props in RAC?\n  let popoverRef = useCallback((el: HTMLDivElement) => {\n    if (el) {\n      el.lang = locale;\n      el.dir = direction;\n    }\n  }, [locale, direction]);\n  // Memoed so it doesn't break ComboBox/Picker scrolling\n  let mergedRef = useMemo(() => mergeRefs(popoverRef, ref), [ref, popoverRef]);\n\n  // On small devices, show a modal (or eventually a tray) instead of a popover.\n  // TODO: reverted this until we have trays.\n  // let isMobile = useIsMobileDevice();\n  // if (isMobile && process.env.NODE_ENV !== 'test') {\n  //   let mappedChildren = typeof children === 'function'\n  //     ? (renderProps: ModalRenderProps) => children({...renderProps, defaultChildren: null, trigger, placement: 'bottom'})\n  //     : children;\n\n  //   return (\n  //     <Modal size={size} isDismissable>\n  //       {composeRenderProps(mappedChildren, (children, {state}) => (\n  //         <>\n  //           {children}\n  //           {/* Add additional dismiss button at the end to match popovers. */}\n  //           <DismissButton onDismiss={state.close} />\n  //         </>\n  //       ))}\n  //     </Modal>\n  //   );\n  // }\n\n  // TODO: this still isn't the final popover 'tip', copying various ones out of the designs files yields different results\n  // containerPadding not working as expected\n  return (\n    <AriaPopover\n      {...props}\n      offset={(props.offset ?? 8) + (hideArrow ? 0 : 8)}\n      ref={mergedRef}\n      style={{\n        ...UNSAFE_style,\n        // Override default z-index from useOverlayPosition. We use isolation: isolate instead.\n        zIndex: undefined\n      }}\n      className={(renderProps) => UNSAFE_className + mergeStyles(popover({...renderProps, size, isArrowShown: !hideArrow, colorScheme, isSubmenu: renderProps.trigger === 'SubmenuTrigger'}), styles)}>\n      {composeRenderProps(props.children, (children, renderProps) => (\n        <>\n          {!hideArrow && (\n            <OverlayArrow>\n              <svg viewBox=\"0 0 18 10\" className={arrow(renderProps)}>\n                <path transform=\"translate(0 -1)\" d=\"M1 1L7.93799 8.52588C8.07224 8.67448 8.23607 8.79362 8.41895 8.87524C8.60182 8.95687 8.79973 8.9993 9 9C9.19984 8.99882 9.39724 8.95606 9.57959 8.87427C9.76193 8.79248 9.9253 8.67336 10.0591 8.5249L17 1\" />\n              </svg>\n            </OverlayArrow>\n          )}\n          <InPopoverContext.Provider value>\n            {children}\n          </InPopoverContext.Provider>\n        </>\n      ))}\n    </AriaPopover>\n  );\n});\n\ntype PopoverStylesProp = StyleString<((typeof widthProperties)[number] | (typeof heightProperties)[number])>;\nexport interface PopoverDialogProps extends Pick<PopoverProps, 'children' | 'size' | 'hideArrow'| 'placement' | 'shouldFlip' | 'containerPadding' | 'offset' | 'crossOffset' | 'triggerRef' | 'isOpen' | 'onOpenChange'>, Omit<DialogProps, 'children' | 'className' | 'style' | keyof GlobalDOMAttributes>, UnsafeStyles {\n  /**\n   * The amount of padding around the contents of the dialog.\n   * @default 'default'\n   */\n  padding?: 'default' | 'none',\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: PopoverStylesProp\n}\n\nconst innerDivStyle = style({\n  padding: {\n    padding: {\n      default: 8,\n      none: 0\n    }\n  },\n  boxSizing: 'border-box',\n  outlineStyle: 'none',\n  borderRadius: 'inherit',\n  overflow: 'auto',\n  position: 'relative',\n  width: 'full',\n  maxSize: 'inherit'\n}, getAllowedOverrides({height: true}));\n\n/**\n * A popover is an overlay element positioned relative to a trigger.\n */\nexport const Popover = forwardRef(function Popover(props: PopoverDialogProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, PopoverContext);\n  let domRef = useDOMRef(ref);\n  let {\n    UNSAFE_className,\n    UNSAFE_style,\n    styles,\n    padding = 'default',\n    ...otherProps\n  } = props;\n\n  return (\n    <PopoverBase {...otherProps} ref={domRef}>\n      {composeRenderProps(props.children, (children) => (\n        <div\n          style={UNSAFE_style}\n          className={(UNSAFE_className || '') + innerDivStyle({padding}, styles)}>\n          {/* Reset OverlayTriggerStateContext so the buttons inside the dialog don't retain their hover state. */}\n          <OverlayTriggerStateContext.Provider value={null}>\n            {children}\n          </OverlayTriggerStateContext.Provider>\n        </div>\n      ))}\n    </PopoverBase>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {ColorScheme, Router} from '@react-types/provider';\nimport {colorScheme, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {createContext, JSX, ReactNode, useContext} from 'react';\nimport {Fonts} from './Fonts';\nimport {generateDefaultColorSchemeStyles} from './page.macro' with {type: 'macro'};\nimport {I18nProvider, RouterProvider, useLocale} from 'react-aria-components';\nimport {mergeStyles} from '../style/runtime';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\n\nexport interface ProviderProps extends UnsafeStyles {\n  /** The content of the Provider. */\n  children: ReactNode,\n  /**\n   * The locale for your application as a [BCP 47](https://www.ietf.org/rfc/bcp/bcp47.txt) language code.\n   * Defaults to the browser/OS language setting.\n   * @default 'en-US'\n   */\n  locale?: string,\n  /**\n   * Provides a client side router to all nested React Spectrum links to enable client side navigation.\n   */\n  router?: Router,\n  /**\n   * The color scheme for your application.\n   * Defaults to operating system preferences.\n   */\n  colorScheme?: ColorScheme,\n  /** The background for this provider. If not provided, the background is transparent. */\n  background?: 'base' | 'layer-1' | 'layer-2',\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StyleString,\n  /**\n   * The DOM element to render.\n   * @default div\n   */\n  elementType?: keyof JSX.IntrinsicElements\n}\n\nexport const ColorSchemeContext = createContext<ColorScheme | 'light dark' | null>(null);\n\nexport function Provider(props: ProviderProps): JSX.Element {\n  let result = <ProviderInner {...props} />;\n  let parentColorScheme = useContext(ColorSchemeContext);\n  let colorScheme = props.colorScheme || parentColorScheme;\n  if (colorScheme !== parentColorScheme) {\n    result = <ColorSchemeContext.Provider value={colorScheme}>{result}</ColorSchemeContext.Provider>;\n  }\n\n  if (props.locale) {\n    result = <I18nProvider locale={props.locale}>{result}</I18nProvider>;\n  }\n\n  if (props.router) {\n    result = <RouterProvider {...props.router}>{result}</RouterProvider>;\n  }\n\n  return result;\n}\n\ngenerateDefaultColorSchemeStyles();\n\nlet providerStyles = style({\n  ...colorScheme(),\n  '--s2-container-bg': {\n    type: 'backgroundColor',\n    value: {\n      background: {\n        base: 'base',\n        'layer-1': 'layer-1',\n        'layer-2': 'layer-2'\n      }\n    }\n  },\n  backgroundColor: {\n    // Don't set a background unless one is requested.\n    background: {\n      base: '--s2-container-bg',\n      'layer-1': '--s2-container-bg',\n      'layer-2': '--s2-container-bg'\n    }\n  },\n  isolation: 'isolate'\n});\n\nfunction ProviderInner(props: ProviderProps) {\n  let {\n    elementType: Element = 'div',\n    UNSAFE_style,\n    UNSAFE_className = '',\n    styles,\n    children,\n    // Set a default background if the provider is rendered as the root <html> element.\n    background = Element === 'html' ? 'base' : undefined,\n    colorScheme\n  } = props;\n  let {locale, direction} = useLocale();\n  return (\n    <Element\n      lang={locale}\n      dir={direction}\n      style={UNSAFE_style}\n      className={UNSAFE_className + mergeStyles(\n        styles,\n        providerStyles({background, colorScheme})\n      )}>\n      <Fonts />\n      {children}\n    </Element>\n  );\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  ComboBox as AriaComboBox,\n  ComboBoxProps as AriaComboBoxProps,\n  ListBoxSection as AriaListBoxSection,\n  PopoverProps as AriaPopoverProps,\n  Button,\n  ButtonRenderProps,\n  Collection,\n  ComboBoxStateContext,\n  ContextValue,\n  InputContext,\n  InputProps,\n  ListBox,\n  ListBoxItem,\n  ListBoxItemProps,\n  ListBoxLoadMoreItem,\n  ListBoxProps,\n  ListLayout,\n  ListStateContext,\n  Provider,\n  SectionProps,\n  Virtualizer\n} from 'react-aria-components';\nimport {AsyncLoadable, GlobalDOMAttributes, HelpTextProps, LoadingState, SpectrumLabelableProps} from '@react-types/shared';\nimport {AvatarContext} from './Avatar';\nimport {BaseCollection, CollectionNode, createLeafComponent} from '@react-aria/collections';\nimport {baseColor, edgeToText, focusRing, space, style} from '../style' with {type: 'macro'};\nimport {centerBaseline} from './CenterBaseline';\nimport {centerPadding, control, controlBorderRadius, controlFont, controlSize, field, fieldInput, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {\n  checkmark,\n  description,\n  icon,\n  iconCenterWrapper,\n  label,\n  sectionHeading\n} from './Menu';\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport ChevronIcon from '../ui-icons/Chevron';\nimport {createContext, CSSProperties, ForwardedRef, forwardRef, ReactNode, Ref, useCallback, useContext, useEffect, useImperativeHandle, useMemo, useRef, useState} from 'react';\nimport {createFocusableRef} from '@react-spectrum/utils';\nimport {FieldErrorIcon, FieldGroup, FieldLabel, HelpText, Input} from './Field';\nimport {FormContext, useFormProps} from './Form';\nimport {forwardRefType} from './types';\nimport {HeaderContext, HeadingContext, Text, TextContext} from './Content';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeRefs, useResizeObserver, useSlotId} from '@react-aria/utils';\nimport {Node} from 'react-stately';\nimport {Placement} from 'react-aria';\nimport {Popover} from './Popover';\nimport {pressScale} from './pressScale';\nimport {ProgressCircle} from './ProgressCircle';\nimport {TextFieldRef} from '@react-types/textfield';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useScale} from './utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ComboboxStyleProps {\n  /**\n   * The size of the Combobox.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL'\n}\nexport interface ComboBoxProps<T extends object> extends\n  Omit<AriaComboBoxProps<T>, 'children' | 'style' | 'className' | 'defaultFilter' | 'allowsEmptyCollection' | keyof GlobalDOMAttributes>,\n  ComboboxStyleProps,\n  StyleProps,\n  SpectrumLabelableProps,\n  HelpTextProps,\n  Pick<ListBoxProps<T>, 'items' | 'dependencies'>,\n  Pick<AriaPopoverProps, 'shouldFlip'>,\n  Pick<AsyncLoadable, 'onLoadMore'>,\n  Pick<InputProps, 'placeholder'>  {\n    /** The contents of the collection. */\n    children: ReactNode | ((item: T) => ReactNode),\n    /**\n     * Direction the menu will render relative to the ComboBox.\n     *\n     * @default 'bottom'\n     */\n    direction?: 'bottom' | 'top',\n    /**\n     * Alignment of the menu relative to the input target.\n     *\n     * @default 'start'\n     */\n    align?: 'start' | 'end',\n    /** Width of the menu. By default, matches width of the trigger. Note that the minimum width of the dropdown is always equal to the trigger's width. */\n    menuWidth?: number,\n    /** The current loading state of the ComboBox. Determines whether or not the progress circle should be shown. */\n    loadingState?: LoadingState\n}\n\nexport const ComboBoxContext = createContext<ContextValue<Partial<ComboBoxProps<any>>, TextFieldRef>>(null);\n\nconst inputButton = style<ButtonRenderProps & {isOpen: boolean, size: 'S' | 'M' | 'L' | 'XL'}>({\n  ...controlBorderRadius('sm'),\n  display: 'flex',\n  outlineStyle: 'none',\n  textAlign: 'center',\n  borderStyle: 'none',\n  alignItems: 'center',\n  justifyContent: 'center',\n  size: {\n    size: {\n      S: 16,\n      M: 20,\n      L: 24,\n      XL: 32\n    }\n  },\n  marginStart: 'text-to-control',\n  aspectRatio: 'square',\n  flexShrink: 0,\n  transition: {\n    default: 'default',\n    forcedColors: 'none'\n  },\n  backgroundColor: {\n    default: baseColor('gray-100'),\n    isOpen: 'gray-200',\n    isDisabled: 'disabled',\n    forcedColors: {\n      default: 'ButtonText',\n      isHovered: 'Highlight',\n      isOpen: 'Highlight',\n      isDisabled: 'GrayText'\n    }\n  },\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: 'disabled',\n    forcedColors: 'ButtonFace'\n  }\n});\n\nconst iconStyles = style({\n  flexShrink: 0,\n  rotate: 90,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nconst loadingWrapperStyles = style({\n  gridColumnStart: '1',\n  gridColumnEnd: '-1',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  marginY: 8\n});\n\nconst progressCircleStyles = style({\n  size: {\n    size: {\n      S: 16,\n      M: 20,\n      L: 22,\n      XL: 26\n    }\n  },\n  marginStart: {\n    isInput: 'text-to-visual'\n  }\n});\n\nconst emptyStateText = style({\n  height: {\n    size: {\n      S: 24,\n      M: 32,\n      L: 40,\n      XL: 48\n    }\n  },\n  font: {\n    size: {\n      S: 'ui-sm',\n      M: 'ui',\n      L: 'ui-lg',\n      XL: 'ui-xl'\n    }\n  },\n  display: 'flex',\n  alignItems: 'center',\n  paddingStart: 'edge-to-text'\n});\n\nexport let listbox = style<{size: 'S' | 'M' | 'L' | 'XL'}>({\n  width: 'full',\n  boxSizing: 'border-box',\n  maxHeight: '[inherit]',\n  // TODO: Might help with horizontal scrolling happening on Windows, will need to check somehow. Otherwise, revert back to overflow: auto\n  overflowY: 'auto',\n  overflowX: 'hidden',\n  fontFamily: 'sans',\n  fontSize: controlFont(),\n  outlineStyle: 'none'\n});\n\nexport let listboxItem = style({\n  ...focusRing(),\n  ...control({shape: 'default', wrap: true, icon: true}),\n  columnGap: 0,\n  paddingX: 0,\n  paddingBottom: '--labelPadding',\n  backgroundColor: {\n    default: 'transparent',\n    isFocused: baseColor('gray-100').isFocusVisible\n  },\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: {\n      default: 'disabled',\n      forcedColors: 'GrayText'\n    }\n  },\n  position: 'relative',\n  gridColumnStart: 1,\n  gridColumnEnd: -1,\n  display: 'grid',\n  gridTemplateAreas: [\n    '. checkmark icon label       .',\n    '. .         .    description .'\n  ],\n  gridTemplateColumns: {\n    size: {\n      S: [edgeToText(24), 'auto', 'auto', 'minmax(0, 1fr)', edgeToText(24)],\n      M: [edgeToText(32), 'auto', 'auto', 'minmax(0, 1fr)', edgeToText(32)],\n      L: [edgeToText(40), 'auto', 'auto', 'minmax(0, 1fr)', edgeToText(40)],\n      XL: [edgeToText(48), 'auto', 'auto', 'minmax(0, 1fr)', edgeToText(48)]\n    }\n  },\n  gridTemplateRows: {\n    // min-content prevents second row from 'auto'ing to a size larger then 0 when empty\n    default: 'auto minmax(0, min-content)',\n    ':has([slot=description])': 'auto auto'\n  },\n  rowGap: {\n    ':has([slot=description])': space(1)\n  },\n  alignItems: 'baseline',\n  minHeight: controlSize(),\n  height: 'min',\n  textDecoration: 'none',\n  cursor: {\n    default: 'default',\n    isLink: 'pointer'\n  },\n  transition: 'default'\n}, getAllowedOverrides());\n\nexport let listboxHeader = style<{size?: 'S' | 'M' | 'L' | 'XL'}>({\n  color: 'neutral',\n  boxSizing: 'border-box',\n  minHeight: controlSize(),\n  paddingY: centerPadding(),\n  marginX: {\n    size: {\n      S: `[${edgeToText(24)}]`,\n      M: `[${edgeToText(32)}]`,\n      L: `[${edgeToText(40)}]`,\n      XL: `[${edgeToText(48)}]`\n    }\n  }\n});\n\nconst separatorWrapper = style({\n  display: 'flex',\n  marginX: {\n    size: {\n      S: `[${edgeToText(24)}]`,\n      M: `[${edgeToText(32)}]`,\n      L: `[${edgeToText(40)}]`,\n      XL: `[${edgeToText(48)}]`\n    }\n  },\n  height: 12,\n  alignItems: 'center'\n});\n\nconst dividerStyle = style({\n  backgroundColor: {\n    default: 'gray-200',\n    forcedColors: 'ButtonBorder'\n  },\n  borderRadius: 'full',\n  height: '[2px]',\n  width: 'full'\n});\n\nconst avatar = style({\n  gridArea: 'icon',\n  marginEnd: 'text-to-visual'\n});\n\n// Not from any design, just following the sizing of the existing rows\nexport const LOADER_ROW_HEIGHTS = {\n  S: {\n    medium: 24,\n    large: 30\n  },\n  M: {\n    medium: 32,\n    large: 40\n  },\n  L: {\n    medium: 40,\n    large: 50\n  },\n  XL: {\n    medium: 48,\n    large: 60\n  }\n};\n\nlet InternalComboboxContext = createContext<{size: 'S' | 'M' | 'L' | 'XL'}>({size: 'M'});\n\n/**\n * ComboBox allow users to choose a single option from a collapsible list of options when space is limited.\n */\nexport const ComboBox = /*#__PURE__*/ (forwardRef as forwardRefType)(function ComboBox<T extends object>(props: ComboBoxProps<T>, ref: Ref<TextFieldRef>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ComboBoxContext);\n\n  let formContext = useContext(FormContext);\n  props = useFormProps(props);\n  let {\n    size = 'M',\n    labelPosition = 'top',\n    UNSAFE_className = '',\n    UNSAFE_style,\n    ...comboBoxProps\n  } = props;\n\n  return (\n    <AriaComboBox\n      {...comboBoxProps}\n      allowsEmptyCollection\n      style={UNSAFE_style}\n      className={UNSAFE_className + style(field(), getAllowedOverrides())({\n        isInForm: !!formContext,\n        labelPosition,\n        size\n      }, props.styles)}>\n      {({isDisabled, isOpen, isRequired, isInvalid}) => (\n        <ComboboxInner {...props} isDisabled={isDisabled} isOpen={isOpen} isRequired={isRequired} isInvalid={isInvalid} ref={ref} />\n      )}\n    </AriaComboBox>\n  );\n});\n\nexport interface ComboBoxItemProps extends Omit<ListBoxItemProps, 'children' | 'style' | 'className' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps {\n  children: ReactNode\n}\n\nconst avatarSize = {\n  S: 16,\n  M: 20,\n  L: 22,\n  XL: 26\n} as const;\n\nconst checkmarkIconSize = {\n  S: 'XS',\n  M: 'M',\n  L: 'L',\n  XL: 'XL'\n} as const;\n\nexport function ComboBoxItem(props: ComboBoxItemProps): ReactNode {\n  let ref = useRef(null);\n  let isLink = props.href != null;\n  let {size} = useContext(InternalComboboxContext);\n  return (\n    <ListBoxItem\n      {...props}\n      ref={ref}\n      textValue={props.textValue || (typeof props.children === 'string' ? props.children as string : undefined)}\n      style={pressScale(ref, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + listboxItem({...renderProps, size, isLink}, props.styles)}>\n      {(renderProps) => {\n        let {children} = props;\n        return (\n          <>\n            <Provider\n              values={[\n                [IconContext, {\n                  slots: {\n                    icon: {render: centerBaseline({slot: 'icon', styles: iconCenterWrapper}), styles: icon}\n                  }\n                }],\n                [AvatarContext, {\n                  slots: {\n                    avatar: {size: avatarSize[size], styles: avatar}\n                  }\n                }],\n                [TextContext, {\n                  slots: {\n                    label: {styles: label({size})},\n                    description: {styles: description({...renderProps, size})}\n                  }\n                }]\n              ]}>\n              {!isLink && !props.onAction && <CheckmarkIcon size={checkmarkIconSize[size]} className={checkmark({...renderProps, size})} />}\n              {typeof children === 'string' ? <Text slot=\"label\">{children}</Text> : children}\n            </Provider>\n          </>\n        );\n      }}\n    </ListBoxItem>\n  );\n}\n\nexport interface ComboBoxSectionProps<T extends object> extends Omit<SectionProps<T>, keyof GlobalDOMAttributes> {}\nexport function ComboBoxSection<T extends object>(props: ComboBoxSectionProps<T>): ReactNode {\n  let {size} = useContext(InternalComboboxContext);\n  return (\n    <>\n      <AriaListBoxSection\n        {...props}>\n        {props.children}\n      </AriaListBoxSection>\n      <Divider size={size} />\n    </>\n  );\n}\n\nconst ComboboxInner = forwardRef(function ComboboxInner(props: ComboBoxProps<any> & {isOpen: boolean}, ref: ForwardedRef<TextFieldRef | null>) {\n  let {\n    direction = 'bottom',\n    align = 'start',\n    shouldFlip = true,\n    menuWidth,\n    label,\n    description: descriptionMessage,\n    errorMessage,\n    children,\n    defaultItems,\n    items,\n    size = 'M',\n    labelPosition = 'top',\n    labelAlign = 'start',\n    necessityIndicator,\n    loadingState,\n    isDisabled,\n    isOpen,\n    isRequired,\n    isInvalid,\n    menuTrigger,\n    onLoadMore\n  } = props;\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let inputRef = useRef<HTMLInputElement>(null);\n  let domRef = useRef<HTMLDivElement>(null);\n  let buttonRef = useRef<HTMLButtonElement>(null);\n  // Expose imperative interface for ref\n  useImperativeHandle(ref, () => ({\n    ...createFocusableRef(domRef, inputRef),\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n\n  // Better way to encode this into a style? need to account for flipping\n  let menuOffset: number;\n  if (size === 'S') {\n    menuOffset = 6;\n  } else if (size === 'M') {\n    menuOffset = 6;\n  } else if (size === 'L') {\n    menuOffset = 7;\n  } else {\n    menuOffset = 8;\n  }\n\n  let triggerRef = useRef<HTMLDivElement>(null);\n  // Make menu width match input + button\n  let [triggerWidth, setTriggerWidth] = useState<string | null>(null);\n  let onResize = useCallback(() => {\n    if (triggerRef.current) {\n      let inputRect = triggerRef.current.getBoundingClientRect();\n      let minX = inputRect.left;\n      let maxX = inputRect.right;\n      setTriggerWidth((maxX - minX) + 'px');\n    }\n  }, [triggerRef, setTriggerWidth]);\n\n  useResizeObserver({\n    ref: triggerRef,\n    onResize: onResize\n  });\n\n  let state = useContext(ComboBoxStateContext);\n  let timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n  let [showLoading, setShowLoading] = useState(false);\n  let isLoadingOrFiltering = loadingState === 'loading' || loadingState === 'filtering';\n  {/* Logic copied from S1 */}\n  let showFieldSpinner = useMemo(() => showLoading && (isOpen || menuTrigger === 'manual' || loadingState === 'loading'), [showLoading, isOpen, menuTrigger, loadingState]);\n  let spinnerId = useSlotId([showFieldSpinner]);\n\n  let inputValue = state?.inputValue;\n  let lastInputValue = useRef(inputValue);\n  useEffect(() => {\n    if (isLoadingOrFiltering && !showLoading) {\n      if (timeout.current === null) {\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n\n      // If user is typing, clear the timer and restart since it is a new request\n      if (inputValue !== lastInputValue.current) {\n        clearTimeout(timeout.current);\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n    } else if (!isLoadingOrFiltering) {\n      // If loading is no longer happening, clear any timers and hide the loading circle\n      setShowLoading(false);\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n      timeout.current = null;\n    }\n\n    lastInputValue.current = inputValue;\n  }, [isLoadingOrFiltering, showLoading, inputValue]);\n\n  useEffect(() => {\n    return () => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n      timeout.current = null;\n    };\n  }, []);\n\n  let renderer;\n  let listBoxLoadingCircle = (\n    <ListBoxLoadMoreItem\n      // Only show the spinner in the list when loading more\n      isLoading={loadingState === 'loadingMore'}\n      onLoadMore={onLoadMore}\n      className={loadingWrapperStyles}>\n      <ProgressCircle\n        isIndeterminate\n        size=\"S\"\n        styles={progressCircleStyles({size})}\n        // Same loading string as table\n        aria-label={stringFormatter.format('table.loadingMore')} />\n    </ListBoxLoadMoreItem>\n  );\n\n  if (typeof children === 'function') {\n    renderer = (\n      <>\n        <Collection items={items ?? defaultItems} dependencies={props.dependencies}>\n          {children}\n        </Collection>\n        {listBoxLoadingCircle}\n      </>\n    );\n  } else {\n    // TODO: is there a case where the user might provide items to the Combobox but doesn't provide a function renderer?\n    // Same case for other components that have this logic (TableView/CardView/Picker)\n    renderer = (\n      <>\n        {children}\n        {listBoxLoadingCircle}\n      </>\n    );\n  }\n  let scale = useScale();\n\n  return (\n    <>\n      <InternalComboboxContext.Provider value={{size}}>\n        <FieldLabel\n          isDisabled={isDisabled}\n          isRequired={isRequired}\n          size={size}\n          labelPosition={labelPosition}\n          labelAlign={labelAlign}\n          necessityIndicator={necessityIndicator}\n          contextualHelp={props.contextualHelp}>\n          {label}\n        </FieldLabel>\n        <FieldGroup\n          ref={triggerRef}\n          role=\"presentation\"\n          isDisabled={isDisabled}\n          isInvalid={isInvalid}\n          size={size}\n          styles={style({\n            ...fieldInput(),\n            paddingStart: 'edge-to-text',\n            // better way to do this one? it's not actually half, they are\n            // [9, 4], [12, 6], [15, 8], [18, 8]\n            // also noticed that our measurement is including the border, making the padding too much\n            paddingEnd: 'calc(self(height, self(minHeight)) * 3 / 16)'\n          })({size})}>\n          <InputContext.Consumer>\n            {ctx => (\n              <InputContext.Provider value={{...ctx, ref: mergeRefs((ctx as any)?.ref, inputRef)}}>\n                <Input aria-describedby={spinnerId} />\n              </InputContext.Provider>\n            )}\n          </InputContext.Consumer>\n          {isInvalid && <FieldErrorIcon isDisabled={isDisabled} />}\n          {showFieldSpinner && (\n            <ProgressCircle\n              id={spinnerId}\n              isIndeterminate\n              size=\"S\"\n              styles={progressCircleStyles({size, isInput: true})}\n              aria-label={stringFormatter.format('table.loading')} />\n          )}\n          <Button\n            ref={buttonRef}\n            // Prevent press scale from sticking while ComboBox is open.\n            // @ts-ignore\n            isPressed={false}\n            style={renderProps => pressScale(buttonRef)(renderProps)}\n            className={renderProps => inputButton({\n              ...renderProps,\n              size,\n              isOpen\n            })}>\n            <ChevronIcon\n              size={size}\n              className={iconStyles} />\n          </Button>\n        </FieldGroup>\n        <HelpText\n          size={size}\n          isDisabled={isDisabled}\n          isInvalid={isInvalid}\n          description={descriptionMessage}>\n          {errorMessage}\n        </HelpText>\n        <Popover\n          hideArrow\n          triggerRef={triggerRef}\n          offset={menuOffset}\n          placement={`${direction} ${align}` as Placement}\n          shouldFlip={shouldFlip}\n          UNSAFE_style={{\n            '--trigger-width': (menuWidth ? menuWidth + 'px' : triggerWidth)\n          } as CSSProperties}\n          padding=\"none\"\n          styles={style({\n            minWidth: '--trigger-width',\n            width: '--trigger-width'\n          })}>\n          <div\n            className={style({\n              display: 'flex',\n              size: 'full'\n            })}>\n            <Provider\n              values={[\n                [HeaderContext, {styles: listboxHeader({size})}],\n                [HeadingContext, {\n                  // @ts-ignore\n                  role: 'presentation',\n                  styles: sectionHeading\n                }],\n                [TextContext, {\n                  slots: {\n                    'description': {styles: description({size})}\n                  }\n                }]\n              ]}>\n              <Virtualizer\n                layout={ListLayout}\n                layoutOptions={{\n                  estimatedRowHeight: 32,\n                  padding: 8,\n                  estimatedHeadingHeight: 50,\n                  loaderHeight: LOADER_ROW_HEIGHTS[size][scale]\n                }}>\n                <ListBox\n                  dependencies={props.dependencies}\n                  renderEmptyState={() => (\n                    <span className={emptyStateText({size})}>\n                      {loadingState === 'loading' ? stringFormatter.format('table.loading') : stringFormatter.format('combobox.noResults')}\n                    </span>\n                  )}\n                  items={items}\n                  className={listbox({size})}>\n                  {renderer}\n                </ListBox>\n              </Virtualizer>\n            </Provider>\n          </div>\n        </Popover>\n      </InternalComboboxContext.Provider>\n    </>\n  );\n});\n\nclass SeparatorNode extends CollectionNode<any> {\n  static readonly type = 'separator';\n\n  filter(collection: BaseCollection<any>, newCollection: BaseCollection<any>): CollectionNode<any> | null {\n    let prevItem = newCollection.getItem(this.prevKey!);\n    if (prevItem && prevItem.type !== 'separator') {\n      let clone = this.clone();\n      newCollection.addDescendants(clone, collection);\n      return clone;\n    }\n\n    return null;\n  }\n}\n\nexport const Divider = /*#__PURE__*/ createLeafComponent(SeparatorNode, function Divider({size}: {size?: 'S' | 'M' | 'L' | 'XL'}, ref: ForwardedRef<HTMLDivElement>, node: Node<unknown>) {\n  let listState = useContext(ListStateContext)!;\n\n  let nextNode = node.nextKey != null && listState.collection.getItem(node.nextKey);\n  if (node.prevKey == null || !nextNode || nextNode.type === 'separator' || (nextNode.type === 'loader' && nextNode.nextKey == null)) {\n    return null;\n  }\n\n  return (\n    <div className={separatorWrapper({size})}>\n      <div ref={ref} className={dividerStyle} />\n    </div>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertIcon from '../s2wf-icons/S2_Icon_AlertTriangle_20_N.svg';\nimport {Alignment, DOMRef, NecessityIndicator} from '@react-types/shared';\nimport AsteriskIcon from '../ui-icons/Asterisk';\nimport {baseColor, focusRing, fontRelative, style} from '../style' with {type: 'macro'};\nimport {CenterBaseline, centerBaseline, centerBaselineBefore} from './CenterBaseline';\nimport {composeRenderProps, FieldError, FieldErrorProps, Group, GroupProps, Label, LabelProps, Provider, Input as RACInput, InputProps as RACInputProps, Text} from 'react-aria-components';\nimport {ContextualHelpContext} from './ContextualHelp';\nimport {control, controlFont, fieldInput, fieldLabel, StyleProps, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {ForwardedRef, forwardRef, ReactNode} from 'react';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeStyles} from '../style/runtime';\nimport {StyleString} from '../style/types';\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\ninterface FieldLabelProps extends Omit<LabelProps, 'className' | 'style' | 'children'>, StyleProps {\n  isDisabled?: boolean,\n  isRequired?: boolean,\n  size?: 'S' | 'M' | 'L' | 'XL',\n  necessityIndicator?: NecessityIndicator,\n  labelAlign?: Alignment,\n  labelPosition?: 'top' | 'side',\n  includeNecessityIndicatorInAccessibilityName?: boolean,\n  staticColor?: 'white' | 'black' | 'auto',\n  contextualHelp?: ReactNode,\n  isQuiet?: boolean,\n  children?: ReactNode\n}\n\nexport const FieldLabel = forwardRef(function FieldLabel(props: FieldLabelProps, ref: DOMRef<HTMLLabelElement>) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let {\n    isDisabled,\n    isRequired,\n    size = 'M',\n    necessityIndicator = 'icon',\n    includeNecessityIndicatorInAccessibilityName = false,\n    labelAlign,\n    labelPosition,\n    staticColor,\n    contextualHelp,\n    isQuiet,\n    UNSAFE_style,\n    UNSAFE_className = '',\n    ...labelProps\n  } = props;\n\n  let domRef = useDOMRef(ref);\n  let contextualHelpId = useId();\n  let fallbackLabelPropsId = useId();\n  if (contextualHelp && !labelProps.id) {\n    labelProps.id = fallbackLabelPropsId;\n  }\n\n  if (!props.children) {\n    return null;\n  }\n\n  return (\n    <div\n      className={style({\n        gridArea: 'label',\n        display: 'inline',\n        textAlign: {\n          labelAlign: {\n            start: 'start',\n            end: 'end'\n          }\n        },\n        paddingBottom: {\n          labelPosition: {\n            top: '--field-gap'\n          }\n        },\n        contain: {\n          labelPosition: {\n            top: 'inline-size'\n          },\n          isQuiet: 'none'\n        }\n      })({labelAlign, labelPosition, isQuiet})}>\n      <Label\n        {...labelProps}\n        ref={domRef}\n        style={UNSAFE_style}\n        className={UNSAFE_className + mergeStyles(style(fieldLabel())({labelPosition, isDisabled, size, isStaticColor: !!staticColor}), props.styles)}>\n        {props.children}\n        {(isRequired || necessityIndicator === 'label') && (\n          <span className={style({whiteSpace: 'nowrap'})}>\n            &nbsp;\n            {necessityIndicator === 'icon' &&\n              <AsteriskIcon\n                size={size === 'S' ? 'M' : size}\n                className={style({\n                  '--iconPrimary': {\n                    type: 'fill',\n                    value: 'currentColor'\n                  }\n                })}\n                aria-label={includeNecessityIndicatorInAccessibilityName ? stringFormatter.format('label.(required)') : undefined} />\n            }\n            {necessityIndicator === 'label' &&\n              /* The necessity label is hidden to screen readers if the field is required because\n              * aria-required is set on the field in that case. That will already be announced,\n              * so no need to duplicate it here. If optional, we do want it to be announced here.\n              */\n              <span aria-hidden={!includeNecessityIndicatorInAccessibilityName ? isRequired : undefined}>\n                {isRequired ? stringFormatter.format('label.(required)') : stringFormatter.format('label.(optional)')}\n              </span>\n            }\n          </span>\n        )}\n      </Label>\n      {contextualHelp && (\n        <span className={style({whiteSpace: 'nowrap'})}>\n          &nbsp;\n          <CenterBaseline\n            styles={style({\n              display: 'inline-flex',\n              height: 0\n            })}>\n            <ContextualHelpContext.Provider\n              value={{\n                id: contextualHelpId,\n                'aria-labelledby': labelProps?.id ? `${labelProps.id} ${contextualHelpId}` : undefined,\n                size: (size === 'L' || size === 'XL') ? 'S' : 'XS'\n              }}>\n              {contextualHelp}\n            </ContextualHelpContext.Provider>\n          </CenterBaseline>\n        </span>\n      )}\n    </div>\n  );\n});\n\ninterface FieldGroupProps extends Omit<GroupProps, 'className' | 'style' | 'children'>, UnsafeStyles {\n  size?: 'S' | 'M' | 'L' | 'XL',\n  children: ReactNode,\n  styles?: StyleString,\n  shouldTurnOffFocusRing?: boolean\n}\n\nconst fieldGroupStyles = style({\n  ...focusRing(),\n  ...control({shape: 'default'}),\n  ...fieldInput(),\n  borderWidth: 2,\n  borderStyle: 'solid',\n  transition: 'default',\n  borderColor: {\n    default: baseColor('gray-300'),\n    isInvalid: baseColor('negative'),\n    isFocusWithin: {\n      default: 'gray-900',\n      isInvalid: 'negative-1000',\n      forcedColors: 'Highlight'\n    },\n    isDisabled: {\n      default: 'disabled',\n      forcedColors: 'GrayText'\n    }\n  },\n  backgroundColor: 'gray-25',\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: 'disabled'\n  },\n  cursor: {\n    default: 'text',\n    isDisabled: 'default'\n  }\n});\n\nexport const FieldGroup = forwardRef(function FieldGroup(props: FieldGroupProps, ref: ForwardedRef<HTMLDivElement>) {\n  let {shouldTurnOffFocusRing, ...otherProps} = props;\n  return (\n    <Group\n      ref={ref}\n      {...otherProps}\n      onPointerDown={(e) => {\n        // Forward focus to input element when clicking on a non-interactive child (e.g. icon or padding)\n        if (e.pointerType === 'mouse' && !(e.target as Element).closest('button,input,textarea')) {\n          e.preventDefault();\n          e.currentTarget.querySelector('input')?.focus();\n        }\n      }}\n      onPointerUp={e => {\n        if (e.pointerType !== 'mouse' && !(e.target as Element).closest('button,input,textarea')) {\n          e.preventDefault();\n          e.currentTarget.querySelector('input')?.focus();\n        }\n      }}\n      style={props.UNSAFE_style}\n      className={renderProps => (props.UNSAFE_className || '') + ' ' + centerBaselineBefore + mergeStyles(\n        fieldGroupStyles({\n          ...renderProps,\n          isFocusWithin: shouldTurnOffFocusRing ? false : renderProps.isFocusWithin,\n          isFocusVisible: shouldTurnOffFocusRing ? false : renderProps.isFocusVisible,\n          size: props.size || 'M'\n        }),\n        props.styles\n      )} />\n  );\n});\n\nexport interface InputProps extends Omit<RACInputProps, 'className' | 'style'>, StyleProps {}\n\nexport const Input = forwardRef(function Input(props: InputProps, ref: ForwardedRef<HTMLInputElement>) {\n  let {UNSAFE_className = '', UNSAFE_style, styles, ...otherProps} = props;\n  return (\n    <RACInput\n      {...otherProps}\n      ref={ref}\n      style={UNSAFE_style}\n      className={UNSAFE_className + mergeStyles(style({\n        padding: 0,\n        backgroundColor: 'transparent',\n        color: {\n          default: 'inherit',\n          '::placeholder': 'gray-600'\n        },\n        fontFamily: 'inherit',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        flexGrow: 1,\n        flexShrink: 1,\n        minWidth: 0,\n        width: 'full',\n        outlineStyle: 'none',\n        borderStyle: 'none',\n        truncate: true\n      }), styles)} />\n  );\n});\n\ninterface HelpTextProps extends FieldErrorProps {\n  size?: 'S' | 'M' | 'L' | 'XL',\n  isDisabled?: boolean,\n  isInvalid?: boolean, // TODO: export FieldErrorContext from RAC to get this.\n  description?: ReactNode,\n  showErrorIcon?: boolean\n}\n\nexport const helpTextStyles = style({\n  gridArea: 'helptext',\n  display: 'flex',\n  alignItems: 'baseline',\n  gap: 'text-to-visual',\n  font: controlFont(),\n  color: {\n    default: 'neutral-subdued',\n    isInvalid: 'negative',\n    isDisabled: 'disabled'\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  contain: 'inline-size',\n  paddingTop: '--field-gap',\n  cursor: {\n    default: 'text',\n    isDisabled: 'default'\n  }\n});\n\nexport function HelpText(props: HelpTextProps & {descriptionRef?: DOMRef<HTMLDivElement>, errorRef?: DOMRef<HTMLDivElement>}): ReactNode {\n  let domDescriptionRef = useDOMRef(props.descriptionRef || null);\n  let domErrorRef = useDOMRef(props.errorRef || null);\n\n  if (!props.isInvalid && props.description) {\n    return (\n      <Text\n        slot=\"description\"\n        ref={domDescriptionRef}\n        className={helpTextStyles({size: props.size || 'M', isDisabled: props.isDisabled})}>\n        {props.description}\n      </Text>\n    );\n  }\n\n  return (\n    <FieldError\n      {...props}\n      ref={domErrorRef}\n      className={renderProps => helpTextStyles({...renderProps, size: props.size || 'M', isDisabled: props.isDisabled})}>\n      {composeRenderProps(props.children, (children, {validationErrors}) => (<>\n        {props.showErrorIcon &&\n          <CenterBaseline>\n            <AlertIcon />\n          </CenterBaseline>\n        }\n        <span>{children || validationErrors.join(' ')}</span>\n      </>))}\n    </FieldError>\n  );\n}\n\nexport function FieldErrorIcon(props: {isDisabled?: boolean}): ReactNode {\n  return (\n    <Provider\n      values={[\n        [IconContext, {\n          render: centerBaseline({\n            slot: 'icon',\n            styles: style({\n              order: 0,\n              flexShrink: 0,\n              '--iconPrimary': {\n                type: 'fill',\n                value: {\n                  default: 'negative',\n                  forcedColors: 'ButtonText'\n                }\n              }\n            })}),\n          styles: style({\n            size: fontRelative(20),\n            marginStart: 'text-to-visual',\n            marginEnd: fontRelative(-2),\n            flexShrink: 0\n          })\n        }]\n      ]}>\n      {!props.isDisabled && <AlertIcon />}\n    </Provider>\n  );\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport Asterisk_L from './S2_AsteriskSize200.svg';\nimport Asterisk_M from './S2_AsteriskSize100.svg';\nimport Asterisk_XL from './S2_AsteriskSize300.svg';\nimport {ReactNode, SVGProps} from 'react';\nimport {style} from '../style' with {type: 'macro'};\n\nlet styles = style({\n  width: {\n    size: {\n      M: 8,\n      L: 10,\n      XL: 10\n    }\n  },\n  height: {\n    size: {\n      M: 8,\n      L: 10,\n      XL: 10\n    }\n  }\n});\n\nexport default function Asterisk(props: SVGProps<SVGSVGElement> & {size?: 'M' | 'L' | 'XL'}): ReactNode {\n  let {size = 'M', ...otherProps} = props;\n  switch (size) {\n    case 'M':\n      return <Asterisk_M {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'L':\n      return <Asterisk_L {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XL':\n      return <Asterisk_XL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n  }\n}\n","import {ActionButton} from './ActionButton';\nimport {AriaLabelingProps, DOMProps, FocusableRef, FocusableRefValue} from '@react-types/shared';\nimport {ContentContext, FooterContext, HeadingContext} from './Content';\nimport {ContextValue, DEFAULT_SLOT, Provider, Dialog as RACDialog, TextContext} from 'react-aria-components';\nimport {createContext, forwardRef, ReactNode} from 'react';\nimport {dialogInner} from './Dialog';\nimport {DialogTrigger, DialogTriggerProps} from './DialogTrigger';\nimport {filterDOMProps, mergeProps, useLabels} from '@react-aria/utils';\nimport HelpIcon from '../s2wf-icons/S2_Icon_HelpCircle_20_N.svg';\nimport InfoIcon from '../s2wf-icons/S2_Icon_InfoCircle_20_N.svg';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeStyles} from '../style/runtime';\nimport {Popover, PopoverDialogProps} from './Popover';\nimport {space, style} from '../style' with {type: 'macro'};\nimport {StyleProps} from './style-utils' with { type: 'macro' };\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ContextualHelpStyleProps {\n  /**\n   * Indicates whether contents are informative or provides helpful guidance.\n   *\n   * @default 'help'\n   */\n  variant?: 'info' | 'help'\n}\nexport interface ContextualHelpProps extends\n  Pick<DialogTriggerProps, 'isOpen' | 'defaultOpen' | 'onOpenChange'>,\n  Pick<PopoverDialogProps, 'shouldFlip' | 'offset' | 'crossOffset' | 'placement' | 'containerPadding'>,\n  ContextualHelpStyleProps, StyleProps, DOMProps, AriaLabelingProps {\n  /** Contents of the Contextual Help popover. */\n  children: ReactNode,\n  /**\n   * The size of the ActionButton.\n   *\n   * @default 'XS'\n   */\n  size?: 'XS' | 'S'\n}\n\nconst wrappingDiv = style({\n  minWidth: 268,\n  width: 268,\n  padding: 24,\n  boxSizing: 'border-box',\n  height: 'full'\n});\n\nexport const ContextualHelpContext = createContext<ContextValue<Partial<ContextualHelpProps>, FocusableRefValue<HTMLButtonElement>>>(null);\n\n/**\n * Contextual help shows a user extra information about the state of an adjacent component, or a total view.\n */\nexport const ContextualHelp = forwardRef(function ContextualHelp(props: ContextualHelpProps, ref: FocusableRef<HTMLButtonElement>) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  [props, ref] = useSpectrumContextProps(props, ref, ContextualHelpContext);\n  let {\n    children,\n    defaultOpen,\n    // containerPadding = 24, // See popover() above. Issue noted in Popover.tsx.\n    size = 'XS',\n    crossOffset,\n    isOpen,\n    offset = 8,\n    onOpenChange,\n    placement = 'bottom start',\n    shouldFlip,\n    UNSAFE_className,\n    UNSAFE_style,\n    styles,\n    variant = 'help'\n  } = props;\n\n  // In a FieldLabel we're getting the context's aria-labeledby, so we need to\n  // manually set the aria-label after useLabels() to keep the order of label\n  // then ContextualHelp variant\n  let labelProps = useLabels(props);\n  let label = stringFormatter.format(`contextualhelp.${variant}`);\n  labelProps['aria-label'] = labelProps['aria-label'] ? labelProps['aria-label'] + ' ' + label : label;\n\n  let buttonProps = filterDOMProps(props, {labelable: true});\n\n  return (\n    <DialogTrigger\n      isOpen={isOpen}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}>\n      <ActionButton\n        slot={null}\n        ref={ref}\n        size={size}\n        {...mergeProps(buttonProps, labelProps)}\n        UNSAFE_style={UNSAFE_style}\n        UNSAFE_className={UNSAFE_className}\n        styles={styles}\n        isQuiet>\n        {variant === 'info' ? <InfoIcon /> : <HelpIcon />}\n      </ActionButton>\n      <Popover\n        padding=\"none\"\n        placement={placement}\n        shouldFlip={shouldFlip}\n        // not working => containerPadding={containerPadding}\n        offset={offset}\n        crossOffset={crossOffset}\n        hideArrow>\n        <div\n          className={wrappingDiv}>\n          <RACDialog className={mergeStyles(dialogInner, style({borderRadius: 'none', margin: 'calc(self(paddingTop) * -1)', padding: 24}))}>\n            <Provider\n              values={[\n                [TextContext, {\n                  slots: {\n                    [DEFAULT_SLOT]: {}\n                  }\n                }],\n                [HeadingContext, {styles: style({\n                  font: 'heading-xs',\n                  margin: 0,\n                  marginBottom: space(8) // This only makes it 10px on mobile and should be 12px\n                })}],\n                [ContentContext, {styles: style({\n                  font: 'body-sm'\n                })}],\n                [FooterContext, {styles: style({\n                  font: 'body-sm',\n                  marginTop: 16\n                })}]\n              ]}>\n              {children}\n            </Provider>\n          </RACDialog>\n        </div>\n      </Popover>\n    </DialogTrigger>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionButtonGroupContext} from './ActionButtonGroup';\nimport {AvatarContext} from './Avatar';\nimport {baseColor, focusRing, fontRelative, lightDark, style} from '../style' with { type: 'macro' };\nimport {ButtonProps, ButtonRenderProps, ContextValue, OverlayTriggerStateContext, Provider, Button as RACButton, useSlottedContext} from 'react-aria-components';\nimport {centerBaseline} from './CenterBaseline';\nimport {control, getAllowedOverrides, staticColor, StyleProps} from './style-utils' with { type: 'macro' };\nimport {createContext, forwardRef, ReactNode, useContext} from 'react';\nimport {FocusableRef, FocusableRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {IconContext} from './Icon';\nimport {ImageContext} from './Image';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {NotificationBadgeContext} from './NotificationBadge';\nimport {pressScale} from './pressScale';\nimport {ProgressCircle} from './ProgressCircle';\nimport {SkeletonContext} from './Skeleton';\nimport {Text, TextContext} from './Content';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useFormProps} from './Form';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {usePendingState} from './Button';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ActionButtonStyleProps {\n  /**\n   * The size of the ActionButton.\n   *\n   * @default 'M'\n   */\n  size?: 'XS' | 'S' | 'M' | 'L' | 'XL',\n  /** The static color style to apply. Useful when the ActionButton appears over a color background. */\n  staticColor?: 'black' | 'white' | 'auto',\n  /** Whether the button should be displayed with a [quiet style](https://spectrum.adobe.com/page/action-button/#Quiet). */\n  isQuiet?: boolean\n}\n\ninterface ToggleButtonStyleProps {\n  /** Whether the ActionButton should be selected (controlled). */\n  isSelected?: boolean,\n  /** Whether the button should be displayed with an [emphasized style](https://spectrum.adobe.com/page/action-button/#Emphasis). */\n  isEmphasized?: boolean\n}\n\ninterface ActionGroupItemStyleProps {\n  density?: 'regular' | 'compact',\n  orientation?: 'horizontal' | 'vertical',\n  isJustified?: boolean\n}\n\nexport interface ActionButtonProps extends Omit<ButtonProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps, ActionButtonStyleProps {\n  /** The content to display in the ActionButton. */\n  children: ReactNode\n}\n\n// These styles handle both ActionButton and ToggleButton\nconst iconOnly = ':has([slot=icon], [slot=avatar]):not(:has([data-rsp-slot=text]))';\nconst avatarOnly = ':has([slot=avatar]):not(:has([slot=icon], [data-rsp-slot=text]))';\nconst textOnly = ':has([data-rsp-slot=text]):not(:has([slot=icon], [slot=avatar]))';\nconst controlStyle = control({shape: 'default', icon: true});\nexport const btnStyles = style<ButtonRenderProps & ActionButtonStyleProps & ToggleButtonStyleProps & ActionGroupItemStyleProps & {isInGroup: boolean, isStaticColor: boolean}>({\n  ...focusRing(),\n  ...staticColor(),\n  ...controlStyle,\n  position: 'relative',\n  justifyContent: 'center',\n  flexShrink: {\n    default: 1,\n    isInGroup: 0\n  },\n  flexGrow: {\n    isJustified: 1\n  },\n  flexBasis: {\n    isJustified: 0\n  },\n  fontWeight: 'medium',\n  userSelect: 'none',\n  transition: 'default',\n  forcedColorAdjust: 'none',\n  backgroundColor: {\n    default: {\n      ...baseColor('gray-100'),\n      default: {\n        default: 'gray-100',\n        isQuiet: 'transparent'\n      }\n    },\n    isSelected: {\n      default: baseColor('neutral'),\n      isEmphasized: {\n        default: lightDark('accent-900', 'accent-700'),\n        isHovered: lightDark('accent-1000', 'accent-600'),\n        isPressed: lightDark('accent-1000', 'accent-600'),\n        isFocusVisible: lightDark('accent-1000', 'accent-600')\n      },\n      isDisabled: {\n        default: 'gray-100',\n        isQuiet: 'transparent'\n      }\n    },\n    isStaticColor: {\n      ...baseColor('transparent-overlay-100'),\n      default: {\n        default: 'transparent-overlay-100',\n        isQuiet: 'transparent'\n      },\n      isSelected: {\n        default: baseColor('transparent-overlay-800'),\n        isDisabled: {\n          default: 'transparent-overlay-100',\n          isQuiet: 'transparent'\n        }\n      }\n    },\n    forcedColors: {\n      default: 'ButtonFace',\n      isSelected: {\n        default: 'Highlight',\n        isDisabled: 'ButtonFace'\n      }\n    }\n  },\n  color: {\n    default: baseColor('neutral'),\n    isSelected: {\n      default: 'gray-25',\n      isEmphasized: 'white'\n    },\n    isDisabled: 'disabled',\n    isStaticColor: {\n      default: baseColor('transparent-overlay-800'),\n      isSelected: 'auto',\n      isDisabled: 'transparent-overlay-400'\n    },\n    forcedColors: {\n      default: 'ButtonText',\n      isSelected: 'HighlightText',\n      isDisabled: {\n        default: 'GrayText'\n      }\n    }\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  outlineColor: {\n    default: 'focus-ring',\n    isStaticColor: 'transparent-overlay-1000',\n    forcedColors: 'Highlight'\n  },\n  borderStyle: 'none',\n  borderTopStartRadius: {\n    default: controlStyle.borderRadius,\n    density: {\n      compact: {\n        default: 'none',\n        ':first-child': controlStyle.borderRadius\n      }\n    }\n  },\n  borderTopEndRadius: {\n    default: controlStyle.borderRadius,\n    density: {\n      compact: {\n        default: 'none',\n        orientation: {\n          horizontal: {\n            ':last-child': controlStyle.borderRadius\n          },\n          vertical: {\n            ':first-child': controlStyle.borderRadius\n          }\n        }\n      }\n    }\n  },\n  borderBottomStartRadius: {\n    default: controlStyle.borderRadius,\n    density: {\n      compact: {\n        default: 'none',\n        orientation: {\n          horizontal: {\n            ':first-child': controlStyle.borderRadius\n          },\n          vertical: {\n            ':last-child': controlStyle.borderRadius\n          }\n        }\n      }\n    }\n  },\n  borderBottomEndRadius: {\n    default: controlStyle.borderRadius,\n    density: {\n      compact: {\n        default: 'none',\n        ':last-child': controlStyle.borderRadius\n      }\n    }\n  },\n  zIndex: {\n    isFocusVisible: 2\n  },\n  disableTapHighlight: true,\n  '--badgeTop': {\n    type: 'top',\n    value: {\n      default: 'calc(self(height)/2 - var(--iconWidth)/2)',\n      [textOnly]: 0\n    }\n  },\n  '--iconWidth': {\n    type: 'width',\n    value: fontRelative(20)\n  },\n  '--badgePosition': {\n    type: 'width',\n    value: {\n      default: 'calc(self(paddingStart) + var(--iconWidth))',\n      [iconOnly]: 'calc(self(minWidth)/2 + var(--iconWidth)/2)',\n      [textOnly]: 'full'\n    }\n  },\n  paddingX: {\n    default: controlStyle.paddingX,\n    [avatarOnly]: 0\n  },\n  // `control` sets this, but we need to override it for avatar only buttons.\n  '--iconMargin': {\n    type: 'marginStart',\n    value: {\n      default: fontRelative(-2),\n      [iconOnly]: 0,\n      [avatarOnly]: 0\n    }\n  }\n}, getAllowedOverrides());\n\n// Matching icon sizes. TBD.\nconst avatarSize = {\n  XS: 14,\n  S: 16,\n  M: 20,\n  L: 22,\n  X: 26\n} as const;\n\nexport const ActionButtonContext = createContext<ContextValue<Partial<ActionButtonProps>, FocusableRefValue<HTMLButtonElement>>>(null);\n\n/**\n * ActionButtons allow users to perform an action.\n * They're used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren't meant to draw a lot of attention.\n */\nexport const ActionButton = forwardRef(function ActionButton(props: ActionButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ActionButtonContext);\n  props = useFormProps(props as any);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let {isPending = false} = props;\n  let domRef = useFocusableRef(ref);\n  let overlayTriggerState = useContext(OverlayTriggerStateContext);\n  let ctx = useSlottedContext(ActionButtonGroupContext);\n  let isInGroup = !!ctx;\n  let {\n    density = 'regular',\n    isJustified,\n    orientation = 'horizontal',\n    staticColor = props.staticColor,\n    isQuiet = props.isQuiet,\n    size = props.size || 'M'\n  } = ctx || {};\n\n  let {isProgressVisible} = usePendingState(isPending);\n\n  return (\n    <RACButton\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + btnStyles({\n        ...renderProps,\n        // Retain hover styles when an overlay is open.\n        isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n        isDisabled: renderProps.isDisabled || isProgressVisible,\n        staticColor,\n        isStaticColor: !!staticColor,\n        size,\n        isQuiet,\n        density,\n        isJustified,\n        orientation,\n        isInGroup\n      }, props.styles)}>\n      {({isDisabled}) => (\n        <>\n          <Provider\n            values={[\n              [SkeletonContext, null],\n              [TextContext, {styles:\n                style({\n                  order: 1,\n                  truncate: true,\n                  visibility: {\n                    isProgressVisible: 'hidden'\n                  }\n                })({isProgressVisible})\n              }],\n              [IconContext, {\n                render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n                styles: style({\n                  size: fontRelative(20),\n                  marginStart: '--iconMargin',\n                  flexShrink: 0,\n                  visibility: {\n                    isProgressVisible: 'hidden'\n                  }\n                })({isProgressVisible})\n              }],\n              [AvatarContext, {\n                size: avatarSize[size],\n                styles: style({\n                  marginStart: '--iconMargin',\n                  flexShrink: 0,\n                  order: 0\n                })\n              }],\n              [ImageContext, {\n                styles: style({\n                  visibility: {\n                    isProgressVisible: 'hidden'\n                  }\n                })({isProgressVisible})\n              }],\n              [NotificationBadgeContext, {\n                staticColor: staticColor,\n                size: props.size === 'XS' ? undefined : props.size,\n                isDisabled: isDisabled,\n                styles: style({\n                  position: 'absolute',\n                  top: '--badgeTop',\n                  insetStart: '--badgePosition',\n                  marginTop: 'calc((self(height) * -1)/2)',\n                  marginStart: 'calc((self(height) * -1)/2)',\n                  visibility: {\n                    isProgressVisible: 'hidden'\n                  }\n                })({isProgressVisible})\n              }]\n            ]}>\n            {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n            {isPending &&\n              <div\n                className={style({\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  visibility: {\n                    default: 'hidden',\n                    isProgressVisible: 'visible'\n                  }\n                })({isProgressVisible, isPending})}>\n                <ProgressCircle\n                  isIndeterminate\n                  aria-label={stringFormatter.format('button.pending')}\n                  size=\"S\"\n                  staticColor={staticColor}\n                  styles={style({\n                    size: {\n                      size: {\n                        XS: 12,\n                        S: 14,\n                        M: 18,\n                        L: 20,\n                        XL: 24\n                      }\n                    }\n                  })({size})} />\n              </div>\n              }\n          </Provider>\n        </>\n      )}\n    </RACButton>\n  );\n});\n","/*\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, DOMRef, DOMRefValue} from '@react-types/shared';\nimport {ContextValue, SlotProps} from 'react-aria-components';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {fontRelative, style} from '../style' with {type: 'macro'};\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {NumberFormatter} from '@internationalized/number';\nimport React, {createContext, forwardRef} from 'react';\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface NotificationBadgeStyleProps {\n  /**\n   * The size of the notification badge.\n   *\n   * @default 'S'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL'\n}\n\nexport interface NotificationBadgeProps extends DOMProps, AriaLabelingProps, StyleProps, NotificationBadgeStyleProps, SlotProps {\n  /**\n   * The value to be displayed in the notification badge.\n   */\n  value?: number | null\n}\n\ninterface NotificationBadgeContextProps extends Partial<NotificationBadgeProps> {\n  isDisabled?: boolean,\n  staticColor?: 'black' | 'white' | 'auto'\n}\n\nexport const NotificationBadgeContext = createContext<ContextValue<Partial<NotificationBadgeContextProps>, DOMRefValue<HTMLDivElement>>>(null);\n\nconst badge = style({\n  display: {\n    default: 'flex',\n    isDisabled: 'none'\n  },\n  font: 'ui',\n  color: {\n    default: 'white',\n    isStaticColor: 'auto',\n    forcedColors: 'ButtonText'\n  },\n  fontSize: {\n    size: {\n      S: 'ui-xs',\n      M: 'ui-xs',\n      L: 'ui-sm',\n      XL: 'ui'\n    }\n  },\n  borderStyle: {\n    forcedColors: 'solid'\n  },\n  borderWidth: {\n    forcedColors: '[1px]'\n  },\n  borderColor: {\n    forcedColors: 'ButtonBorder'\n  },\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: {\n    default: 'accent',\n    isStaticColor: 'transparent-overlay-1000',\n    forcedColors: 'ButtonFace'\n  },\n  height: {\n    size: {\n      S: {\n        default: 12,\n        isIndicatorOnly: 8\n      },\n      M: {\n        default: fontRelative(18), // sort of arbitrary? tried to get as close to the figma designs as possible\n        isIndicatorOnly: 8\n      },\n      L: {\n        default: 16,\n        isIndicatorOnly: fontRelative(12)\n      },\n      XL: {\n        default: 18,\n        isIndicatorOnly: fontRelative(12)\n      }\n    }\n  },\n  aspectRatio: {\n    isIndicatorOnly: 'square',\n    isSingleDigit: 'square'\n  },\n  width: 'max',\n  paddingX: {\n    isDoubleDigit: 'edge-to-text'\n  },\n  borderRadius: 'pill'\n}, getAllowedOverrides());\n\n/**\n * Notification badges are used to indicate new or pending activity .\n */\nexport const NotificationBadge = forwardRef(function Badge(props: NotificationBadgeProps, ref: DOMRef<HTMLDivElement>) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  [props, ref] = useSpectrumContextProps(props, ref, NotificationBadgeContext);\n  let {\n    size = 'S',\n    value,\n    isDisabled = false,\n    staticColor,\n    ...otherProps\n  } = props as NotificationBadgeContextProps;\n  let domRef = useDOMRef(ref);\n  let {locale} = useLocale();\n  let formattedValue = '';\n\n  let isIndicatorOnly = false;\n  let isSingleDigit = false;\n  let isDoubleDigit = false;\n\n  if (value == null) {\n    isIndicatorOnly = true;\n  } else if (value <= 0) {\n    throw new Error('Value cannot be negative or zero');\n  } else if (!Number.isInteger(value)) {\n    throw new Error('Value must be a positive integer');\n  } else {\n    formattedValue = new NumberFormatter(locale).format(Math.min(value, 99));\n    let length = Math.log(value <= 99 ? value : 99) * Math.LOG10E + 1 | 0;  // for positive integers (https://stackoverflow.com/questions/14879691/get-number-of-digits-with-javascript)\n    if (length === 1) {\n      isSingleDigit = true;\n    } else if (length === 2) {\n      isDoubleDigit = true;\n    }\n\n    if (value > 99) {\n      formattedValue = stringFormatter.format('notificationbadge.plus', {notifications: formattedValue});\n    }\n  }\n\n  let ariaLabel = props['aria-label'] || undefined;\n  if (ariaLabel === undefined && isIndicatorOnly) {\n    ariaLabel = stringFormatter.format('notificationbadge.indicatorOnly');\n  }\n\n  return (\n    <span\n      {...filterDOMProps(otherProps, {labelable: true})}\n      role={ariaLabel && 'img'}\n      aria-label={ariaLabel}\n      className={(props.UNSAFE_className || '') + badge({size, isIndicatorOnly, isSingleDigit, isDoubleDigit, isDisabled, isStaticColor: !!staticColor}, props.styles)}\n      style={props.UNSAFE_style}\n      ref={domRef}>\n      {formattedValue}\n    </span>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ContextValue, ProgressBar as RACProgressBar, ProgressBarProps as RACProgressBarProps} from 'react-aria-components';\nimport {createContext, forwardRef} from 'react';\nimport {DOMRef, DOMRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {getAllowedOverrides, staticColor, StylesPropWithHeight, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {keyframes} from '../style/style-macro' with {type: 'macro'};\nimport {pxToRem} from './progress-utils' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nconst pxToRemDynamic = (px: number): string => (px / 16) + 'rem';\nexport interface ProgressCircleStyleProps {\n  /**\n   * The size of the ProgressCircle.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L',\n  /** The static color style to apply. Useful when the button appears over a color background. */\n  staticColor?: 'black' | 'white' | 'auto',\n  /**\n   * Whether presentation is indeterminate when progress isn't known.\n   */\n  isIndeterminate?: boolean\n}\n\nexport const ProgressCircleContext = createContext<ContextValue<Partial<ProgressCircleProps>, DOMRefValue<HTMLDivElement>>>(null);\n\n// Double check the types passed to each style, may not need all for each\nconst wrapper = style<ProgressCircleStyleProps>({\n  ...staticColor(),\n  size: {\n    default: 32,\n    size: {\n      S: 16,\n      L: 64\n    }\n  },\n  aspectRatio: 'square'\n}, getAllowedOverrides({height: true}));\n\nconst track = style({\n  stroke: {\n    default: 'gray-300',\n    isStaticColor: 'transparent-overlay-300',\n    forcedColors: 'Background'\n  },\n  strokeWidth: {\n    default: `[${pxToRem(3)}]`,\n    size: {\n      S: `[${pxToRem(2)}]`,\n      L: `[${pxToRem(4)}]`\n    },\n    forcedColors: {\n      default: `[${pxToRem(2)}]`,\n      size: {\n        S: `[${pxToRem(1)}]`,\n        L: `[${pxToRem(3)}]`\n      }\n    }\n  }\n});\n\nconst fill = style({\n  stroke: {\n    default: 'blue-900',\n    isStaticColor: 'transparent-overlay-900',\n    forcedColors: 'ButtonText'\n  },\n  rotate: -90,\n  transformOrigin: 'center',\n  strokeWidth: {\n    default: `[${pxToRem(3)}]`,\n    size: {\n      S: `[${pxToRem(2)}]`,\n      L: `[${pxToRem(4)}]`\n    }\n  }\n});\n\nconst hcmStroke = style({\n  stroke: {\n    default: 'transparent',\n    forcedColors: 'ButtonText'\n  },\n  strokeWidth: {\n    default: `[${pxToRem(3)}]`,\n    size: {\n      S: `[${pxToRem(2)}]`,\n      L: `[${pxToRem(4)}]`\n    }\n  }\n});\n\nexport interface ProgressCircleProps extends Omit<RACProgressBarProps, 'children' | 'style' | 'valueLabel' | 'formatOptions' | 'label' | 'className' | keyof GlobalDOMAttributes>, ProgressCircleStyleProps, UnsafeStyles {\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StylesPropWithHeight\n}\n\nconst rotationAnimation = keyframes(`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`);\n\n// stroke-dashoffset represents `100 - percentage`. See below for how this works.\nconst dashoffsetAnimation = keyframes(`\n  0%, 100% {\n    stroke-dashoffset: 75;\n  }\n\n  30% {\n    stroke-dashoffset: 20;\n  }\n`);\n\n/**\n * ProgressCircles show the progression of a system operation such as downloading, uploading, or processing, in a visual way.\n * They can represent determinate or indeterminate progress.\n */\nexport const ProgressCircle = /*#__PURE__*/ forwardRef(function ProgressCircle(props: ProgressCircleProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ProgressCircleContext);\n  let {\n    size = 'M',\n    staticColor,\n    UNSAFE_style,\n    UNSAFE_className = ''\n  } = props;\n  let domRef = useDOMRef(ref);\n\n  let strokeWidth = 3;\n  if (size === 'S') {\n    strokeWidth = 2;\n  } else if (size === 'L') {\n    strokeWidth = 4;\n  }\n\n  // SVG strokes are centered, so subtract half the stroke width from the radius to create an inner stroke.\n  let radius = `calc(50% - ${pxToRemDynamic(strokeWidth / 2)})`;\n  let isStaticColor = !!staticColor;\n\n  return (\n    <RACProgressBar\n      {...props}\n      ref={domRef}\n      style={UNSAFE_style}\n      className={renderProps => UNSAFE_className + wrapper({\n        ...renderProps,\n        size,\n        staticColor\n      }, props.styles)}>\n      {({percentage, isIndeterminate}) => (\n        <svg\n          fill=\"none\"\n          width=\"100%\"\n          height=\"100%\">\n          <circle\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            className={hcmStroke({size})} />\n          <circle\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            className={track({isStaticColor, size})} />\n          <circle\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            className={fill({isStaticColor, size})}\n            style={{\n              // These cubic-bezier timing functions were derived from the previous animation keyframes\n              // using a best fit algorithm, and then manually adjusted to approximate the original animation.\n              animation: isIndeterminate ? `${rotationAnimation} 1s cubic-bezier(.6, .1, .3, .9) infinite, ${dashoffsetAnimation} 1s cubic-bezier(.25, .1, .25, 1.3) infinite` : undefined\n            }}\n            // Normalize the path length to 100 so we can easily set stroke-dashoffset to a percentage.\n            pathLength=\"100\"\n            // Add extra gap between dashes so 0% works in Chrome.\n            strokeDasharray=\"100 200\"\n            strokeDashoffset={isIndeterminate || percentage == null ? undefined : 100 - percentage}\n            strokeLinecap=\"round\" />\n        </svg>\n      )}\n    </RACProgressBar>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {baseColor, focusRing, fontRelative, lightDark, linearGradient, style} from '../style' with {type: 'macro'};\nimport {ButtonRenderProps, ContextValue, Link, LinkProps, OverlayTriggerStateContext, Provider, Button as RACButton, ButtonProps as RACButtonProps} from 'react-aria-components';\nimport {centerBaseline} from './CenterBaseline';\nimport {control, getAllowedOverrides, staticColor, StyleProps} from './style-utils' with {type: 'macro'};\nimport {createContext, forwardRef, ReactNode, useContext, useEffect, useState} from 'react';\nimport {FocusableRef, FocusableRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {pressScale} from './pressScale';\nimport {ProgressCircle} from './ProgressCircle';\nimport {SkeletonContext} from './Skeleton';\nimport {Text, TextContext} from './Content';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useFormProps} from './Form';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\ninterface ButtonStyleProps {\n  /**\n   * The [visual style](https://spectrum.adobe.com/page/button/#Options) of the button.\n   *\n   * @default 'primary'\n   */\n  variant?: 'primary' | 'secondary' | 'accent' | 'negative' | 'premium' | 'genai',\n  /**\n   * The background style of the Button.\n   *\n   * @default 'fill'\n   */\n  fillStyle?: 'fill' | 'outline',\n  /**\n   * The size of the Button.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** The static color style to apply. Useful when the Button appears over a color background. */\n  staticColor?: 'white' | 'black' | 'auto'\n}\n\nexport interface ButtonProps extends Omit<RACButtonProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps, ButtonStyleProps {\n  /** The content to display in the Button. */\n  children: ReactNode\n}\n\nexport interface LinkButtonProps extends Omit<LinkProps, 'className' | 'style' | 'children' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps, ButtonStyleProps {\n  /** The content to display in the Button. */\n  children: ReactNode\n}\n\nexport const ButtonContext = createContext<ContextValue<Partial<ButtonProps>, FocusableRefValue<HTMLButtonElement>>>(null);\nexport const LinkButtonContext = createContext<ContextValue<Partial<ButtonProps>, FocusableRefValue<HTMLAnchorElement>>>(null);\n\nconst button = style<ButtonRenderProps & ButtonStyleProps & {isStaticColor: boolean}>({\n  ...focusRing(),\n  ...staticColor(),\n  ...control({shape: 'pill', wrap: true, icon: true}),\n  position: 'relative',\n  justifyContent: 'center',\n  textAlign: 'start',\n  fontWeight: 'bold',\n  userSelect: 'none',\n  width: 'fit',\n  textDecoration: 'none', // for link buttons\n  transition: 'default',\n  borderStyle: 'solid',\n  borderWidth: {\n    fillStyle: {\n      fill: 0,\n      outline: 2\n    },\n    variant: {\n      premium: 0,\n      genai: 0\n    }\n  },\n  borderColor: {\n    variant: {\n      primary: baseColor('gray-800'),\n      secondary: baseColor('gray-300')\n    },\n    isDisabled: 'disabled',\n    isStaticColor: {\n      variant: {\n        primary: baseColor('transparent-overlay-800'),\n        secondary: baseColor('transparent-overlay-300')\n      },\n      isDisabled: 'transparent-overlay-300'\n    },\n    forcedColors: {\n      default: 'ButtonBorder',\n      isHovered: 'Highlight',\n      isDisabled: 'GrayText'\n    }\n  },\n  backgroundColor: {\n    fillStyle: {\n      fill: {\n        variant: {\n          primary: baseColor('neutral'),\n          secondary: baseColor('gray-100'),\n          accent: {\n            default: lightDark('accent-900', 'accent-700'),\n            isHovered: lightDark('accent-1000', 'accent-600'),\n            isPressed: lightDark('accent-1000', 'accent-600'),\n            isFocusVisible: lightDark('accent-1000', 'accent-600')\n          },\n          negative: {\n            default: lightDark('negative-900', 'negative-700'),\n            isHovered: lightDark('negative-1000', 'negative-600'),\n            isPressed: lightDark('negative-1000', 'negative-600'),\n            isFocusVisible: lightDark('negative-1000', 'negative-600')\n          },\n          premium: 'gray-100',\n          genai: 'gray-100'\n        },\n        isDisabled: 'disabled'\n      },\n      outline: {\n        variant: {\n          premium: 'gray-100',\n          genai: 'gray-100'\n        },\n        default: 'transparent',\n        isHovered: 'gray-100',\n        isPressed: 'gray-100',\n        isFocusVisible: 'gray-100',\n        isDisabled: {\n          default: 'transparent',\n          variant: {\n            premium: 'gray-100',\n            genai: 'gray-100'\n          }\n        }\n      }\n    },\n    isStaticColor: {\n      fillStyle: {\n        fill: {\n          variant: {\n            primary: baseColor('transparent-overlay-800'),\n            secondary: baseColor('transparent-overlay-100'),\n            premium: 'transparent-overlay-100',\n            genai: 'transparent-overlay-100'\n          },\n          isDisabled: 'transparent-overlay-100'\n        },\n        outline: {\n          variant: {\n            premium: 'transparent-overlay-100',\n            genai: 'transparent-overlay-100'\n          },\n          default: 'transparent',\n          isHovered: 'transparent-overlay-100',\n          isPressed: 'transparent-overlay-100',\n          isFocusVisible: 'transparent-overlay-100',\n          isDisabled: {\n            default: 'transparent',\n            variant: {\n              premium: 'transparent-overlay-100',\n              genai: 'transparent-overlay-100'\n            }\n          }\n        }\n      }\n    },\n    forcedColors: {\n      fillStyle: {\n        fill: {\n          default: 'ButtonText',\n          isHovered: 'Highlight',\n          isDisabled: 'GrayText'\n        },\n        outline: 'ButtonFace'\n      }\n    }\n  },\n  color: {\n    fillStyle: {\n      fill: {\n        variant: {\n          primary: 'gray-25',\n          secondary: baseColor('neutral'),\n          accent: 'white',\n          negative: 'white',\n          premium: 'white',\n          genai: 'white'\n        },\n        isDisabled: 'disabled'\n      },\n      outline: {\n        default: baseColor('neutral'),\n        variant: {\n          premium: 'white',\n          genai: 'white'\n        },\n        isDisabled: 'disabled'\n      }\n    },\n    isStaticColor: {\n      fillStyle: {\n        fill: {\n          variant: {\n            primary: 'auto',\n            secondary: baseColor('transparent-overlay-800'),\n            premium: 'white',\n            genai: 'white'\n          }\n        },\n        outline: {\n          variant: {\n            premium: 'white',\n            genai: 'white'\n          },\n          default: baseColor('transparent-overlay-800')\n        }\n      },\n      isDisabled: 'transparent-overlay-400'\n    },\n    forcedColors: {\n      fillStyle: {\n        fill: {\n          default: 'ButtonFace',\n          isDisabled: 'HighlightText'\n        },\n        outline: {\n          default: 'ButtonText',\n          isDisabled: 'GrayText'\n        }\n      }\n    }\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  outlineColor: {\n    default: 'focus-ring',\n    isStaticColor: 'transparent-overlay-1000',\n    forcedColors: 'Highlight'\n  },\n  forcedColorAdjust: 'none',\n  disableTapHighlight: true\n}, getAllowedOverrides());\n\n// Put the gradient background on a separate element from the button to work around a Safari\n// bug where transitions of custom properties cause layout flickering if any properties use rems. ð¤£\n// https://bugs.webkit.org/show_bug.cgi?id=285622\nconst gradient = style({\n  position: 'absolute',\n  inset: 0,\n  zIndex: -1,\n  transition: 'default',\n  borderRadius: 'inherit',\n  backgroundImage: {\n    variant: {\n      premium: {\n        default: linearGradient('to bottom right', ['fuchsia-900', 0], ['indigo-900', 66], ['blue-900', 100]),\n        isHovered: linearGradient('to bottom right', ['fuchsia-1000', 0], ['indigo-1000', 66], ['blue-1000', 100]),\n        isPressed: linearGradient('to bottom right', ['fuchsia-1000', 0], ['indigo-1000', 66], ['blue-1000', 100]),\n        isFocusVisible: linearGradient('to bottom right', ['fuchsia-1000', 0], ['indigo-1000', 66], ['blue-1000', 100])\n      },\n      genai: {\n        default: linearGradient('to bottom right', ['red-900', 0], ['magenta-900', 33], ['indigo-900', 100]),\n        isHovered: linearGradient('to bottom right', ['red-1000', 0], ['magenta-1000', 33], ['indigo-1000', 100]),\n        isPressed: linearGradient('to bottom right', ['red-1000', 0], ['magenta-1000', 33], ['indigo-1000', 100]),\n        isFocusVisible: linearGradient('to bottom right', ['red-1000', 0], ['magenta-1000', 33], ['indigo-1000', 100])\n      }\n    },\n    isDisabled: 'none',\n    forcedColors: 'none'\n  },\n  // Force gradient colors to remain static between light and dark theme.\n  colorScheme: {\n    variant: {\n      premium: 'light',\n      genai: 'light'\n    }\n  }\n});\n\nexport function usePendingState(isPending: boolean) {\n  let [isProgressVisible, setIsProgressVisible] = useState(false);\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n    if (isPending) {\n      timeout = setTimeout(() => {\n        setIsProgressVisible(true);\n      }, 1000);\n    } else {\n      setIsProgressVisible(false);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [isPending]);\n  return {isProgressVisible};\n}\n\n/**\n * Buttons allow users to perform an action.\n * They have multiple styles for various needs, and are ideal for calling attention to\n * where a user needs to do something in order to move forward in a flow.\n */\nexport const Button = forwardRef(function Button(props: ButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ButtonContext);\n  props = useFormProps(props);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let {\n    isPending = false,\n    variant = 'primary',\n    fillStyle = 'fill',\n    size = 'M',\n    staticColor\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let overlayTriggerState = useContext(OverlayTriggerStateContext);\n\n  let {isProgressVisible} = usePendingState(isPending);\n\n  return (\n    <RACButton\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + button({\n        ...renderProps,\n        // Retain hover styles when an overlay is open.\n        isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n        isDisabled: renderProps.isDisabled || isProgressVisible,\n        variant,\n        fillStyle,\n        size,\n        staticColor,\n        isStaticColor: !!staticColor\n      }, props.styles)}>\n      {(renderProps) => (<>\n        {variant === 'genai' || variant === 'premium'\n          ? (\n            <span\n              className={gradient({\n                ...renderProps,\n                // Retain hover styles when an overlay is open.\n                isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n                isDisabled: renderProps.isDisabled || isProgressVisible,\n                variant\n              })} />\n             )\n          : null}\n        <Provider\n          values={[\n            [SkeletonContext, null],\n            [TextContext, {\n              styles: style({\n                paddingY: '--labelPadding',\n                order: 1,\n                visibility: {\n                  isProgressVisible: 'hidden'\n                }\n              })({isProgressVisible}),\n              // @ts-ignore data-attributes allowed on all JSX elements, but adding to DOMProps has been problematic in the past\n              'data-rsp-slot': 'text'\n            }],\n            [IconContext, {\n              render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n              styles: style({\n                size: fontRelative(20),\n                marginStart: '--iconMargin',\n                flexShrink: 0,\n                visibility: {\n                  isProgressVisible: 'hidden'\n                }\n              })({isProgressVisible})\n            }]\n          ]}>\n          {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n          {isPending &&\n            <div\n              className={style({\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                visibility: {\n                  default: 'hidden',\n                  isProgressVisible: 'visible'\n                }\n              })({isProgressVisible, isPending})}>\n              <ProgressCircle\n                isIndeterminate\n                aria-label={stringFormatter.format('button.pending')}\n                size=\"S\"\n                staticColor={staticColor}\n                styles={style({\n                  size: {\n                    size: {\n                      S: 14,\n                      M: 18,\n                      L: 20,\n                      XL: 24\n                    }\n                  }\n                })({size})} />\n            </div>\n          }\n        </Provider>\n      </>)}\n    </RACButton>\n  );\n});\n\n/**\n * A LinkButton combines the functionality of a link with the appearance of a button. Useful for allowing users to navigate to another page.\n */\nexport const LinkButton = forwardRef(function LinkButton(props: LinkButtonProps, ref: FocusableRef<HTMLAnchorElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, LinkButtonContext);\n  props = useFormProps(props);\n  let domRef = useFocusableRef(ref);\n  let overlayTriggerState = useContext(OverlayTriggerStateContext);\n\n  return (\n    <Link\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + button({\n        ...renderProps,\n        // Retain hover styles when an overlay is open.\n        isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n        variant: props.variant || 'primary',\n        fillStyle: props.fillStyle || 'fill',\n        size: props.size || 'M',\n        staticColor: props.staticColor,\n        isStaticColor: !!props.staticColor,\n        isPending: false\n      }, props.styles)}>\n      <Provider\n        values={[\n          [SkeletonContext, null],\n          [TextContext, {\n            styles: style({paddingY: '--labelPadding', order: 1}),\n            // @ts-ignore data-attributes allowed on all JSX elements, but adding to DOMProps has been problematic in the past\n            'data-rsp-slot': 'text'\n          }],\n          [IconContext, {\n            render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n            styles: style({size: fontRelative(20), marginStart: '--iconMargin', flexShrink: 0})\n          }]\n        ]}>\n        {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n      </Provider>\n    </Link>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ButtonGroupContext} from './ButtonGroup';\nimport {CloseButton} from './CloseButton';\nimport {composeRenderProps, OverlayTriggerStateContext, Provider, Dialog as RACDialog, DialogProps as RACDialogProps} from 'react-aria-components';\nimport {ContentContext, FooterContext, HeaderContext, HeadingContext} from './Content';\nimport {DOMRef, GlobalDOMAttributes} from '@react-types/shared';\nimport {forwardRef} from 'react';\nimport {ImageContext} from './Image';\nimport {Modal} from './Modal';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleProps} from './style-utils';\nimport {useDOMRef} from '@react-spectrum/utils';\n\n// TODO: what style overrides should be allowed?\nexport interface DialogProps extends Omit<RACDialogProps, 'className' | 'style' | keyof GlobalDOMAttributes>, StyleProps {\n  /**\n   * Whether the Dialog is dismissible.\n   */\n  isDismissible?: boolean,\n  /**\n   * The size of the Dialog.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** Whether pressing the escape key to close the dialog should be disabled. */\n  isKeyboardDismissDisabled?: boolean\n}\n\nconst image = style({\n  width: 'full',\n  height: 140,\n  flexShrink: 0,\n  objectFit: 'cover'\n});\n\nconst heading = style({\n  flexGrow: 1,\n  marginY: 0,\n  font: 'heading'\n});\n\nconst header = style({\n  font: 'body-lg'\n});\n\nconst content =  style({\n  flexGrow: 1,\n  flexShrink: {\n    [`@container (height < ${500 / 16}rem)`]: 0\n  },\n  overflowY: {\n    default: 'auto',\n    // Make the whole dialog scroll rather than only the content when the height is small.\n    [`@container (height < ${500 / 16}rem)`]: 'visible'\n  },\n  font: 'body',\n  // TODO: adjust margin on mobile?\n  paddingX: {\n    default: 32\n  }\n});\n\nconst footer = style({\n  flexGrow: 1,\n  font: 'body'\n});\n\nconst buttonGroup = style({\n  marginStart: 'auto',\n  maxWidth: 'full'\n});\n\nexport const dialogInner = style({\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n  maxHeight: 'inherit',\n  boxSizing: 'border-box',\n  outlineStyle: 'none',\n  fontFamily: 'sans',\n  borderRadius: 'inherit',\n  overflow: 'auto'\n});\n\n/**\n * Dialogs are windows containing contextual information, tasks, or workflows that appear over the user interface.\n * Depending on the kind of Dialog, further interactions may be blocked until the Dialog is acknowledged.\n */\nexport const Dialog = forwardRef(function Dialog(props: DialogProps, ref: DOMRef) {\n  let {size = 'M', isDismissible, isKeyboardDismissDisabled} = props;\n  let domRef = useDOMRef(ref);\n\n  return (\n    <Modal size={size} isDismissable={isDismissible} isKeyboardDismissDisabled={isKeyboardDismissDisabled}>\n      <RACDialog\n        {...props}\n        ref={domRef}\n        style={props.UNSAFE_style}\n        className={(props.UNSAFE_className || '') + dialogInner}>\n        {composeRenderProps(props.children, (children) => (\n          // Render the children multiple times inside the wrappers we need to implement the layout.\n          // Each instance hides certain children so that they are all rendered in the correct locations.\n          // Reset OverlayTriggerStateContext so the buttons inside the dialog don't retain their hover state.\n          <OverlayTriggerStateContext.Provider value={null}>\n            {/* Hero image */}\n            <Provider\n              values={[\n                [ImageContext, {styles: image}],\n                [HeadingContext, {isHidden: true}],\n                [HeaderContext, {isHidden: true}],\n                [ContentContext, {isHidden: true}],\n                [FooterContext, {isHidden: true}],\n                [ButtonGroupContext, {isHidden: true}]\n              ]}>\n              {children}\n            </Provider>\n            {/* Top header: heading, header, dismiss button, and button group (in fullscreen dialogs). */}\n            <div\n              className={style({\n                // Wrapper that creates the margin for the dismiss button.\n                display: 'flex',\n                alignItems: 'start',\n                columnGap: 12,\n                paddingStart: {\n                  default: 32\n                },\n                paddingEnd: {\n                  default: 32,\n                  isDismissible: 12\n                },\n                paddingTop: {\n                  default: 12 // margin to dismiss button\n                }\n              })({isDismissible: props.isDismissible})}>\n              <div\n                className={style({\n                  // Wrapper for heading, header, and button group.\n                  // This swaps orientation from horizontal to vertical at small screen sizes.\n                  display: 'flex',\n                  flexGrow: 1,\n                  marginTop: {\n                    default: 20, // 32 - 12 (handled above)\n                    ':empty': 0\n                  },\n                  marginBottom: {\n                    default: 16,\n                    ':empty': 0\n                  },\n                  columnGap: 24,\n                  rowGap: 8,\n                  flexDirection: {\n                    default: 'column',\n                    sm: 'row'\n                  },\n                  alignItems: {\n                    default: 'start',\n                    sm: 'center'\n                  }\n                })}>\n                <Provider\n                  values={[\n                    [ImageContext, {hidden: true}],\n                    [HeadingContext, {styles: heading}],\n                    [HeaderContext, {styles: header}],\n                    [ContentContext, {isHidden: true}],\n                    [FooterContext, {isHidden: true}],\n                    [ButtonGroupContext, {isHidden: true}]\n                  ]}>\n                  {children}\n                </Provider>\n              </div>\n              {props.isDismissible && \n                <CloseButton styles={style({marginBottom: 12})} />\n              }\n            </div>\n            {/* Main content */}\n            <Provider\n              values={[\n                [ImageContext, {hidden: true}],\n                [HeadingContext, {isHidden: true}],\n                [HeaderContext, {isHidden: true}],\n                [ContentContext, {styles: content}],\n                [FooterContext, {isHidden: true}],\n                [ButtonGroupContext, {isHidden: true}]\n              ]}>\n              {children}\n            </Provider>\n            {/* Footer and button group */}\n            <div\n              className={style({\n                display: 'flex',\n                paddingX: {\n                  default: 32\n                },\n                paddingBottom: {\n                  default: 32\n                },\n                paddingTop: {\n                  default: 32,\n                  ':empty': 0\n                },\n                gap: 24,\n                alignItems: 'center',\n                flexWrap: 'wrap'\n              })}>\n              <Provider\n                values={[\n                  [ImageContext, {hidden: true}],\n                  [HeadingContext, {isHidden: true}],\n                  [HeaderContext, {isHidden: true}],\n                  [ContentContext, {isHidden: true}],\n                  [FooterContext, {styles: footer}],\n                  [ButtonGroupContext, {isHidden: props.isDismissible, styles: buttonGroup, align: 'end'}]\n                ]}>\n                {children}\n              </Provider>\n            </div>\n          </OverlayTriggerStateContext.Provider>\n        ))}\n      </RACDialog>\n    </Modal>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ButtonContext, LinkButtonContext} from './Button';\nimport {ContextValue, Provider, SlotProps} from 'react-aria-components';\nimport {createContext, forwardRef, ReactNode, useCallback, useRef} from 'react';\nimport {DOMProps, DOMRef, DOMRefValue} from '@react-types/shared';\nimport {filterDOMProps, useLayoutEffect, useValueEffect} from '@react-aria/utils';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {\n  useDOMRef,\n  useResizeObserver\n} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\ninterface ButtonGroupStyleProps {\n  /**\n   * The axis the ButtonGroup should align with. Setting this to 'vertical' will prevent\n   * any switching behaviors between 'vertical' and 'horizontal'.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical',\n  /**\n   * The alignment of the Buttons within the ButtonGroup.\n   *\n   * @default 'start'\n   */\n  align?: 'start' | 'end' | 'center',\n  /**\n   * The size of the Buttons within the ButtonGroup.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL'\n}\n\nexport interface ButtonGroupProps extends ButtonGroupStyleProps, SlotProps, StyleProps, DOMProps {\n  /** The Buttons contained within the ButtonGroup. */\n  children: ReactNode,\n  /** Whether the Buttons in the ButtonGroup are all disabled. */\n  isDisabled?: boolean\n}\n\ninterface ButtonGroupContextValue extends Partial<ButtonGroupProps> {\n  /** Whether the ButtonGroup shouldn't be rendered. */\n  isHidden?: boolean\n}\n\nexport const ButtonGroupContext = createContext<ContextValue<Partial<ButtonGroupContextValue>, DOMRefValue<HTMLDivElement>>>({});\n\nconst buttongroup = style<ButtonGroupStyleProps>({\n  display: 'inline-flex',\n  position: 'relative',\n  gap: {\n    size: {\n      S: 8,\n      M: 12,\n      L: 12,\n      XL: 12\n    }\n  },\n  flexDirection: {\n    default: 'row',\n    orientation: {\n      vertical: 'column'\n    }\n  },\n  alignItems: {\n    default: 'center',\n    orientation: {\n      vertical: {\n        default: 'start',\n        align: {\n          end: 'end',\n          center: 'center'\n        }\n      }\n    }\n  },\n  justifyContent: {\n    orientation: {\n      vertical: {\n        default: 'start',\n        align: {\n          end: 'end',\n          center: 'center'\n        }\n      }\n    }\n  }\n}, getAllowedOverrides());\n\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nexport const ButtonGroup = forwardRef(function ButtonGroup(props: ButtonGroupProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ButtonGroupContext);\n  let domRef = useDOMRef(ref);\n  let {\n    size = 'M',\n    orientation = 'horizontal',\n    align = 'start',\n    children,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let [hasOverflow, setHasOverflow] = useValueEffect(false);\n\n  let checkForOverflow = useCallback(() => {\n    let computeHasOverflow = () => {\n      if (domRef.current && orientation === 'horizontal') {\n        let buttonGroupChildren = Array.from(domRef.current.children) as HTMLElement[];\n        let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n        // If any buttons have negative X positions (align=\"end\") or extend beyond\n        // the width of the button group (align=\"start\"), then switch to vertical.\n        if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n          return true;\n        }\n        return false;\n      }\n    };\n    if (orientation === 'horizontal') {\n      setHasOverflow(function* () {\n        // Force to horizontal for measurement.\n        yield false;\n\n        // Measure, and update if there is overflow.\n        yield computeHasOverflow();\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef, orientation, setHasOverflow, children]);\n\n  // There are two main reasons we need to remeasure:\n  // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)\n  useLayoutEffect(() => {\n    checkForOverflow();\n  }, [checkForOverflow]);\n\n  // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure\n  let parent = useRef<HTMLElement | null>(null);\n  useLayoutEffect(() => {\n    if (domRef.current) {\n      parent.current = domRef.current.parentElement as HTMLElement;\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef.current]);\n  useResizeObserver({ref: parent, onResize: checkForOverflow});\n\n  if ((props as ButtonGroupContextValue).isHidden) {\n    return null;\n  }\n\n  let context = {styles: style({flexShrink: 0}), size, isDisabled};\n  return (\n    <div\n      {...filterDOMProps(otherProps)}\n      ref={domRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + buttongroup({\n        align,\n        orientation: orientation === 'vertical' || hasOverflow ? 'vertical' : 'horizontal',\n        size\n      }, props.styles)}>\n      <Provider\n        values={[\n          [ButtonContext, context],\n          [LinkButtonContext, context]\n        ]}>\n        {children}\n      </Provider>\n    </div>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {baseColor, focusRing, style} from '../style' with {type: 'macro'};\nimport {Button, ButtonProps, ContextValue} from 'react-aria-components';\nimport {controlSize, getAllowedOverrides, staticColor, StyleProps} from './style-utils' with {type: 'macro'};\nimport {createContext, forwardRef} from 'react';\nimport CrossIcon from '../ui-icons/Cross';\nimport {FocusableRef, FocusableRefValue} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {pressScale} from './pressScale';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface CloseButtonProps extends Pick<ButtonProps, 'isDisabled' | 'onPress'>, StyleProps {\n  /**\n   * The size of the CloseButton.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** The static color style to apply. Useful when the Button appears over a color background. */\n  staticColor?: 'white' | 'black' | 'auto'\n}\n\nconst hoverBackground = {\n  default: 'gray-200',\n  isStaticColor: 'transparent-overlay-200'\n} as const;\n\nconst styles = style<CloseButtonProps & {isHovered: boolean, isFocusVisible: boolean, isPressed: boolean, isStaticColor: boolean}>({\n  ...focusRing(),\n  ...staticColor(),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  size: controlSize(),\n  flexShrink: 0,\n  borderRadius: 'full',\n  padding: 0,\n  borderStyle: 'none',\n  transition: 'default',\n  backgroundColor: {\n    default: 'transparent',\n    isHovered: hoverBackground,\n    isFocusVisible: hoverBackground,\n    isPressed: hoverBackground\n  },\n  '--iconPrimary': {\n    type: 'color',\n    value: {\n      default: baseColor('neutral'),\n      isDisabled: 'disabled',\n      isStaticColor: {\n        default: baseColor('transparent-overlay-800'),\n        isDisabled: 'transparent-overlay-400'\n      },\n      forcedColors: {\n        default: 'ButtonText',\n        isDisabled: 'GrayText'\n      }\n    }\n  },\n  outlineColor: {\n    default: 'focus-ring',\n    isStaticColor: 'transparent-overlay-1000',\n    forcedColors: 'Highlight'\n  }\n}, getAllowedOverrides());\n\nexport const CloseButtonContext = createContext<ContextValue<Partial<CloseButtonProps>, FocusableRefValue<HTMLButtonElement>>>(null);\n\n/**\n * A CloseButton allows a user to dismiss a dialog.\n */\nexport const CloseButton = forwardRef(function CloseButton(props: CloseButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, CloseButtonContext);\n  let {UNSAFE_style, UNSAFE_className = ''} = props;\n  let domRef = useFocusableRef(ref);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  return (\n    <Button\n      {...props}\n      ref={domRef}\n      slot=\"close\"\n      aria-label={props['aria-label'] || stringFormatter.format('dialog.dismiss')}\n      style={pressScale(domRef, UNSAFE_style)}\n      className={renderProps => UNSAFE_className + styles({...renderProps, staticColor: props.staticColor, isStaticColor: !!props.staticColor}, props.styles)}>\n      <CrossIcon size={({S: 'L', M: 'XL', L: 'XXL', XL: 'XXXL'} as const)[props.size || 'M']} />\n    </Button>\n  );\n});\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport Cross_L from './S2_CrossSize200.svg';\nimport Cross_M from './S2_CrossSize100.svg';\nimport Cross_S from './S2_CrossSize75.svg';\nimport Cross_XL from './S2_CrossSize300.svg';\nimport Cross_XXL from './S2_CrossSize400.svg';\nimport Cross_XXXL from './S2_CrossSize500.svg';\nimport Cross_XXXXL from './S2_CrossSize600.svg';\nimport {ReactNode, SVGProps} from 'react';\nimport {style} from '../style' with {type: 'macro'};\n\nlet styles = style({\n  width: {\n    size: {\n      M: 8,\n      L: 10,\n      XL: 12,\n      XXL: 12,\n      XXXL: 14,\n      XXXXL: 16,\n      S: 8\n    }\n  },\n  height: {\n    size: {\n      M: 8,\n      L: 10,\n      XL: 12,\n      XXL: 12,\n      XXXL: 14,\n      XXXXL: 16,\n      S: 8\n    }\n  }\n});\n\nexport default function Cross(props: SVGProps<SVGSVGElement> & {size?: 'M' | 'L' | 'XL' | 'XXL' | 'XXXL' | 'XXXXL' | 'S'}): ReactNode {\n  let {size = 'M', ...otherProps} = props;\n  switch (size) {\n    case 'M':\n      return <Cross_M {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'L':\n      return <Cross_L {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XL':\n      return <Cross_XL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XXL':\n      return <Cross_XXL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XXXL':\n      return <Cross_XXXL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'XXXXL':\n      return <Cross_XXXXL {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n    case 'S':\n      return <Cross_S {...otherProps} className={(otherProps.className || '') + styles({size})} />;\n  }\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {colorScheme} from './style-utils' with {type: 'macro'};\nimport {ColorSchemeContext} from './Provider';\nimport {DOMRef} from '@react-types/shared';\nimport {forwardRef, MutableRefObject, useCallback, useContext} from 'react';\nimport {ModalOverlay, ModalOverlayProps, Modal as RACModal, useLocale} from 'react-aria-components';\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\n\ninterface ModalProps extends ModalOverlayProps {\n  /**\n   * The size of the Modal.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL' | 'fullscreen' | 'fullscreenTakeover'\n}\n\nconst modalOverlayStyles = style({\n  ...colorScheme(),\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: 'full',\n  height: '--page-height',\n  isolation: 'isolate',\n  backgroundColor: 'transparent-black-500',\n  opacity: {\n    isEntering: 0,\n    isExiting: 0\n  },\n  transition: 'opacity',\n  transitionDuration: {\n    default: 250,\n    isExiting: 130\n  }\n});\n\nconst modalWrapper = style({\n  position: 'sticky',\n  top: 0,\n  left: 0,\n  width: 'full',\n  height: '--visual-viewport-height',\n  display: 'flex',\n  alignItems: {\n    default: 'center',\n    size: {\n      fullscreenTakeover: 'start'\n    }\n  },\n  justifyContent: 'center'\n});\n\n/**\n * A modal is an overlay element which blocks interaction with elements outside it.\n */\nexport const Modal = forwardRef(function Modal(props: ModalProps, ref: DOMRef<HTMLDivElement>) {\n  let domRef = useDOMRef(ref);\n  let colorScheme = useContext(ColorSchemeContext);\n  let {locale, direction} = useLocale();\n\n  // TODO: should we pass through lang and dir props in RAC?\n  let modalRef = useCallback((el: HTMLDivElement) => {\n    (domRef as MutableRefObject<HTMLDivElement>).current = el;\n    if (el) {\n      el.lang = locale;\n      el.dir = direction;\n    }\n  }, [locale, direction, domRef]);\n\n  return (\n    <ModalOverlay\n      {...props}\n      className={renderProps => modalOverlayStyles({...renderProps, colorScheme})}>\n      <div className={modalWrapper({size: props.size})} style={{containerType: 'size'} as any}>\n        <RACModal\n          {...props}\n          ref={modalRef}\n          className={renderProps => style({\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: {\n              default: 'xl',\n              size: {\n                fullscreenTakeover: 'none'\n              }\n            },\n            width: {\n              size: {\n                // Copied from designs, not sure if correct.\n                S: 400,\n                M: 480,\n                L: 640,\n                XL: 960,\n                fullscreen: 'calc(100% - 40px)',\n                fullscreenTakeover: 'full'\n              }\n            },\n            height: {\n              size: {\n                fullscreen: 'calc(100% - 40px)',\n                fullscreenTakeover: 'full'\n              }\n            },\n            maxWidth: {\n              default: '90vw',\n              size: {\n                fullscreen: 'none',\n                fullscreenTakeover: 'none'\n              }\n            },\n            maxHeight: {\n              default: '90%',\n              size: {\n                fullscreen: 'none',\n                fullscreenTakeover: 'none'\n              }\n            },\n            paddingBottom: {\n              size: {\n                // Extend background behind the iOS Safari toolbar and keyboard.\n                fullscreenTakeover: '[100vh]'\n              }\n            },\n            '--s2-container-bg': {\n              type: 'backgroundColor',\n              value: 'layer-2'\n            },\n            backgroundColor: '--s2-container-bg',\n            opacity: {\n              isEntering: 0,\n              isExiting: 0\n            },\n            translateY: {\n              isEntering: 20\n            },\n            transition: '[opacity, translate]',\n            transitionDuration: {\n              default: 250,\n              isExiting: 130\n            },\n            transitionDelay: {\n              default: 160,\n              isExiting: 0\n            },\n            // Transparent outline for WHCM.\n            outlineStyle: 'solid',\n            outlineWidth: 1,\n            outlineColor: 'transparent'\n          })({...renderProps, size: props.size})} />\n      </div>\n    </ModalOverlay>\n  );\n});\n","import currentProjectionData from '../data/projections-current.json';\r\nimport nextProjectionData from '../data/projections-next.json';\r\nimport {\r\n  ActionButton,\r\n  Checkbox,\r\n  Divider,\r\n  Image,\r\n  ContextualHelp,\r\n  Heading,\r\n  Content,\r\n  ActionMenu,\r\n  MenuItem,\r\n  Text,\r\n  Dialog,\r\n  DialogTrigger,\r\n  TextArea,\r\n  ButtonGroup,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  TabList,\r\n  TabPanel\r\n} from '@react-spectrum/s2';\r\nimport { style } from '@react-spectrum/s2/style' with { type: 'macro' };\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { NumberField, Input, Group, ToggleButton } from 'react-aria-components';\r\nimport { getDifference, isWinner, statMap } from '../util.js';\r\nimport Reset from '@react-spectrum/s2/icons/Revert';\r\nimport SelectAll from '@react-spectrum/s2/icons/SelectAllItems';\r\nimport SelectNo from '@react-spectrum/s2/icons/SelectNo';\r\nimport Edit from '@react-spectrum/s2/icons/Edit';\r\nimport Hand from '@react-spectrum/s2/icons/Hand';\r\nimport Cancel from '@react-spectrum/s2/icons/Cancel';\r\n// import Cancel from '@react-spectrum/s2/icons/Im';\r\nimport type { CompareCategory } from '../types.js';\r\n\r\nconst ROSTER_SLOTS = 11;\r\nconst MANUAL_PROJECTIONS = 'manualProjections';\r\nconst HTBB_REGEX = new RegExp(\r\n  /([\\d\\.]+)\\s+\\(([\\d\\.]+)\\/([\\d\\.]+)\\)\\s+([\\d\\.]+)\\s+\\(([\\d\\.]+)\\/([\\d\\.]+)\\)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)/\r\n);\r\n//   0.481 (9.0/18.7)\r\n// \t0.873 (4.6/5.2)\r\n// \t3.4\r\n// \t25.9\r\n// \t11.1\r\n// \t4.0\r\n// \t1.0\r\n// \t4.0\r\n// \t3.5\r\n\r\nfunction filterPosition(position: string) {\r\n  return !['G', 'F', 'Util', 'IL'].includes(position);\r\n}\r\n\r\nexport function Projections(props) {\r\n  return (\r\n    <Tabs aria-label=\"Projections\">\r\n      <TabList>\r\n        <Tab id=\"current\">Current week</Tab>\r\n        <Tab id=\"next\" isDisabled={!Object.keys(nextProjectionData).length}>Next week</Tab>\r\n      </TabList>\r\n      <TabPanel id=\"current\">\r\n        <WeekProjections {...props} projectionData={currentProjectionData} />\r\n      </TabPanel>\r\n      <TabPanel id=\"next\">\r\n        <WeekProjections {...props} isNext projectionData={nextProjectionData} />\r\n      </TabPanel>\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nfunction WeekProjections(props) {\r\n  const { teams, stats, isNext, projectionData } = props;\r\n  const { dateRange, projections, rosters, schedule } = projectionData;\r\n\r\n  // TODO read manual stats in local storage (projections take precedence?)\r\n  const { team1, team2, initialCustomProjections, initialGamesCount } = useMemo(() => {\r\n    const [team1, team2] = Object.keys(rosters).sort((a) => (a === '5' ? -1 : 1));\r\n    const initialGamesCount: Record<string, Record<string, boolean>> = {};\r\n    const initialCustomProjections: Record<string, object> = {};\r\n    const manualProjections = JSON.parse(localStorage.getItem(MANUAL_PROJECTIONS) ?? '{}');\r\n    [...rosters[team1], ...rosters[team2]].forEach((p) => {\r\n      initialGamesCount[p.playerName] = Object.keys(schedule[p.playerTeamAbbr] ?? {}).reduce(\r\n        (acc, date) => {\r\n          // injured/out designations will default not have any games\r\n          acc[date] = !(p.playerStatus && ['INJ'].includes(p.playerStatus));\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n\r\n      if (projections[normalizeName(p.playerName)]) {\r\n        initialCustomProjections[p.playerName] = projections[normalizeName(p.playerName)];\r\n      } else if (manualProjections[p.playerName]) {\r\n        initialCustomProjections[p.playerName] = manualProjections[p.playerName];\r\n        initialCustomProjections[p.playerName].isManual = true;\r\n      } else {\r\n        const defaultValues = Object.keys(statMap).reduce((acc, cat) => {\r\n          acc[cat] = cat.includes('%') ? [0, 0] : 0;\r\n          return acc;\r\n        }, {});\r\n        initialCustomProjections[p.playerName] = deepClone(defaultValues);\r\n        //  projections[p.playerName] = deepClone(defaultValues);\r\n      }\r\n    });\r\n\r\n    return { team1, team2, initialCustomProjections, initialGamesCount };\r\n  }, [projectionData]);\r\n\r\n  const [gamesCount, setGamesCount] =\r\n    useState<Record<string, Record<string, boolean>>>(initialGamesCount);\r\n  const [customProjections, setCustomProjections] =\r\n    useState<Record<string, object>>(initialCustomProjections);\r\n\r\n  useEffect(() => {\r\n    setGamesCount(initialGamesCount);\r\n    setCustomProjections(initialCustomProjections);\r\n  }, projectionData);\r\n\r\n  const onGameToggle = (playerName: string, date: string) => {\r\n    setGamesCount((state) => {\r\n      state[playerName][date] = !state[playerName][date];\r\n      return deepClone(state);\r\n    });\r\n  };\r\n  const onDateToggle = (\r\n    roster: { playerName: string; playerStatus: string }[],\r\n    date: string,\r\n    isSelected: boolean\r\n  ) => {\r\n    setGamesCount((state) => {\r\n      roster.forEach(({ playerName, playerStatus }) => {\r\n        if (Object.keys(state[playerName]).includes(date) && playerStatus !== 'INJ') {\r\n          // TODO convert injured player logic to function (used in default gamesCount calc too)\r\n          state[playerName][date] = isSelected;\r\n        }\r\n      });\r\n      return deepClone(state);\r\n    });\r\n  };\r\n  const onPlayerToggle = (playerName: string, isSelected: boolean) => {\r\n    setGamesCount((state) => {\r\n      Object.keys(state[playerName]).forEach((date) => {\r\n        state[playerName][date] = isSelected;\r\n      });\r\n      return deepClone(state);\r\n    });\r\n  };\r\n  const onProjectionChange = (\r\n    playerName: string,\r\n    stat: string,\r\n    value: number | [number, number]\r\n  ) => {\r\n    // if no projection, save to local storage\r\n    if (!projections[normalizeName(playerName)]) {\r\n      const newStored = JSON.parse(localStorage.getItem(MANUAL_PROJECTIONS) ?? '{}');\r\n      if (!newStored[playerName]) newStored[playerName] = {};\r\n      newStored[playerName][stat] = value;\r\n      localStorage.setItem(MANUAL_PROJECTIONS, JSON.stringify(newStored));\r\n    }\r\n    setCustomProjections((state) => {\r\n      const newState = deepClone(state);\r\n      newState[playerName][stat] = value;\r\n      return newState;\r\n    });\r\n  };\r\n  // TODO combine w/ onProjectionChange?\r\n  const onBulkProjectionChange = (\r\n    playerName: string,\r\n    stats: Record<string, number | [number, number]>\r\n  ) => {\r\n    // if no projection, save to local storage\r\n    if (!projections[normalizeName(playerName)]) {\r\n      const newStored = JSON.parse(localStorage.getItem(MANUAL_PROJECTIONS) ?? '{}');\r\n      if (!newStored[playerName]) newStored[playerName] = {};\r\n      newStored[playerName] = stats;\r\n      localStorage.setItem(MANUAL_PROJECTIONS, JSON.stringify(newStored));\r\n    }\r\n    setCustomProjections((state) => {\r\n      const newState = deepClone(state);\r\n      newState[playerName] = stats;\r\n      return newState;\r\n    });\r\n  };\r\n  const onReset = (playerName: string) => {\r\n    setCustomProjections((state) => {\r\n      const newState = deepClone(state);\r\n      if (projections[normalizeName(playerName)]) {\r\n        newState[playerName] = projections[normalizeName(playerName)];\r\n      } else {\r\n        // TODO set back to 0?\r\n      }\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const t1Projections = calculateProjections(\r\n    Object.values(rosters[team1]).map((p) => p.playerName),\r\n    customProjections,\r\n    gamesCount\r\n  );\r\n  const t2Projections = calculateProjections(\r\n    Object.values(rosters[team2]).map((p) => p.playerName),\r\n    customProjections,\r\n    gamesCount\r\n  );\r\n\r\n  // sort our team first\r\n  // TODO add current week to projections script\r\n  const weeks = Object.keys(stats);\r\n  const currentWeek = weeks[weeks.length - 1];\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n      }}\r\n    >\r\n      <Scoreboard\r\n        isNext={isNext}\r\n        team1={teams[team1].name}\r\n        team2={teams[team2].name}\r\n        t1Stats={stats[currentWeek].stats[team1]}\r\n        t2Stats={stats[currentWeek].stats[team2]}\r\n        t1Projections={t1Projections}\r\n        t2Projections={t2Projections}\r\n      />\r\n      {renderRoster(\r\n        rosters[team1],\r\n        projections,\r\n        customProjections,\r\n        schedule,\r\n        dateRange,\r\n        gamesCount,\r\n        {\r\n          onGameToggle,\r\n          onDateToggle,\r\n          onPlayerToggle,\r\n          onProjectionChange,\r\n          onBulkProjectionChange,\r\n          onReset\r\n        }\r\n      )}\r\n      {renderRoster(\r\n        rosters[team2],\r\n        projections,\r\n        customProjections,\r\n        schedule,\r\n        dateRange,\r\n        gamesCount,\r\n        {\r\n          onGameToggle,\r\n          onDateToggle,\r\n          onPlayerToggle,\r\n          onProjectionChange,\r\n          onBulkProjectionChange,\r\n          onReset\r\n        }\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction calculateProjections(players: string[], customProjections, gamesCount) {\r\n  return players.reduce((acc: Record<string, number | [number, number]>, playerName) => {\r\n    Object.keys(statMap).forEach((stat) => {\r\n      if (stat.includes('%')) {\r\n        if (!acc[stat]) acc[stat] = [0, 0];\r\n        acc[stat][0] +=\r\n          customProjections[playerName][stat][0] *\r\n          Object.values(gamesCount[playerName]).reduce(\r\n            (sum, isPlaying) => sum + (isPlaying ? 1 : 0),\r\n            0\r\n          );\r\n        acc[stat][1] +=\r\n          customProjections[playerName][stat][1] *\r\n          Object.values(gamesCount[playerName]).reduce(\r\n            (sum, isPlaying) => sum + (isPlaying ? 1 : 0),\r\n            0\r\n          );\r\n      } else {\r\n        if (!acc[stat]) acc[stat] = 0;\r\n        acc[stat] +=\r\n          customProjections[playerName][stat] *\r\n          Object.values(gamesCount[playerName]).reduce(\r\n            (sum, isPlaying) => sum + (isPlaying ? 1 : 0),\r\n            0\r\n          );\r\n      }\r\n    });\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nconst grid = style({\r\n  display: 'grid',\r\n  rowGap: 8,\r\n  columnGap: 4,\r\n  alignItems: 'center',\r\n  marginBottom: 16\r\n  // gridTemplateColumns: [\r\n  //   '23px',\r\n  //   '200px',\r\n  //   'auto',\r\n  //   '100px',\r\n  //   '100px',\r\n  //   '60px',\r\n  //   '60px',\r\n  //   '60px',\r\n  //   '60px',\r\n  //   '60px',\r\n  //   '60px',\r\n  //   '60px',\r\n  //   '60px'\r\n  // ]\r\n});\r\n\r\nconst teamToggle = style({\r\n  width: '[75px]',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  backgroundColor: {\r\n    default: 'gray-100'\r\n  },\r\n  opacity: {\r\n    default: 0.3,\r\n    isSelected: 1\r\n  },\r\n  borderRadius: 'sm',\r\n  borderWidth: 1,\r\n  borderStyle: 'solid',\r\n  borderColor: {\r\n    default: 'gray-25',\r\n    isSelected: 'gray-500'\r\n  },\r\n  padding: 4,\r\n  outlineStyle: 'none'\r\n});\r\n\r\nconst percentage = style({\r\n  fontSize: '[10px]',\r\n  color: 'gray-600',\r\n  textAlign: 'center'\r\n});\r\n\r\nconst rosterDate = style({\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  borderRadius: '[4px]',\r\n  gap: 4,\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  backgroundColor: {\r\n    default: 'transparent',\r\n    isInvalid: 'red-400'\r\n  },\r\n  padding: 4,\r\n  fontSize: '[13px]'\r\n});\r\n\r\nconst focusBar = style({\r\n  backgroundColor: {\r\n    default: 'transparent',\r\n    isFocused: 'blue-900'\r\n  },\r\n  height: 'full',\r\n  borderTopStartRadius: '[2px]',\r\n  borderBottomStartRadius: '[2px]'\r\n});\r\n\r\nfunction renderRoster(\r\n  roster,\r\n  projections,\r\n  customProjections,\r\n  schedule,\r\n  dateRange: string[],\r\n  gamesCount: Record<string, Record<string, boolean>>,\r\n  handlers: {\r\n    onGameToggle: (playerName: string, date: string) => void;\r\n    onDateToggle: (\r\n      roster: { playerName: string; playerStatus: string }[],\r\n      date: string,\r\n      isSelected: boolean\r\n    ) => void;\r\n    onPlayerToggle: (playerName: string, isSelected: boolean) => void;\r\n    onProjectionChange: (\r\n      playerName: string,\r\n      stat: string,\r\n      value: number | [number, number]\r\n    ) => void;\r\n    onBulkProjectionChange: (\r\n      playername: string,\r\n      stats: Record<string, number | [number, number]>\r\n    ) => void;\r\n    onReset: (playerName: string) => void;\r\n  }\r\n) {\r\n  const {\r\n    onGameToggle,\r\n    onProjectionChange,\r\n    onBulkProjectionChange,\r\n    onDateToggle,\r\n    onPlayerToggle,\r\n    onReset\r\n  } = handlers;\r\n  const dateStyle = { width: `${100 / dateRange.length}%`, flexGrow: 1 };\r\n  return (\r\n    <div\r\n      className={grid}\r\n      style={{\r\n        gridTemplateColumns: `2px 23px 200px ${dateRange.length * 100}px 100px 100px 60px 60px 60px 60px 60px 60px 60px 60px`\r\n      }}\r\n    >\r\n      <span></span>\r\n      <span></span>\r\n      <span>Player</span>\r\n      <div className={style({ width: 'full', display: 'flex' })}>\r\n        {dateRange.map((date) => {\r\n          const playerCount = roster.reduce(\r\n            (sum: number, { playerName }: { playerName: string }) =>\r\n              sum + (gamesCount[playerName][date] ? 1 : 0),\r\n            0\r\n          );\r\n          const onAction = (action: string) => {\r\n            onDateToggle(roster, date, action === 'all');\r\n          };\r\n          return (\r\n            <div\r\n              className={rosterDate({ isInvalid: playerCount > ROSTER_SLOTS })}\r\n              style={dateStyle}\r\n            >\r\n              <div className={style({ display: 'flex', gap: 4 })}>\r\n                <span>{date.replace(/^\\d{4}-/, '')}</span>\r\n                <ActionMenu size=\"XS\" isQuiet onAction={onAction}>\r\n                  <MenuItem id=\"all\">\r\n                    <SelectAll />\r\n                    <Text slot=\"label\">Select all</Text>\r\n                  </MenuItem>\r\n                  <MenuItem id=\"none\">\r\n                    <SelectNo />\r\n                    <Text slot=\"label\">Unselect all</Text>\r\n                  </MenuItem>\r\n                </ActionMenu>\r\n              </div>\r\n              <div\r\n                className={style({\r\n                  display: 'flex',\r\n                  gap: 4,\r\n                  alignItems: 'center',\r\n                  lineHeight: '[20px]'\r\n                })}\r\n              >\r\n                ({playerCount})\r\n                {playerCount > ROSTER_SLOTS && (\r\n                  <ContextualHelp variant=\"info\">\r\n                    <Heading>Invalid roster</Heading>\r\n                    <Content>This date's roster has more than 11 active players.</Content>\r\n                  </ContextualHelp>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {Object.keys(statMap).map((cat) => (\r\n        <div className={style({ display: 'flex', justifyContent: 'center' })}>{cat}</div>\r\n      ))}\r\n      <span></span>\r\n\r\n      {roster\r\n        .sort((a, b) => (a.playerName > b.playerName ? 1 : -1))\r\n        .sort((a, b) => (a.playerStatus === 'INJ' ? 1 : -1))\r\n        .map((player) => {\r\n          const { eligiblePositions, playerAvatar, playerName, playerTeamAbbr, playerStatus } =\r\n            player;\r\n          const teamSchedule = schedule[playerTeamAbbr] ?? {};\r\n          const status = playerStatus && <PlayerStatus status={playerStatus} />;\r\n          const [hasFocus, setHasFocus] = useState(false);\r\n          const onFocus = () => setHasFocus(true);\r\n          const onBlur = () => setHasFocus(false);\r\n          const onAction = (action: string) => onPlayerToggle(playerName, action === 'all');\r\n          // console.log(player)\r\n          // console.log(schedule[player.playerTeamAbbr])\r\n\r\n          return (\r\n            <>\r\n              <span className={focusBar({ isFocused: hasFocus })}>&nbsp;</span>\r\n              <span>\r\n                <Image\r\n                  src={playerAvatar}\r\n                  alt={playerName}\r\n                  styles={style({ width: '[23px]', height: '[30px]' })}\r\n                />\r\n              </span>\r\n              <div className={style({ display: 'flex', alignItems: 'center' })}>\r\n                <span\r\n                  className={style({\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    flexGrow: 1\r\n                  })}\r\n                >\r\n                  <span>{playerName}</span>\r\n                  <span\r\n                    className={style({\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: 8,\r\n                      fontSize: '[12px]'\r\n                    })}\r\n                  >\r\n                    <span>\r\n                      {playerTeamAbbr} - {eligiblePositions.filter(filterPosition).join(', ')}\r\n                    </span>\r\n                    {status}\r\n                  </span>\r\n                </span>\r\n                <ActionMenu size=\"XS\" isQuiet onAction={onAction}>\r\n                  <MenuItem id=\"all\">\r\n                    <SelectAll />\r\n                    <Text slot=\"label\">Select all</Text>\r\n                  </MenuItem>\r\n                  <MenuItem id=\"none\">\r\n                    <SelectNo />\r\n                    <Text slot=\"label\">Unselect all</Text>\r\n                  </MenuItem>\r\n                </ActionMenu>\r\n              </div>\r\n              <div className={style({ width: 'full', display: 'flex' })}>\r\n                {dateRange.map((date) => {\r\n                  if (!teamSchedule[date]) return <div style={dateStyle}></div>;\r\n\r\n                  const { opponentLogo, opponent, isHomeTeam } = teamSchedule[date];\r\n                  return (\r\n                    <div\r\n                      className={style({\r\n                        display: 'flex',\r\n                        justifyContent: 'center'\r\n                      })}\r\n                      style={dateStyle}\r\n                    >\r\n                      <ToggleButton\r\n                        className={teamToggle}\r\n                        isSelected={gamesCount[player.playerName][date]}\r\n                        onChange={() => onGameToggle(player.playerName, date)}\r\n                      >\r\n                        <Image\r\n                          src={opponentLogo}\r\n                          alt={opponent}\r\n                          styles={style({ size: 20, paddingEnd: 4 })}\r\n                        />\r\n                        {!isHomeTeam ? '@' : ''}\r\n                        {opponent}\r\n                      </ToggleButton>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <ProjectionsRow\r\n                playerName={playerName}\r\n                projections={customProjections[playerName]}\r\n                defaultProjections={projections[normalizeName(playerName)]}\r\n                onProjectionChange={onProjectionChange}\r\n                onBulkProjectionChange={onBulkProjectionChange}\r\n                onReset={onReset}\r\n                onFocus={onFocus}\r\n                onBlur={onBlur}\r\n              />\r\n            </>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ProjectionsRow(props) {\r\n  const {\r\n    playerName,\r\n    projections,\r\n    defaultProjections,\r\n    onProjectionChange,\r\n    onBulkProjectionChange,\r\n    onFocus,\r\n    onBlur,\r\n    onReset\r\n  } = props;\r\n  const [bulkImport, setBulkImport] = useState('');\r\n  // const defaultValues = useMemo(() =>\r\n  //   defaultProjections ??\r\n  //     Object.keys(statMap).reduce((acc, cat) => {\r\n  //       acc[cat] = cat.includes('%') ? [0, 0] : 0;\r\n  //       return acc;\r\n  //      }, {})\r\n  //   , []);\r\n  // const [values, setValues] = useState<Record<CompareCategory, number[] | number>>(defaultValues);\r\n  // TODO add hover styling on row when hovered or input focused\r\n\r\n  const bulkSave = (close) => {\r\n    const matches = bulkImport.match(HTBB_REGEX);\r\n    if (matches) {\r\n      const parsed = matches.slice(1);\r\n      const stats = {\r\n        'FG%': [parsed[1], parsed[2]],\r\n        'FT%': [parsed[4], parsed[5]],\r\n        '3PT': parsed[6],\r\n        PTS: parsed[7],\r\n        REB: parsed[8],\r\n        AST: parsed[9],\r\n        STL: parsed[10],\r\n        BLK: parsed[11],\r\n        TO: parsed[12]\r\n      };\r\n      onBulkProjectionChange(playerName, stats);\r\n      setBulkImport('');\r\n    } else {\r\n      console.warn('Unable to bulk import stats'); // TODO replace with toast\r\n    }\r\n    close();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {Object.entries(statMap).map(([cat, { label }]) => {\r\n        const onChange = (newValue) => {\r\n          onProjectionChange(playerName, cat, newValue);\r\n        };\r\n        return (\r\n          <div>\r\n            {/* TODO update style if value changed */}\r\n            <CategoryInput\r\n              category={cat}\r\n              name={label}\r\n              value={projections[cat]}\r\n              onChange={onChange}\r\n              onFocus={onFocus}\r\n              onBlur={onBlur}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n      <div>\r\n        <DialogTrigger type=\"popover\" hideArrow>\r\n          <ActionButton isQuiet size=\"S\">\r\n            <Edit />\r\n          </ActionButton>\r\n          <Dialog>\r\n            {({ close }) => (\r\n              <>\r\n                <Content>\r\n                  <TextArea onChange={setBulkImport} />\r\n                </Content>\r\n                <ButtonGroup>\r\n                  <Button variant=\"secondary\" onPress={close}>\r\n                    <Cancel />\r\n                  </Button>\r\n                  <Button variant=\"accent\" onPress={() => bulkSave(close)}>\r\n                    Save\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </>\r\n            )}\r\n          </Dialog>\r\n        </DialogTrigger>\r\n        {projections.isManual && <Hand />}\r\n        {/* TODO disable if row has not been changed */}\r\n        <ResetButton onPress={() => onReset(playerName)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst catInput = style({\r\n  width: {\r\n    default: 28,\r\n    isPctCat: 28\r\n  },\r\n  textAlign: 'center',\r\n  borderRadius: 'sm',\r\n  borderColor: 'gray-200',\r\n  borderWidth: 1,\r\n  borderStyle: 'solid',\r\n  padding: 4\r\n});\r\n\r\nfunction CategoryInput(props) {\r\n  const { category, defaultValue, value, name, onChange, onFocus, onBlur } = props;\r\n  const isPctCat = ['FG%', 'FT%'].includes(category);\r\n  const [showActions, setShowActions] = useState(false);\r\n\r\n  return (\r\n    <div className={style({ position: 'relative' })}>\r\n      <div className={style({ display: 'flex', gap: 4, justifyContent: 'center' })}>\r\n        <NumberField\r\n          aria-label={name}\r\n          value={isPctCat ? value[0] : value}\r\n          onFocus={() => {\r\n            onFocus?.();\r\n            setShowActions(true);\r\n          }}\r\n          onBlur={() => {\r\n            onBlur?.();\r\n            setShowActions(false);\r\n          }}\r\n          onChange={(val) => onChange(isPctCat ? [val, value[1]] : val)}\r\n        >\r\n          <Input className={catInput({ isPctCat })} />\r\n        </NumberField>\r\n        {isPctCat && (\r\n          <NumberField\r\n            aria-label={name + '2'}\r\n            value={value[1]}\r\n            onFocus={() => {\r\n              onFocus?.();\r\n              setShowActions(true);\r\n            }}\r\n            onBlur={() => {\r\n              onBlur?.();\r\n              setShowActions(false);\r\n            }}\r\n            onChange={(val) => onChange([value[0], val])}\r\n          >\r\n            <Input className={catInput({ isPctCat })} />\r\n          </NumberField>\r\n        )}\r\n        {/* <ActionButton size=\"XS\" isQuiet onPress={onReset} isDisabled={value === defaultValue}>\r\n          <Reset />\r\n        </ActionButton> */}\r\n      </div>\r\n      {isPctCat && (\r\n        <div className={percentage}>\r\n          {value[1] === 0 ? '-' : (value[0] / value[1]).toPrecision(3)}\r\n        </div>\r\n      )}\r\n      {/* {showActions && (\r\n        <div className={style({position: 'absolute', bottom: '[-100%]'})}>\r\n          <ResetButton />\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ResetButton(props) {\r\n  return (\r\n    <ActionButton size=\"XS\" isQuiet {...props}>\r\n      <Reset />\r\n    </ActionButton>\r\n  );\r\n}\r\n\r\nfunction PlayerStatus({ status }) {\r\n  return (\r\n    <span className={style({ display: 'flex', alignItems: 'center', gap: 4 })}>\r\n      <div\r\n        className={style({\r\n          display: 'flex',\r\n          padding: 0,\r\n          margin: 0,\r\n          lineHeight: '[0.8]',\r\n          justifyContent: 'center',\r\n          fontWeight: 'bold',\r\n          color: 'gray-25',\r\n          backgroundColor: 'red-900',\r\n          borderRadius: 'sm',\r\n          size: '[12px]'\r\n        })}\r\n      >\r\n        +\r\n      </div>\r\n      <span className={style({ color: 'red-900', fontWeight: 'bold' })}>{status}</span>\r\n    </span>\r\n\r\n    // <span className={style({color: 'red-800'})}> - {status}</span>\r\n  );\r\n}\r\n\r\nfunction Scoreboard(props) {\r\n  const { team1, team2, t1Stats, t2Stats, t1Projections, t2Projections, isNext } = props;\r\n  // const [isZeroed, setIsZeroed] = useState(false);\r\n\r\n  const t1Totals = {};\r\n  const t2Totals = {};\r\n  const difference = {};\r\n  const pctDiff = {};\r\n  const score = { W: 0, L: 0 }; // wins defaulted to team 1\r\n\r\n  Object.keys(statMap).forEach((statKey) => {\r\n    let team1Val, team2Val;\r\n    if (statKey.includes('%')) {\r\n      const maKey = statKey.replace('%', 'M/A');\r\n      const [t1m, t1a] = isNext ? [0, 0] : t1Stats[maKey].split('/');\r\n      const [t2m, t2a] = isNext ? [0, 0] : t2Stats[maKey].split('/');\r\n      team1Val =\r\n        (parseInt(t1m, 10) + (t1Projections[statKey]?.[0] ?? 0)) /\r\n        (parseInt(t1a, 10) + (t1Projections[statKey]?.[1] ?? 0));\r\n      team2Val =\r\n        (parseInt(t2m, 10) + (t2Projections[statKey]?.[0] ?? 0)) /\r\n        (parseInt(t2a, 10) + (t2Projections[statKey]?.[1] ?? 0));\r\n      t1Totals[statKey] = [\r\n        parseInt(t1m, 10) + (t1Projections[statKey]?.[0] ?? 0),\r\n        parseInt(t1a, 10) + (t1Projections[statKey]?.[1] ?? 0)\r\n      ];\r\n      t2Totals[statKey] = [\r\n        parseInt(t2m, 10) + (t2Projections[statKey]?.[0] ?? 0),\r\n        parseInt(t2a, 10) + (t2Projections[statKey]?.[1] ?? 0)\r\n      ];\r\n    } else {\r\n      team1Val = (isNext ? 0 : parseFloat(t1Stats[statKey])) + (t1Projections[statKey] ?? 0);\r\n      team2Val = (isNext ? 0 : parseFloat(t2Stats[statKey])) + (t2Projections[statKey] ?? 0);\r\n      t1Totals[statKey] = team1Val;\r\n      t2Totals[statKey] = team2Val;\r\n    }\r\n    difference[statKey] = getDifference(statKey, team1Val, team2Val);\r\n    pctDiff[statKey] = calculatePercentDifference(team1Val, team2Val);\r\n    if (team1Val !== team2Val) {\r\n      isWinner(statKey, team1Val, team2Val) ? score.W++ : score.L++;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        marginBottom: 24,\r\n        gap: 16\r\n      }}\r\n    >\r\n      <table style={{ fontSize: '14px', borderSpacing: 0 }}>\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: 'left' }}>Team</th>\r\n            <th style={{ width: 80 }}>FG%</th>\r\n            <th style={{ width: 80 }}>FT%</th>\r\n            <th style={{ width: 40 }}>3PT</th>\r\n            <th style={{ width: 40 }}>PTS</th>\r\n            <th style={{ width: 40 }}>REB</th>\r\n            <th style={{ width: 40 }}>AST</th>\r\n            <th style={{ width: 40 }}>STL</th>\r\n            <th style={{ width: 40 }}>BLK</th>\r\n            <th style={{ width: 40 }}>TO</th>\r\n            <th style={{ textAlign: 'right' }}>Team</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td rowSpan={4} style={{ paddingRight: 20 }}>\r\n              {team1}\r\n            </td>\r\n            {renderStatCells(t1Stats, { border: 'left', isZeroed: isNext })}\r\n            <td rowSpan={4} style={{ paddingLeft: 20 }}>\r\n              {team2}\r\n            </td>\r\n          </tr>\r\n          <tr>{renderStatCells(t2Stats, { border: 'right', isZeroed: isNext })}</tr>\r\n          <tr>\r\n            {renderStatCells(t1Totals, {\r\n              border: 'left',\r\n              className: style({\r\n                fontStyle: 'italic',\r\n                backgroundColor: 'yellow-100'\r\n              })\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            {renderStatCells(t2Totals, {\r\n              border: 'right',\r\n              className: style({\r\n                fontStyle: 'italic',\r\n                backgroundColor: 'yellow-100'\r\n              })\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td colSpan={11}>\r\n              <Divider size=\"S\" styles={style({ marginY: 4 })} />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>{score.W}</td>\r\n            {renderStatCells(difference, {\r\n              isDifference: true,\r\n              className: style({ backgroundColor: 'blue-200' })\r\n            })}\r\n            <td style={{ textAlign: 'right' }}>{score.L}</td>\r\n          </tr>\r\n          <tr>\r\n            <td></td>\r\n            {renderStatCells(pctDiff, {\r\n              isPctDifference: true,\r\n              className: style({ backgroundColor: 'blue-200' })\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction renderStatCells(\r\n  teamStats,\r\n  opts?: {\r\n    border?: 'left' | 'right';\r\n    isDifference?: boolean;\r\n    isPctDifference?: boolean;\r\n    className?: string;\r\n    isZeroed?: boolean;\r\n  }\r\n) {\r\n  const {\r\n    border,\r\n    isDifference = false,\r\n    isPctDifference = false,\r\n    className,\r\n    isZeroed = false\r\n  } = opts ?? {};\r\n  const lastIndex = Object.entries(statMap).length - 1;\r\n  return (\r\n    <>\r\n      {Object.entries(statMap).map(([statKey, stat], i) => {\r\n        let borderStyle = {\r\n          borderLeft: 'solid 2px transparent',\r\n          borderRight: 'solid 2px transparent'\r\n        };\r\n        if (border === 'left' && i === 0) {\r\n          borderStyle = { borderLeft: 'solid 2px black' };\r\n        } else if (border === 'right' && i === lastIndex) {\r\n          borderStyle = { borderRight: 'solid 2px black' };\r\n        }\r\n\r\n        if (isPctDifference) {\r\n          return (\r\n            <td className={className} style={{ textAlign: 'center', fontSize: '11px' }}>\r\n              ({teamStats[statKey].toFixed(1)}%)\r\n            </td>\r\n          );\r\n        }\r\n\r\n        if (statKey.includes('%')) {\r\n          const generalKey = statKey.replace('%', '');\r\n          const pct = Array.isArray(teamStats[statKey])\r\n            ? (teamStats[statKey][0] / teamStats[statKey][1]).toFixed(3).replace(/^0/, '')\r\n            : teamStats[statKey];\r\n          const frac = Array.isArray(teamStats[statKey])\r\n            ? `(${teamStats[statKey][0].toFixed(1)} / ${teamStats[statKey][1].toFixed(1)})`\r\n            : `(${teamStats[`${generalKey}M/A`]})`;\r\n\r\n          return (\r\n            <td className={className} style={borderStyle}>\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center'\r\n                }}\r\n              >\r\n                <span>\r\n                  {isZeroed\r\n                    ? '-'\r\n                    : isDifference\r\n                      ? parseFloat(pct).toFixed(4).replace(/0\\./, '.')\r\n                      : isNaN(pct)\r\n                        ? '-'\r\n                        : pct}\r\n                </span>\r\n                {!isDifference && <span className={percentage}>{isZeroed ? '-' : frac}</span>}\r\n              </div>\r\n            </td>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <td className={className} style={{ textAlign: 'center', ...borderStyle }}>\r\n            {isZeroed ? '-' : parseFloat(teamStats[statKey]).toFixed(1).replace(/\\.0$/, '')}\r\n          </td>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction deepClone(obj: object) {\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nfunction normalizeName(name: string) {\r\n  return name.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n}\r\n\r\nfunction calculatePercentDifference(a: number, b: number) {\r\n  return (Math.abs(a - b) / ((a + b) / 2)) * 100;\r\n}\r\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  TabListProps as AriaTabListProps,\n  TabPanel as AriaTabPanel,\n  TabPanelProps as AriaTabPanelProps,\n  TabProps as AriaTabProps,\n  TabsProps as AriaTabsProps,\n  ContextValue,\n  Group,\n  Provider,\n  Tab as RACTab,\n  TabList as RACTabList,\n  Tabs as RACTabs,\n  SelectionIndicator,\n  TabListStateContext,\n  TabRenderProps\n} from 'react-aria-components';\nimport {baseColor, focusRing, size, style} from '../style' with {type: 'macro'};\nimport {centerBaseline} from './CenterBaseline';\nimport {Collection, DOMRef, DOMRefValue, GlobalDOMAttributes, Key, Node, Orientation, RefObject} from '@react-types/shared';\nimport {CollectionBuilder} from '@react-aria/collections';\nimport {createContext, forwardRef, ReactNode, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {getAllowedOverrides, StyleProps, StylesPropWithHeight, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {IconContext} from './Icon';\nimport {inertValue, useEffectEvent, useId, useLabels, useLayoutEffect, useResizeObserver} from '@react-aria/utils';\nimport {Picker, PickerItem} from './TabsPicker';\nimport {Text, TextContext} from './Content';\nimport {useControlledState} from '@react-stately/utils';\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useHasTabbableChild} from '@react-aria/focus';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface TabsProps extends Omit<AriaTabsProps, 'className' | 'style' | 'children' | keyof GlobalDOMAttributes>, UnsafeStyles {\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StylesPropWithHeight,\n  /** The content to display in the tabs. */\n  children: ReactNode,\n  /**\n   * The amount of space between the tabs.\n   * @default 'regular'\n   */\n  density?: 'compact' | 'regular',\n  /**\n   * Defines if the text within the tabs should be hidden and only the icon should be shown.\n   * The text is always visible when the item is collapsed into a picker.\n   * @default 'show'\n   */\n  labelBehavior?: 'show' | 'hide'\n}\n\nexport interface TabProps extends Omit<AriaTabProps, 'children' | 'style' | 'className' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps {\n  /** The content to display in the tab. */\n  children: ReactNode\n}\n\nexport interface TabListProps<T> extends Omit<AriaTabListProps<T>, 'style' | 'className' | 'aria-label' | 'aria-labelledby' | keyof GlobalDOMAttributes>, StyleProps {\n  /** The content to display in the tablist. */\n  children: ReactNode | ((item: T) => ReactNode)\n}\n\nexport interface TabPanelProps extends Omit<AriaTabPanelProps, 'children' | 'style' | 'className' | keyof GlobalDOMAttributes>, UnsafeStyles {\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StylesPropWithHeight,\n  /** The content to display in the tab panels. */\n  children: ReactNode\n}\n\nexport const TabsContext = createContext<ContextValue<Partial<TabsProps>, DOMRefValue<HTMLDivElement>>>(null);\nconst InternalTabsContext = createContext<Partial<TabsProps> & {\n  tablistRef?: RefObject<HTMLDivElement | null>,\n  selectedKey?: Key | null\n}>({});\n\ninterface CollapseContextType {\n  showTabs: boolean,\n  menuId: string,\n  valueId: string,\n  ariaLabel?: string | undefined,\n  ariaDescribedBy?: string | undefined,\n  tabs: Array<Node<any>>,\n  listRef?: RefObject<HTMLDivElement | null>,\n  onSelectionChange?: (key: Key) => void\n}\n\nconst CollapseContext = createContext<CollapseContextType>({\n  showTabs: true,\n  menuId: '',\n  valueId: '',\n  tabs: []\n});\n\nconst tabs = style({\n  position: 'relative',\n  display: 'flex',\n  flexShrink: 0,\n  font: 'ui',\n  flexDirection: {\n    orientation: {\n      horizontal: 'column'\n    }\n  }\n}, getAllowedOverrides({height: true}));\n\n/**\n * Tabs organize content into multiple sections and allow users to navigate between them. The content under the set of tabs should be related and form a coherent unit.\n */\nexport const Tabs = forwardRef(function Tabs(props: TabsProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, TabsContext);\n  let {\n    density = 'regular',\n    isDisabled,\n    disabledKeys,\n    orientation = 'horizontal',\n    labelBehavior = 'show'\n  } = props;\n  let domRef = useDOMRef(ref);\n  let [value, setValue] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null!, props.onSelectionChange);\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    throw new Error('An aria-label or aria-labelledby prop is required on Tabs for accessibility.');\n  }\n\n  let tablistRef = useRef<HTMLDivElement | null>(null);\n\n  return (\n    <Provider\n      values={[\n        [InternalTabsContext, {\n          density,\n          isDisabled,\n          orientation,\n          disabledKeys,\n          selectedKey: value,\n          tablistRef,\n          onSelectionChange: setValue,\n          labelBehavior,\n          'aria-label': props['aria-label'],\n          'aria-labelledby': props['aria-labelledby']\n        }]\n      ]}>\n      <CollectionBuilder content={props.children}>\n        {collection => (\n          <CollapsingTabs\n            {...props}\n            selectedKey={value}\n            onSelectionChange={setValue}\n            collection={collection}\n            containerRef={domRef} />\n        )}\n      </CollectionBuilder>\n    </Provider>\n  );\n});\n\nconst tablist = style({\n  display: 'flex',\n  gap: {\n    orientation: {\n      horizontal: {\n        density: {\n          compact: 24,\n          regular: 32\n        },\n        labelBehavior: {\n          hide: {\n            density: {\n              compact: 16,\n              regular: 24\n            }\n          }\n        }\n      }\n    }\n  },\n  flexDirection: {\n    orientation: {\n      vertical: 'column'\n    }\n  },\n  marginEnd: {\n    orientation: {\n      vertical: 20\n    }\n  },\n  marginStart: {\n    orientation: {\n      vertical: 12\n    }\n  },\n  minWidth: 'min'\n});\n\nconst tablistWrapper = style({\n  position: 'relative',\n  minWidth: 0,\n  flexShrink: 0,\n  flexGrow: 0\n}, getAllowedOverrides());\n\nexport function TabList<T extends object>(props: TabListProps<T>): ReactNode | null {\n  let {showTabs, menuId, valueId, tabs, listRef, onSelectionChange, ariaLabel, ariaDescribedBy} = useContext(CollapseContext) ?? {};\n  let {density, orientation, labelBehavior} = useContext(InternalTabsContext);\n\n  if (showTabs) {\n    return <TabListInner {...props} />;\n  }\n  \n  return (\n    <div className={tablistWrapper(null, props.styles)}>\n      {listRef && <div className={tablist({orientation, labelBehavior, density})}>\n        <HiddenTabs items={tabs} density={density} listRef={listRef} />\n      </div>}\n      <TabsMenu\n        id={menuId}\n        valueId={valueId}\n        items={tabs}\n        onSelectionChange={onSelectionChange}\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy} />\n    </div>\n  );\n}\n\nfunction TabListInner<T extends object>(props: TabListProps<T>) {\n  let {\n    tablistRef,\n    orientation,\n    density,\n    labelBehavior,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  } = useContext(InternalTabsContext) ?? {};\n  let {tabs, listRef} = useContext(CollapseContext) ?? {};\n\n  return (\n    <div\n      style={props.UNSAFE_style}\n      className={\n        (props.UNSAFE_className || '') +\n        tablistWrapper(null, props.styles)}>\n      {listRef && <div className={tablist({orientation, labelBehavior, density})}>\n        <HiddenTabs items={tabs} density={density} listRef={listRef} />\n      </div>}\n      <RACTabList\n        {...props}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={tablistRef}\n        className={renderProps => tablist({...renderProps, labelBehavior, density})} />\n    </div>\n  );\n}\n\nconst selectedIndicator = style<{isDisabled: boolean, orientation?: Orientation}>({\n  position: 'absolute',\n  backgroundColor: {\n    default: 'neutral',\n    isDisabled: 'disabled',\n    forcedColors: {\n      default: 'Highlight',\n      isDisabled: 'GrayText'\n    }\n  },\n  height: {\n    default: 'full',\n    orientation: {\n      horizontal: '[2px]'\n    }\n  },\n  width: {\n    default: 'full',\n    orientation: {\n      vertical: '[2px]'\n    }\n  },\n  contain: 'strict',\n  transition: {\n    default: '[translate,width,height]',\n    '@media (prefers-reduced-motion: reduce)': 'none'\n  },\n  transitionDuration: 200,\n  transitionTimingFunction: 'out',\n  bottom: {\n    default: 0\n  },\n  top: {\n    orientation: {\n      vertical: 0\n    }\n  },\n  left: {\n    orientation: {\n      horizontal: 0\n    }\n  },\n  insetStart: {\n    orientation: {\n      vertical: -12\n    }\n  },\n  borderStyle: 'none',\n  borderRadius: 'full'\n});\n\nconst tab = style<TabRenderProps & {density?: 'compact' | 'regular', labelBehavior?: 'show' | 'hide', orientation?: Orientation}>({\n  ...focusRing(),\n  display: 'flex',\n  color: {\n    default: baseColor('neutral-subdued'),\n    isSelected: baseColor('neutral'),\n    isDisabled: 'disabled',\n    forcedColors: {\n      isSelected: 'Highlight',\n      isDisabled: 'GrayText'\n    }\n  },\n  borderRadius: 'sm',\n  gap: 'text-to-visual',\n  height: {\n    orientation: {\n      horizontal: {\n        density: {\n          compact: 32,\n          regular: 48\n        }\n      }\n    }\n  },\n  minHeight: {\n    orientation: {\n      vertical: {\n        density: {\n          compact: 32,\n          regular: 48\n        }\n      }\n    }\n  },\n  alignItems: 'center',\n  position: 'relative',\n  cursor: 'default',\n  textDecoration: 'none',\n  flexShrink: 0,\n  transition: 'default',\n  paddingX: {\n    labelBehavior: {\n      hide: size(6)\n    }\n  },\n  disableTapHighlight: true\n}, getAllowedOverrides());\n\nconst icon = style({\n  display: 'block',\n  flexShrink: 0,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nexport function Tab(props: TabProps): ReactNode {\n  let {density, orientation, labelBehavior} = useContext(InternalTabsContext) ?? {};\n\n  let contentId = useId();\n  let ariaLabelledBy = props['aria-labelledby'] || '';\n\n  return (\n    <RACTab\n      {...props}\n      // @ts-ignore\n      originalProps={props}\n      aria-labelledby={`${labelBehavior === 'hide' ? contentId : ''} ${ariaLabelledBy}`}\n      style={props.UNSAFE_style}\n      className={renderProps => (props.UNSAFE_className || '') + tab({...renderProps, density, labelBehavior, orientation}, props.styles)}>\n      {({\n          // @ts-ignore\n          isMenu,\n          isDisabled\n        }) => {\n        if (isMenu) {\n          return props.children;\n        } else {\n          return (\n            <Provider\n              values={[\n                [TextContext, {\n                  id: contentId,\n                  styles:\n                    style({\n                      order: 1,\n                      display: {\n                        labelBehavior: {\n                          hide: 'none'\n                        }\n                      }\n                    })({labelBehavior})\n                }],\n                [IconContext, {\n                  render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n                  styles: icon\n                }]\n              ]}>\n              <TabInner\n                orientation={orientation!}\n                isDisabled={isDisabled}>\n                {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n              </TabInner>\n            </Provider>\n          );\n        }\n      }}\n    </RACTab>\n  );\n}\n\nfunction TabInner({isDisabled, orientation, children}: {\n  isDisabled: boolean,\n  orientation: Orientation,\n  children: ReactNode\n}) {\n  let ref = useRef<HTMLDivElement | null>(null);\n  let isHidden = useContext(HiddenTabsContext);\n\n  return (\n    <>\n      {!isHidden && <SelectionIndicator ref={ref} className={selectedIndicator({isDisabled, orientation})} />}\n      {children}\n    </>\n  );\n}\n\n\nconst tabPanel = style({\n  ...focusRing(),\n  marginTop: 4,\n  color: 'gray-800',\n  flexGrow: 1,\n  minHeight: 0\n}, getAllowedOverrides({height: true}));\n\nexport function TabPanel(props: TabPanelProps): ReactNode | null {\n  let {showTabs} = useContext(CollapseContext);\n  let {selectedKey} = useContext(InternalTabsContext);\n  if (showTabs) {\n    return (\n      <AriaTabPanel\n        {...props}\n        style={props.UNSAFE_style}\n        className={renderProps => (props.UNSAFE_className ?? '') + tabPanel(renderProps, props.styles)} />\n    );\n  }\n\n  if (props.id !== selectedKey) {\n    return null;\n  }\n\n  return <CollapsedTabPanel {...props} />;\n}\n\nfunction CollapsedTabPanel(props: TabPanelProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {UNSAFE_style, UNSAFE_className = '', id, ...otherProps} = props;\n  let {menuId, valueId} = useContext(CollapseContext);\n  let ref = useRef(null);\n  let tabIndex = useHasTabbableChild(ref) ? undefined : 0;\n\n  return (\n    <Group\n      {...otherProps}\n      ref={ref}\n      aria-labelledby={menuId + ' ' + valueId}\n      tabIndex={tabIndex}\n      style={UNSAFE_style}\n      className={renderProps => UNSAFE_className + tabPanel(renderProps, props.styles)} />\n  );\n}\n\nfunction isEveryTabDisabled<T>(collection: Collection<Node<T>> | undefined, disabledKeys: Set<Key>) {\n  let testKey: Key | null = null;\n  if (collection && collection.size > 0) {\n    testKey = collection.getFirstKey();\n\n    let index = 0;\n    while (testKey && index < collection.size) {\n      // We have to check if the item in the collection has a key in disabledKeys or has the isDisabled prop set directly on it\n      if (!disabledKeys.has(testKey) && !collection.getItem(testKey)?.props?.isDisabled) {\n        return false;\n      }\n\n      testKey = collection.getKeyAfter(testKey);\n      index++;\n    }\n    return true;\n  }\n  return false;\n}\n\nconst HiddenTabsContext = createContext(false);\n\nlet HiddenTabs = function (props: {\n  listRef: RefObject<HTMLDivElement | null>,\n  items: Array<Node<any>>,\n  size?: string,\n  density?: 'compact' | 'regular'\n}) {\n  let {listRef, items = [], size, density} = props;\n\n  return (\n    <div\n      // @ts-ignore\n      inert={inertValue(true)}\n      ref={listRef}\n      className={style({\n        display: 'inherit',\n        flexDirection: 'inherit',\n        gap: 'inherit',\n        flexWrap: 'inherit',\n        position: 'absolute',\n        inset: 0,\n        visibility: 'hidden',\n        overflow: 'hidden',\n        opacity: 0\n      })}>\n      <HiddenTabsContext.Provider value>\n        {items.map((item) => {\n          // pull off individual props as an allow list, don't want refs or other props getting through\n          return (\n            <div\n              data-hidden-tab\n              style={item.props.UNSAFE_style}\n              key={item.key}\n              className={item.props.className({size, density})}>\n              {item.props.children({size, density})}\n            </div>\n          );\n        })}\n      </HiddenTabsContext.Provider>\n    </div>\n  );\n};\n\nlet TabsMenu = (props: {valueId: string, items: Array<Node<any>>, onSelectionChange: TabsProps['onSelectionChange']} & Omit<TabsProps, 'children'>) => {\n  let {id, items, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, valueId} = props;\n  let {density, onSelectionChange: _onSelectionChange, selectedKey, isDisabled, disabledKeys, labelBehavior} = useContext(InternalTabsContext);\n  let onSelectionChange = useCallback((key: Key | null) => {\n    if (key != null) {\n      _onSelectionChange?.(key);\n    }\n  }, [_onSelectionChange]);\n  let state = useContext(TabListStateContext);\n  let allKeysDisabled = useMemo(() => {\n    return isEveryTabDisabled(state?.collection, disabledKeys ? new Set(disabledKeys) : new Set());\n  }, [state?.collection, disabledKeys]);\n  let labelProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  });\n\n  return (\n    <div\n      className={style({\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        height: {\n          density: {\n            compact: 32,\n            regular: 48\n          }\n        }})({density})}>\n      <Picker\n        id={id}\n        valueId={valueId}\n        {...labelProps}\n        aria-describedby={props['aria-describedby']}\n        aria-details={props['aria-details']}\n        isDisabled={isDisabled || allKeysDisabled}\n        density={density!}\n        labelBehavior={labelBehavior}\n        items={items}\n        disabledKeys={disabledKeys}\n        selectedKey={selectedKey}\n        onSelectionChange={onSelectionChange}>\n        {(item: Node<any>) => {\n          return (\n            <PickerItem\n              {...item.props.originalProps}\n              isDisabled={isDisabled || allKeysDisabled}\n              key={item.key}>\n              {item.props.children({density, isMenu: true})}\n            </PickerItem>\n          );\n        }}\n      </Picker>\n    </div>\n  );\n};\n\nlet CollapsingTabs = ({collection, containerRef, ...props}: {collection: Collection<Node<unknown>>, containerRef: any} & TabsProps) => {\n  let {orientation = 'horizontal', onSelectionChange} = props;\n  let [showItems, _setShowItems] = useState(true);\n  showItems = orientation === 'vertical' ? true : showItems;\n  let setShowItems = useCallback((value: boolean) => {\n    if (orientation === 'vertical') {\n      // if orientation is vertical, we always show the items\n      _setShowItems(true);\n    } else {\n      _setShowItems(value);\n    }\n  }, [orientation]);\n\n  let {direction} = useLocale();\n\n  let children = useMemo(() => [...collection], [collection]);\n\n  let listRef = useRef<HTMLDivElement | null>(null);\n  let updateOverflow = useEffectEvent(() => {\n    if (orientation === 'vertical' || !listRef.current || !containerRef?.current) {\n      return;\n    }\n    let container = listRef.current;\n    let containerRect = container.getBoundingClientRect();\n    let tabs = container.querySelectorAll('[data-hidden-tab]');\n    let lastTab = tabs[tabs.length - 1];\n    let lastTabRect = lastTab.getBoundingClientRect();\n    if (direction === 'ltr') {\n      setShowItems?.(lastTabRect.right <= containerRect.right);\n    } else {\n      setShowItems?.(lastTabRect.left >= containerRect.left);\n    }\n  });\n\n  useResizeObserver({ref: containerRef, onResize: updateOverflow});\n\n  useLayoutEffect(() => {\n    if (collection.size > 0) {\n      queueMicrotask(updateOverflow);\n    }\n  }, [collection.size, updateOverflow]);\n\n  // start with null so that the first render won't have a flicker\n  let prevOrientation = useRef<Orientation | null>(null);\n  useLayoutEffect(() => {\n    if (collection.size > 0 && prevOrientation.current !== orientation) {\n      updateOverflow();\n    }\n    prevOrientation.current = orientation;\n  }, [collection.size, updateOverflow, orientation]);\n\n  useEffect(() => {\n    // Recalculate visible tags when fonts are loaded.\n    document.fonts?.ready.then(() => updateOverflow());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let menuId = useId();\n  let valueId = useId();\n\n  let contents: ReactNode;\n  if (showItems) {\n    contents = (\n      <RACTabs\n        {...props}\n        style={{display: 'contents'}}>\n        {props.children}\n      </RACTabs>\n    );\n  } else {\n    contents = (\n      <>\n        <CollapseContext.Provider value={{showTabs: false, tabs: children, menuId, valueId, listRef: listRef, onSelectionChange, ariaLabel: props['aria-label'], ariaDescribedBy: props['aria-labelledby']}}>\n          {props.children}\n        </CollapseContext.Provider>\n      </>\n    );\n  }\n\n  return (\n    <div style={props.UNSAFE_style} className={(props.UNSAFE_className || '') + tabs({orientation}, props.styles)} ref={containerRef}>\n      <CollapseContext.Provider value={{showTabs: true, menuId, valueId, tabs: children, listRef: listRef}}>\n        {contents}\n      </CollapseContext.Provider>\n    </div>\n  );\n};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n  PopoverProps as AriaPopoverProps,\n  Select as AriaSelect,\n  SelectProps as AriaSelectProps,\n  Button,\n  ContextValue,\n  DEFAULT_SLOT,\n  ListBox,\n  ListBoxItem,\n  ListBoxItemProps,\n  ListBoxProps,\n  Provider,\n  SelectValue\n} from 'react-aria-components';\nimport {baseColor, edgeToText, focusRing, size, style} from '../style' with {type: 'macro'};\nimport {centerBaseline} from './CenterBaseline';\nimport {\n  checkmark,\n  description,\n  icon,\n  label,\n  menuitem,\n  sectionHeader,\n  sectionHeading\n} from './Menu';\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport ChevronIcon from '../ui-icons/Chevron';\nimport {controlFont, fieldInput, StyleProps} from './style-utils' with {type: 'macro'};\nimport {\n  FieldLabel\n} from './Field';\nimport {FocusableRef, FocusableRefValue, SpectrumLabelableProps} from '@react-types/shared';\nimport {forwardRefType} from './types';\nimport {HeaderContext, HeadingContext, Text, TextContext} from './Content';\nimport {IconContext} from './Icon';\nimport {Placement, useLocale} from 'react-aria';\nimport {Popover} from './Popover';\nimport {pressScale} from './pressScale';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport React, {createContext, forwardRef, ReactNode, useContext, useRef} from 'react';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useFormProps} from './Form';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\nexport interface PickerStyleProps {\n}\nexport interface PickerProps<T extends object> extends\n  Omit<AriaSelectProps<T>, 'children' | 'style' | 'className' | 'placeholder'>,\n  PickerStyleProps,\n  StyleProps,\n  SpectrumLabelableProps,\n  Pick<ListBoxProps<T>, 'items'>,\n  Pick<AriaPopoverProps, 'shouldFlip'> {\n    /** The contents of the collection. */\n    children: ReactNode | ((item: T) => ReactNode),\n    /**\n     * Direction the menu will render relative to the Picker.\n     *\n     * @default 'bottom'\n     */\n    direction?: 'bottom' | 'top',\n    /**\n     * Alignment of the menu relative to the input target.\n     *\n     * @default 'start'\n     */\n    align?: 'start' | 'end',\n    /** Width of the menu. By default, matches width of the trigger. Note that the minimum width of the dropdown is always equal to the trigger's width. */\n    menuWidth?: number,\n    /** Density of the tabs, affects the height of the picker. */\n    density: 'compact' | 'regular',\n    /**\n     * If the tab picker should only display icon and no text for the button label.\n     * @default 'show\n     */\n    labelBehavior?: 'show' | 'hide',\n    /** Id for the SelectedValue so we can label using it. */\n    valueId?: string\n}\nexport const PickerContext = createContext<ContextValue<Partial<PickerProps<any>>, FocusableRefValue<HTMLButtonElement>>>(null);\nconst inputButton = style({\n  ...focusRing(),\n  ...fieldInput(),\n  outlineStyle: {\n    default: 'none',\n    isFocusVisible: 'solid'\n  },\n  position: 'relative',\n  font: 'ui',\n  display: 'flex',\n  textAlign: 'start',\n  borderStyle: 'none',\n  borderRadius: 'sm',\n  alignItems: 'center',\n  transition: 'default',\n  columnGap: 'text-to-visual',\n  paddingX: 0,\n  backgroundColor: 'transparent',\n  color: {\n    default: baseColor('neutral'),\n    isDisabled: 'disabled'\n  },\n  maxWidth: {\n    isQuiet: 'max'\n  },\n  disableTapHighlight: true,\n  height: {\n    default: 48,\n    density: {\n      compact: 32\n    }\n  },\n  boxSizing: 'border-box'\n});\nexport let menu = style({\n  outlineStyle: 'none',\n  display: 'grid',\n  gridTemplateColumns: [edgeToText(32), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(32)],\n  boxSizing: 'border-box',\n  width: 'full',\n  maxHeight: 'inherit',\n  overflow: 'auto',\n  padding: 8,\n  fontFamily: 'sans',\n  fontSize: controlFont()\n});\nconst valueStyles = style({\n  flexGrow: 0,\n  truncate: true,\n  display: 'flex',\n  alignItems: 'center',\n  height: 'full'\n});\nconst iconStyles = style({\n  flexShrink: 0,\n  rotate: 90,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\nconst iconCenterWrapper = style({\n  display: 'flex',\n  gridArea: 'icon',\n  paddingStart: {\n    labelBehavior: {\n      hide: size(6)\n    }\n  }\n});\nlet InsideSelectValueContext = createContext(false);\nfunction Picker<T extends object>(props: PickerProps<T>, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, PickerContext);\n  let domRef = useFocusableRef(ref);\n  props = useFormProps(props);\n  let {\n    direction = 'bottom',\n    align = 'start',\n    shouldFlip = true,\n    children,\n    items,\n    density,\n    labelBehavior = 'show',\n    valueId,\n    ...pickerProps\n  } = props;\n  let isQuiet = true;\n  const menuOffset: number = 6;\n  const size = 'M';\n  let ariaLabelledby = props['aria-labelledby'] ?? '';\n  let {direction: dir} = useLocale();\n  let RTLFlipOffset = dir === 'rtl' ? -1 : 1;\n\n  return (\n    <div>\n      <AriaSelect\n        {...pickerProps}\n        aria-labelledby={`${labelBehavior === 'hide' ? valueId : ''} ${ariaLabelledby}`}>\n        {({isOpen}) => (\n          <>\n            <FieldLabel isQuiet={isQuiet} />\n            <Button\n              ref={domRef}\n              style={renderProps => pressScale(domRef)(renderProps)}\n              // Prevent press scale from sticking while Picker is open.\n              // @ts-ignore\n              isPressed={false}\n              className={renderProps => inputButton({\n                ...renderProps,\n                size: 'M',\n                isOpen,\n                isQuiet,\n                density\n              })}>\n              <SelectValue className={valueStyles + ' ' + raw('&> * {display: none;}')}>\n                {({defaultChildren}) => {\n                  return (\n                    <Provider\n                      values={[\n                        [IconContext, {\n                          slots: {\n                            icon: {\n                              render: centerBaseline({slot: 'icon', styles: iconCenterWrapper({labelBehavior})}),\n                              styles: icon\n                            }\n                          }\n                        }],\n                        [TextContext, {\n                          slots: {\n                            // Default slot is useful when converting other collections to PickerItems.\n                            [DEFAULT_SLOT]: {\n                              id: valueId,\n                              styles: style({\n                                display: {\n                                  default: 'block',\n                                  labelBehavior: {\n                                    hide: 'none'\n                                  }\n                                },\n                                flexGrow: 1,\n                                truncate: true\n                              })({labelBehavior})\n                            }\n                          }\n                        }],\n                        [InsideSelectValueContext, true]\n                      ]}>\n                      {defaultChildren}\n                    </Provider>\n                  );\n                }}\n              </SelectValue>\n              <ChevronIcon\n                size={size}\n                className={iconStyles} />\n            </Button>\n            <Popover\n              hideArrow\n              offset={menuOffset}\n              crossOffset={RTLFlipOffset * -12}\n              placement={`${direction} ${align}` as Placement}\n              shouldFlip={shouldFlip}\n              styles={style({\n                minWidth: 192,\n                width: 'calc(var(--trigger-width) - 24)'\n              })}>\n              <div\n                className={style({\n                  display: 'flex',\n                  size: 'full'\n                })}>\n                <Provider\n                  values={[\n                    [HeaderContext, {styles: sectionHeader({size})}],\n                    [HeadingContext, {\n                      // @ts-ignore\n                      role: 'presentation',\n                      styles: sectionHeading\n                    }],\n                    [TextContext, {\n                      slots: {\n                        description: {styles: description({size})}\n                      }\n                    }]\n                  ]}>\n                  <ListBox\n                    items={items}\n                    className={menu}>\n                    {children}\n                  </ListBox>\n                </Provider>\n              </div>\n            </Popover>\n          </>\n        )}\n      </AriaSelect>\n      <TabLine isDisabled={props.isDisabled} />\n    </div>\n  );\n}\n/**\n * Pickers allow users to choose a single option from a collapsible list of options when space is limited.\n */\nlet _Picker = /*#__PURE__*/ (forwardRef as forwardRefType)(Picker);\nexport {_Picker as Picker};\n\n\nconst selectedIndicator = style<{isDisabled?: boolean}>({\n  backgroundColor: {\n    default: 'neutral',\n    isDisabled: 'disabled',\n    forcedColors: {\n      default: 'Highlight',\n      isDisabled: 'GrayText'\n    }\n  },\n  height: '[2px]',\n  borderStyle: 'none',\n  borderRadius: 'full',\n  marginTop: '[-2px]',\n  transitionDuration: 130,\n  transitionTimingFunction: 'in-out'\n});\nfunction TabLine(props: {isDisabled?: boolean}) {\n  return <div className={selectedIndicator(props)} />;\n}\n\n\nexport interface PickerItemProps extends Omit<ListBoxItemProps, 'children' | 'style' | 'className'>, StyleProps {\n  children: ReactNode\n}\nexport function PickerItem(props: PickerItemProps): ReactNode {\n  let ref = useRef(null);\n  let isLink = props.href != null;\n  const size = 'M';\n  return (\n    <ListBoxItem\n      {...props}\n      ref={ref}\n      textValue={props.textValue || (typeof props.children === 'string' ? props.children as string : undefined)}\n      style={pressScale(ref, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + menuitem({...renderProps, size, isLink}, props.styles)}>\n      {(renderProps) => {\n        let {children} = props;\n        return (\n          <DefaultProvider\n            context={IconContext}\n            value={{slots: {\n              icon: {render: centerBaseline({slot: 'icon', styles: iconCenterWrapper({})}), styles: icon}\n            }}}>\n            <DefaultProvider\n              context={TextContext}\n              value={{\n                slots: {\n                  [DEFAULT_SLOT]: {styles: label({size})}\n                }\n              }}>\n              {!isLink && <CheckmarkIcon size={size} className={checkmark({...renderProps, size})} />}\n              {typeof children === 'string' ? <Text>{children}</Text> : children}\n            </DefaultProvider>\n          </DefaultProvider>\n        );\n      }}\n    </ListBoxItem>\n  );\n}\n// A Context.Provider that only sets a value if not inside SelectValue.\nfunction DefaultProvider({context, value, children}: {context: React.Context<any>, value: any, children: any}) {\n  let inSelectValue = useContext(InsideSelectValueContext);\n  if (inSelectValue) {\n    return children;\n  }\n  return <context.Provider value={value}>{children}</context.Provider>;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  TextArea as AriaTextArea,\n  TextAreaContext as AriaTextAreaContext,\n  TextField as AriaTextField,\n  TextFieldProps as AriaTextFieldProps,\n  composeRenderProps,\n  ContextValue,\n  InputContext,\n  InputProps,\n  useSlottedContext\n} from 'react-aria-components';\nimport {centerPadding, controlSize, field, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {createContext, forwardRef, ReactNode, Ref, useContext, useImperativeHandle, useRef} from 'react';\nimport {createFocusableRef} from '@react-spectrum/utils';\nimport {FieldErrorIcon, FieldGroup, FieldLabel, HelpText, Input} from './Field';\nimport {FormContext, useFormProps} from './Form';\nimport {GlobalDOMAttributes, HelpTextProps, RefObject, SpectrumLabelableProps} from '@react-types/shared';\nimport {mergeRefs} from '@react-aria/utils';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\nimport {TextFieldRef} from '@react-types/textfield';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface TextFieldProps extends Omit<AriaTextFieldProps, 'children' | 'className' | 'style' | keyof GlobalDOMAttributes>, StyleProps, SpectrumLabelableProps, HelpTextProps, Pick<InputProps, 'placeholder'> {\n  /**\n   * The size of the text field.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL'\n}\n\nexport const TextFieldContext = createContext<ContextValue<Partial<TextFieldProps>, TextFieldRef>>(null);\n\n/**\n * TextFields are text inputs that allow users to input custom text entries\n * with a keyboard. Various decorations can be displayed around the field to\n * communicate the entry requirements.\n */\nexport const TextField = forwardRef(function TextField(props: TextFieldProps, ref: Ref<TextFieldRef>) {\n  [props, ref] = useSpectrumContextProps(props, ref, TextFieldContext);\n  return (\n    <TextFieldBase\n      {...props}\n      ref={ref}>\n      <Input />\n    </TextFieldBase>\n  );\n});\n\nexport interface TextAreaProps extends Omit<TextFieldProps, 'type' | 'pattern'> {}\n\nexport const TextAreaContext = createContext<ContextValue<Partial<TextAreaProps>, TextFieldRef<HTMLTextAreaElement>>>(null);\n\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\nexport const TextArea = forwardRef(function TextArea(props: TextAreaProps, ref: Ref<TextFieldRef<HTMLTextAreaElement>>) {\n  [props, ref] = useSpectrumContextProps(props, ref, TextAreaContext);\n  return (\n    <TextFieldBase\n      {...props}\n      ref={ref}\n      fieldGroupCss={style({\n        alignItems: 'baseline',\n        height: 'auto'\n      })}>\n      <TextAreaInput />\n    </TextFieldBase>\n  );\n});\n\nexport const TextFieldBase = forwardRef(function TextFieldBase(props: TextFieldProps & {children: ReactNode, fieldGroupCss?: StyleString}, ref: Ref<TextFieldRef<HTMLInputElement | HTMLTextAreaElement>>) {\n  let inputRef = useRef<HTMLInputElement>(null);\n  let domRef = useRef<HTMLDivElement>(null);\n  let formContext = useContext(FormContext);\n  props = useFormProps(props);\n  let {\n    label,\n    description,\n    errorMessage,\n    necessityIndicator,\n    labelPosition = 'top',\n    labelAlign = 'start',\n    fieldGroupCss,\n    UNSAFE_style,\n    UNSAFE_className = '',\n    ...textFieldProps\n  } = props;\n\n  // Expose imperative interface for ref\n  useImperativeHandle(ref, () => ({\n    ...createFocusableRef(domRef, inputRef),\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n\n  return (\n    <AriaTextField\n      {...textFieldProps}\n      ref={domRef}\n      style={UNSAFE_style}\n      className={UNSAFE_className + style(field(), getAllowedOverrides())({\n        size: props.size,\n        labelPosition,\n        isInForm: !!formContext\n      }, props.styles)}>\n      {composeRenderProps(props.children, (children, {isDisabled, isInvalid}) => (<>\n        <FieldLabel\n          isDisabled={isDisabled}\n          isRequired={props.isRequired}\n          size={props.size}\n          labelPosition={labelPosition}\n          labelAlign={labelAlign}\n          necessityIndicator={necessityIndicator}\n          contextualHelp={props.contextualHelp}>\n          {label}\n        </FieldLabel>\n        <FieldGroup size={props.size} styles={fieldGroupCss}>\n          <InputContext.Consumer>\n            {ctx => (\n              <InputContext.Provider value={{...ctx, ref: mergeRefs((ctx as any)?.ref, inputRef)}}>\n                {children}\n              </InputContext.Provider>\n            )}\n          </InputContext.Consumer>\n          {isInvalid && <FieldErrorIcon isDisabled={isDisabled} />}\n        </FieldGroup>\n        <HelpText\n          size={props.size}\n          isDisabled={isDisabled}\n          isInvalid={isInvalid}\n          description={description}>\n          {errorMessage}\n        </HelpText>\n      </>))}\n    </AriaTextField>\n  );\n});\n\nfunction TextAreaInput() {\n  // Force re-render when value changes so we update the height.\n  let {placeholder} = useSlottedContext(AriaTextAreaContext) ?? {};\n  let onHeightChange = (input: HTMLTextAreaElement) => {\n    // TODO: only do this if an explicit height is not given?\n    if (input) {\n      let prevAlignment = input.style.alignSelf;\n      let prevOverflow = input.style.overflow;\n      // Firefox scroll position is lost when overflow: 'hidden' is applied so we skip applying it.\n      // The measure/applied height is also incorrect/reset if we turn on and off\n      // overflow: hidden in Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1787062\n      let isFirefox = 'MozAppearance' in input.style;\n      if (!isFirefox) {\n        input.style.overflow = 'hidden';\n      }\n      input.style.alignSelf = 'start';\n      input.style.height = 'auto';\n      // offsetHeight - clientHeight accounts for the border/padding.\n      input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\n      input.style.overflow = prevOverflow;\n      input.style.alignSelf = prevAlignment;\n    }\n  };\n  let {ref} = useSlottedContext(InputContext) ?? {};\n\n  return (\n    <AriaTextArea\n      ref={mergeRefs(onHeightChange, ref as RefObject<HTMLTextAreaElement | null>)}\n      // Workaround for baseline alignment bug in Safari.\n      // https://bugs.webkit.org/show_bug.cgi?id=142968\n      placeholder={placeholder ?? ' '}\n      className={style({\n        paddingX: 0,\n        paddingY: centerPadding(),\n        minHeight: controlSize(),\n        boxSizing: 'border-box',\n        backgroundColor: 'transparent',\n        color: {\n          default: 'inherit',\n          '::placeholder': 'gray-600'\n        },\n        fontFamily: 'inherit',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        lineHeight: 'inherit',\n        flexGrow: 1,\n        minWidth: 0,\n        outlineStyle: 'none',\n        borderStyle: 'none',\n        resize: 'none',\n        overflowX: 'hidden'\n      })} />\n  );\n}\n","import React, { useEffect, useState, useMemo, useRef, useContext } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport {style} from '@react-spectrum/s2/style' with {type: 'macro'};\r\n// import {\r\n//   ActionButton,\r\n//   ActionGroup,\r\n//   Avatar,\r\n//   Checkbox,\r\n//   CheckboxGroup,\r\n//   Content,\r\n//   Dialog,\r\n//   DialogTrigger,\r\n//   Divider,\r\n//   Flex,\r\n//   Heading,\r\n//   Item,\r\n//   ProgressCircle,\r\n//   View\r\n// } from '@adobe/react-spectrum';\r\nimport { statMap } from '../util.js';\r\nimport { BoxPlotChart, BoxPlotController, BoxAndWiskers } from '@sgratzl/chartjs-chart-boxplot';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport type {CompareCategory, Stats, Teams} from '../types';\r\nimport {Toolbar} from 'react-aria-components';\r\nimport {ActionButton, DialogTrigger, Dialog, Content, Heading, ToggleButtonContext, ToggleButton} from '@react-spectrum/s2'\r\n// import { DataContext } from './Main';\r\n// import { TeamCheckboxGroup } from './TeamPicker';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BoxPlotController,\r\n  BoxAndWiskers\r\n);\r\n\r\nconst BLUE = '#1D428A';\r\nconst GOLD = '#FFC72C';\r\n\r\n// DOCS: https://www.chartjs.org/docs/latest/charts/line.html\r\n// EXAMPLE: https://react-chartjs-2.js.org/examples/line-chart\r\n\r\n\r\ninterface PerformanceHistoryProps {\r\n  stats: Stats;\r\n  teams: Teams;\r\n}\r\n\r\nexport function PerformanceHistory(props: PerformanceHistoryProps) {\r\n  const {stats, teams} = props;\r\n\r\n  const [stat, setStat] = useState<CompareCategory>('FG%');\r\n  const [chartType, setChartType] = useState('boxPlot');\r\n  const [selectedTeams, setSelectedTeams] = useState(['5']); // default to our team\r\n\r\n  const labels = Object.keys(stats).map(week => `Week ${week}`);\r\n  return (\r\n    <div className={style({display: 'flex', flexDirection: 'column', gap: 16, marginTop: 8})}>\r\n      <div className={style({display: 'flex', gap: 16})}>\r\n        <Toolbar className={style({display: 'flex', gap: 2})}>\r\n          <ToggleButton\r\n            isQuiet\r\n            isSelected={chartType === 'boxPlot'}\r\n            onPress={() => setChartType('boxPlot')}>\r\n            Box plot\r\n          </ToggleButton>\r\n          <ToggleButton\r\n            isQuiet\r\n            isSelected={chartType === 'line'}\r\n            onPress={() => setChartType('line')}>\r\n            Line\r\n          </ToggleButton>\r\n        </Toolbar>\r\n        <Toolbar className={style({display: 'flex', gap: 2})}>\r\n          {Object.keys(statMap).map(label => \r\n            <ToggleButton \r\n              isQuiet\r\n              isSelected={stat === label} \r\n              onPress={() => setStat(label)}>{label}</ToggleButton>\r\n          )}\r\n        </Toolbar>\r\n        <DialogTrigger type=\"popover\" hideArrow>\r\n          <ActionButton>Team data (1)</ActionButton>\r\n          <Dialog>\r\n            <Heading>Teams</Heading>\r\n            <Content>\r\n              checkbox group here\r\n            </Content>\r\n          </Dialog>\r\n        </DialogTrigger>\r\n      </div>\r\n      <div>\r\n        {chartType === 'boxPlot' && (\r\n          <BoxPlot stat={stat} labels={labels} stats={stats} selectedTeams={selectedTeams} teams={teams} />\r\n        )}\r\n        {chartType === 'line' && <LineGraph stat={stat} labels={labels} stats={stats} teams={teams} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst COLORS = ['red', 'orange', 'gold', 'green', 'blue', 'purple'];\r\n\r\ninterface BoxPlotProps {\r\n  labels: string[];\r\n  stats: Stats;\r\n  stat: CompareCategory;\r\n  selectedTeams: string[];\r\n  teams: Teams;\r\n}\r\n\r\nfunction BoxPlot(props: BoxPlotProps) {\r\n  const { labels, stats, stat, selectedTeams, teams } = props;\r\n\r\n  const [boxPlotData, lineData] = React.useMemo(() => {\r\n    const boxData = [],\r\n      lineData = [];\r\n    Object.entries(stats).forEach(([, teamsObj], i) => {\r\n      Object.entries(teamsObj.stats).forEach(([teamKey, teamObj]) => {\r\n        const selectedIndex = selectedTeams.findIndex(selectedKey => selectedKey === teamKey);\r\n\r\n        if (!boxData[i]) {\r\n          boxData[i] = [];\r\n        }\r\n\r\n        boxData[i].push(teamObj[stat]);\r\n        if (selectedIndex > -1) {\r\n          if (!lineData[selectedIndex]) {\r\n            lineData[selectedIndex] = [];\r\n          }\r\n          lineData[selectedIndex][i] = teamObj[stat];\r\n        }\r\n      });\r\n    });\r\n\r\n    return [boxData, lineData];\r\n  }, [stats, stat, selectedTeams]);\r\n\r\n  console.log('linedata', lineData);\r\n  const lineDatasets = lineData.map((data, i) => {\r\n    console.log('data', data);\r\n    const currentTeam = teams[selectedTeams[i]];\r\n    return {\r\n      label: currentTeam.name,\r\n      type: 'line',\r\n      data,\r\n      borderColor: COLORS[i],\r\n      backgroundColor: COLORS[i],\r\n      pointBorderColor: 'black'\r\n    };\r\n  });\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      ...lineDatasets,\r\n      {\r\n        label: 'Box',\r\n        type: 'boxplot',\r\n        data: boxPlotData,\r\n        borderColor: BLUE,\r\n        backgroundColor: '#a4cef5',\r\n        itemStyle: 'circle',\r\n        itemBackgroundColor: GOLD,\r\n        outlierBackgroundColor: 'gray'\r\n      }\r\n    ]\r\n  };\r\n\r\n  let options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: { position: 'bottom' },\r\n      title: { display: true, text: 'League performance' }\r\n    },\r\n    scales: { y: { min: 0 } }\r\n  };\r\n\r\n  // set minimum for percentages (FG/FT)\r\n  if (stat === 'FG%') {\r\n    options.scales.y.min = 0.3;\r\n  } else if (stat === 'FT%') {\r\n    options.scales.y.min = 0.6;\r\n  }\r\n  return <Chart options={options} data={data} />;\r\n}\r\n\r\ninterface LineGraphProps {\r\n  labels: string[];\r\n  stats: Stats;\r\n  stat: CompareCategory;\r\n  teams: Teams;\r\n}\r\n\r\nfunction LineGraph(props: LineGraphProps) {\r\n  const { labels, stats, stat, teams } = props;\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom'\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Team performance'\r\n      }\r\n    }\r\n  };\r\n\r\n  let datasets = useMemo(() => {\r\n    let data = [];\r\n    Object.entries(stats).forEach(([, teamsObj], week) => {\r\n      Object.entries(teamsObj.stats).forEach(([teamKey, teamObj], i) => {\r\n        // const { index, myTeam, name, stats } = teamObj;\r\n        const myTeam = teamKey === '5'; // TODO \r\n\r\n        if (!data[i]) {\r\n          // initialize each team\r\n          data[i] = {\r\n            label: teams[teamKey].name,\r\n            data: [],\r\n            borderColor: myTeam ? GOLD : BLUE,\r\n            backgroundColor: myTeam ? GOLD : BLUE,\r\n            order: myTeam ? 0 : 10,\r\n            borderWidth: myTeam ? 3 : 1,\r\n            hoverBackgroundColor: 'white'\r\n          };\r\n        }\r\n\r\n        data[i].data[week] = teamObj[stat];\r\n      });\r\n    });\r\n    return data;\r\n  }, [stat, stats]);\r\n  console.log('line data', datasets);\r\n\r\n  const data = {\r\n    labels,\r\n    datasets\r\n  };\r\n\r\n  return <Line options={options} data={data} />;\r\n}\r\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionButtonStyleProps, btnStyles} from './ActionButton';\nimport {centerBaseline} from './CenterBaseline';\nimport {ContextValue, Provider, ToggleButton as RACToggleButton, ToggleButtonProps as RACToggleButtonProps, useSlottedContext} from 'react-aria-components';\nimport {createContext, forwardRef, ReactNode} from 'react';\nimport {FocusableRef, FocusableRefValue, GlobalDOMAttributes} from '@react-types/shared';\nimport {fontRelative, style} from '../style' with {type: 'macro'};\nimport {IconContext} from './Icon';\nimport {pressScale} from './pressScale';\nimport {SkeletonContext} from './Skeleton';\nimport {StyleProps} from './style-utils';\nimport {Text, TextContext} from './Content';\nimport {ToggleButtonGroupContext} from './ToggleButtonGroup';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useFormProps} from './Form';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ToggleButtonProps extends Omit<RACToggleButtonProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange' | 'onClick' | keyof GlobalDOMAttributes>, StyleProps, ActionButtonStyleProps {\n  /** The content to display in the button. */\n  children: ReactNode,\n  /** Whether the button should be displayed with an [emphasized style](https://spectrum.adobe.com/page/action-button/#Emphasis). */\n  isEmphasized?: boolean\n}\n\nexport const ToggleButtonContext = createContext<ContextValue<Partial<ToggleButtonProps>, FocusableRefValue<HTMLButtonElement>>>(null);\n\n/**\n * ToggleButtons allow users to toggle a selection on or off, for example\n * switching between two states or modes.\n */\nexport const ToggleButton = forwardRef(function ToggleButton(props: ToggleButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ToggleButtonContext);\n  props = useFormProps(props as any);\n  let domRef = useFocusableRef(ref);\n  let ctx = useSlottedContext(ToggleButtonGroupContext);\n  let isInGroup = !!ctx;\n  let {\n    density = 'regular',\n    isJustified,\n    orientation = 'horizontal',\n    staticColor = props.staticColor,\n    isQuiet = props.isQuiet,\n    isEmphasized = props.isEmphasized,\n    size = props.size || 'M',\n    isDisabled = props.isDisabled\n  } = ctx || {};\n\n  return (\n    <RACToggleButton\n      {...props}\n      isDisabled={isDisabled}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + btnStyles({\n        ...renderProps,\n        staticColor,\n        isStaticColor: !!staticColor,\n        size,\n        isQuiet,\n        isEmphasized,\n        isPending: false,\n        density,\n        isJustified,\n        orientation,\n        isInGroup\n      }, props.styles)}>\n      <Provider\n        values={[\n          [SkeletonContext, null],\n          [TextContext, {styles: style({paddingY: '--labelPadding', order: 1, truncate: true})}],\n          [IconContext, {\n            render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n            styles: style({size: fontRelative(20), marginStart: '--iconMargin', flexShrink: 0})\n          }]\n        ]}>\n        {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n      </Provider>\n    </RACToggleButton>\n  );\n});\n","@font-face {\n  font-family: \"adobe-clean-spectrum-vf\";\n  src: url(\"https://use.typekit.net/af/ca4cba/0000000000000000775c55a1/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/ca4cba/0000000000000000775c55a1/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/ca4cba/0000000000000000775c55a1/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 100 900;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"adobe-clean-spectrum-srf-vf\";\n  src: url(\"https://use.typekit.net/af/4a1d0d/0000000000000000775c55a4/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/4a1d0d/0000000000000000775c55a4/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/4a1d0d/0000000000000000775c55a4/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n1&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 100 1000;\n  font-stretch: normal;\n}\n\n/* There are currently no italics in Spectrum. Uncomment these if needed. */\n/*\n@font-face {\n  font-family: \"adobe-clean-spectrum-vf\";\n  src: url(\"https://use.typekit.net/af/8a3244/0000000000000000775c55a2/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=i1&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/8a3244/0000000000000000775c55a2/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=i1&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/8a3244/0000000000000000775c55a2/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=i1&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: italic;\n  font-weight: 100 900;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"adobe-clean-spectrum-srf-vf\";\n  src: url(\"https://use.typekit.net/af/45f67c/0000000000000000775c55a3/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=i1&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/45f67c/0000000000000000775c55a3/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=i1&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/45f67c/0000000000000000775c55a3/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=i1&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: italic;\n  font-weight: 100 1000;\n  font-stretch: normal;\n}\n*/\n\n@font-face {\n  font-family: \"myriad-arabic\";\n  src: url(\"https://use.typekit.net/af/dfb464/00000000000000007735a2f9/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/dfb464/00000000000000007735a2f9/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/dfb464/00000000000000007735a2f9/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 700;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"myriad-arabic\";\n  src: url(\"https://use.typekit.net/af/560a53/00000000000000007735a300/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/560a53/00000000000000007735a300/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/560a53/00000000000000007735a300/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"myriad-arabic\";\n  src: url(\"https://use.typekit.net/af/0f9162/00000000000000007735a307/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/0f9162/00000000000000007735a307/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/0f9162/00000000000000007735a307/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 600;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"myriad-arabic\";\n  src: url(\"https://use.typekit.net/af/ab2792/00000000000000007735a309/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n9&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/ab2792/00000000000000007735a309/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n9&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/ab2792/00000000000000007735a309/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n9&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 900;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"myriad-hebrew\";\n  src: url(\"https://use.typekit.net/af/ffca46/00000000000000007735a30a/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/ffca46/00000000000000007735a30a/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/ffca46/00000000000000007735a30a/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 700;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"myriad-hebrew\";\n  src: url(\"https://use.typekit.net/af/e90860/00000000000000007735a313/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/e90860/00000000000000007735a313/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/e90860/00000000000000007735a313/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"myriad-hebrew\";\n  src: url(\"https://use.typekit.net/af/619974/00000000000000007735a31f/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/619974/00000000000000007735a31f/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/619974/00000000000000007735a31f/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n6&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 600;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"source-code-pro\";\n  src: url(\"https://use.typekit.net/af/88da4d/00000000000000007758ce1a/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/88da4d/00000000000000007758ce1a/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/88da4d/00000000000000007758ce1a/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n7&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 700;\n  font-stretch: normal;\n}\n\n@font-face {\n  font-family: \"source-code-pro\";\n  src: url(\"https://use.typekit.net/af/80f457/00000000000000007758ce1d/31/l?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff2\"), url(\"https://use.typekit.net/af/80f457/00000000000000007758ce1d/31/d?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"woff\"), url(\"https://use.typekit.net/af/80f457/00000000000000007758ce1d/31/a?primer=f592e0a4b9356877842506ce344308576437e4f677d7c9b78ca2162e6cad991a&fvd=n4&v=3\") format(\"opentype\");\n  font-display: auto;\n  font-style: normal;\n  font-weight: 400;\n  font-stretch: normal;\n}"],"names":[],"version":3,"file":"index.af44fab6.css.map"}